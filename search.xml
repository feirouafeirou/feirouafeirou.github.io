<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>波士顿矩阵</title>
      <link href="/archives/dd96e05f.html"/>
      <url>/archives/dd96e05f.html</url>
      
        <content type="html"><![CDATA[<h3 id="什么是波士顿矩阵法"><a href="# 什么是波士顿矩阵法" class="headerlink" title="什么是波士顿矩阵法"></a>什么是波士顿矩阵法</h3><blockquote><p>波士顿矩阵法是一个二乘二的矩阵，将公司的每一个战略事业单位（SBUs）标在一种 2 维的矩阵图上，从而显示出哪个 SBUs 提供高额的潜在收益，以及哪个 SBUs 是组织资源的漏斗。</p></blockquote><a id="more"></a><p>波士顿矩阵法的实质是为了通过业务的优化组合实现企业的现金流量平衡。</p><p>纵坐标代表相对预计销售增长率，表示企业的各战略业务单位的相对销售增长率。</p><p>横坐标代表相对市场占有率，表示企业各战略业务单位的市场占有率与同行业最大的竞争者的市场占有率之比。</p><h3 id="波士顿矩阵法的目的"><a href="# 波士顿矩阵法的目的" class="headerlink" title="波士顿矩阵法的目的"></a>波士顿矩阵法的目的 </h3><p> 协助企业分析其业务和产品系列的表现，从而协助企业更妥善地分配资源，及作为品牌建立和营销、产品管理、战略管理及公司整体业务的分析工具。</p><p>波士顿矩阵根据“预计市场增长率”和“相对市场占有率”评估一个企业的整体业务情况。</p><h3 id="波士顿矩阵法的优点"><a href="# 波士顿矩阵法的优点" class="headerlink" title="波士顿矩阵法的优点"></a>波士顿矩阵法的优点 </h3><p> 简单明了，可以使公司在资源有限的情况下，合理安排产品组合，收获或放弃萎缩产品，加大对有发展前景的产品上投资。</p><h3 id="波士顿矩阵法 4 种不同的业务组合"><a href="# 波士顿矩阵法 4 种不同的业务组合" class="headerlink" title="波士顿矩阵法 4 种不同的业务组合"></a>波士顿矩阵法 4 种不同的业务组合</h3><p>(1) 明星型业务（指高增长、高市场份额）</p><p>对明星型业务采用的发展战略是，积极扩大经济规模和市场机会，以长远利益为目标，提高市场占有率，加强竞争地位。</p><p>(2) 问题型业务（指高增长、低市场份额）</p><p>对问题型业务应采取选择性投资战略，即首先确定对该象限中那些经过改进可能会成为明星的产品，进行重点投资，提高市场占有率，使之转变成“明星产品”。</p><p>(3) 现金牛型业务（指低增长、高市场份额）</p><p>对现金牛型业务应采取采用收获战略，即所投入资源以达到短期收益最大化为限。具体做法是：a. 把设备投资和其他投资尽量压缩；b. 采用榨油式方法，争取在短时间内获取更多利润，为其他产品提供资金支持。</p><p>(4) 瘦狗型业务（指低增长、低市场份额）</p><p>对瘦狗型业务应采取采用撤退战略。首先应减少批量，逐渐撤退，对那些销售增长率和市场占有率均极低的产品应立即淘汰；其次是将剩余资源向其他产品转移；最后是整顿产品系列，最好将瘦狗产品与其他事业部合并，统一管理。</p><h3 id="如何用波士顿矩阵法型来具体分析"><a href="# 如何用波士顿矩阵法型来具体分析" class="headerlink" title="如何用波士顿矩阵法型来具体分析"></a>如何用波士顿矩阵法型来具体分析 </h3><p> 第一步：评选各项业务的前景，具体数据可以从企业的经营分析系统中提取。</p><p>第二步：评选各项业务的竞争地位，具体需要做市场调查才能得到相对准确的数据。</p><p>方法：竞争地位 = 公司的收益 / 其最大竞争对手收益。</p><p>第三步：明确各项业务在波士顿矩阵图上的位置，具体以业务在二维坐标上的坐标点为圆心画一个圆圈，圆圈的大小来表示企业每项业务的销售额。</p><p>第四步：明确纵坐标“预计销售增长率”的一个标准线，从而将“预计销售增长率”划分为高、低两个区域。</p><p>标准线的确认有两个具体方法：</p><p>A. 计算出该行业市场的平均增长率作为界分点</p><p>B. 把多种产品的市场增长率 (加权) 后得到的平均值作为界分点</p><blockquote><p>备注：高市场增长率的销售额至少达到 10% 的年增长率</p></blockquote><p>第四步：确定横坐标“相对市场占有率”的一个标准线，从而将“相对市场占有率”划分为高、低两个区域。</p><img data-src="/archives/undefined/v2-7852eadc5227619dd94869c172b9ead4_hd.jpg" class><h3 id="波士顿矩阵法在实际案例中的运用"><a href="# 波士顿矩阵法在实际案例中的运用" class="headerlink" title="波士顿矩阵法在实际案例中的运用"></a>波士顿矩阵法在实际案例中的运用 </h3><p><strong> 背景说明：</strong></p><p>上海和达汽车零部件有限公司是由某国内上市公司与外商合的生产汽车零部件的企业。</p><p><strong>产品分类：</strong></p><p>一是挤塑和复合挤塑类(密封嵌条、车顶饰条等)</p><p>二是滚压折弯类(车门导槽、滑轨、车架管</p><p>三是普通金属焊接类(汽车仪表板横梁模块)</p><p>四是激光焊接镁合金横梁模块)</p><p>五是排档杆类(手动排档总成系列)。</p><p><strong>和达公司产品波士顿矩阵图:</strong></p>  <img data-src="/archives/undefined/v2-563ccc0403ce042c580c00dc3a58ec63_hd.jpg" class><p>A. 问题型业务</p><p>从和达公司的情况来看, 滚压折弯类产品由于技术含量不高、槛低，未来市场竞争程度必然加剧。所以对于这类产品, 最好就是舍弃。由于目前还能带来利润，不必迅速退出，只要目前持必要的市场份额，公司不必再增加投入。当竞争对手大举，可以舍弃。</p><p>B. 明星型业务</p><p>对于和达公司来说，铝横梁的真空电子束焊接系统是国内第一家。具有技术上的领先优势。因此企业应该加大对这一产品的投入, 以继续保持技术上的领先地位。</p><p>对于排档杆类产品．由于国内在这个领域的竞争程度还不太激烈，因此可以考虑进入。和达公司应该把这类产品作为公司的明星业务来培养, 要加大对这方面的资金支持, 在技术上应充分利用和寻找国外已具有同等类似产品的厂商进行合作。</p><p>C. 现金牛业务</p><p>对于和达公司来说，其普通金属焊接类产品即是现金牛类产品。由于进入市场的时机较早, 产品价格实惠, 每年能够给企业带来相当的利润。因此对于和达公司来说，对于金属焊接类产品，应该保持住目前的市场份额，把从这个产品中获取的利润投入到铝横梁和排档杆的产品中去。</p><p>D. 瘦狗型业务</p><p>对于和达公司来说，普通塑料异型挤出和异型体复合挤出类产品因设备陈旧等原因, 在国内已落后于主要竞争对手, 从公司战略的角度出发，应该不断对这一块进行收缩, 不必再投入更大的精力和财力，逐渐把注意力集中在激光焊接和排档杆的业务上去。</p><p><strong>总结结论：</strong></p><p>通过运用波士顿矩阵分析，使和达公司明确了产品定位和发展方向，对于企业投资的选择起到了举足轻重的作用。</p><p>但波士顿矩阵仅仅是一个工具，问题的关键在于要解决如何使企业的产品品种及其结构适合市场需求的变化，只有这样企业的生产才有意义。同时，如何将企业有限的资源有效地分配到合理的产品结构中去。以保证企业收益，是企业在激烈竞争中能否取胜的关键。</p><blockquote><p>本文转载自<a href="https://www.zhihu.com/question/20459847" target="_blank" rel="external nofollow noopener noreferrer">https://www.zhihu.com/question/20459847</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>六级英语保命</title>
      <link href="/archives/48ff0a44.html"/>
      <url>/archives/48ff0a44.html</url>
      
        <content type="html"><![CDATA[<h1 id="六级保命视频笔记"><a href="# 六级保命视频笔记" class="headerlink" title="六级保命视频笔记"></a>六级保命视频笔记</h1><blockquote><p>笔记源自刘晓艳的六级讲解 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV12k4y1z7yT%3Fp%3D3" target="_blank" rel="external nofollow noopener noreferrer"> 视频</a>。</p></blockquote><a id="more"></a><p>做题顺序：<br>写作 - 听力 - 仔细阅读 - 长篇阅读 - 段落翻译 - 选词填空</p><h3 id="1- 写作 -lt-25 分钟"><a href="#1- 写作 -lt-25 分钟" class="headerlink" title="1 写作 (&lt;25 分钟)"></a>1 写作(&lt;25 分钟)</h3><p>12 句话。<br>▲论说文<br> 谚语警句 <br> 图画图表 <br> 书信</p><h4 id="1-1- 单词替换"><a href="#1-1- 单词替换" class="headerlink" title="1.1 单词替换"></a>1.1 单词替换 </h4><p><code>think</code> -&gt;<code>be of the opinion that</code>、<code>maintain</code>、<code>contend</code><br><code>many</code> -&gt; <code>a sea of</code>、<code>multitudes of</code>、<code>plentiful</code><br><code>people/we/us</code> -&gt; <code>private individuals(个人)</code>、<code>youngsters and teenagers</code>、<code>all children and adults</code>、<code>experts and professors</code><br><code>very</code> -&gt; <code>exceedingly</code>、<code>strikingly</code>、<code>outstandingly</code><br><code>important</code> -&gt; <code>significant</code>、<code>crucial</code><br><code> 人称代词 </code> -&gt; <code> 变为被动</code></p><h4 id="1-2- 万能句型"><a href="#1-2- 万能句型" class="headerlink" title="1.2 万能句型"></a>1.2 万能句型</h4><ul><li>主语从句</li></ul><p>该句型可以写在作文中任何一句话前面用来拉长句子。<br>只记一个，只用一次。</p><blockquote><p>It has been found that…<br>It proves self-evident that…<br>It seems beyond dispute that…<br>It seems universally acknowledged that…<br>It has been widely accepted that…<br>It becomes generally agreed that…<br>It becomes my point that…</p></blockquote><ul><li>定语从句</li></ul><p>满分表达式，which 引导的非限制性定语从句可以修饰前面每句话，此时的 which 就翻译成 <strong> 这</strong>。<br>该句型可以写在作文中任何一句话后面对前面的话进行补充说明。<br>只记一个，只用一次。</p><blockquote><p>他是一个色狼，这是显而易见的<br>He is a lady killer,<br>…which is really beyond dispute.<br>…which has been widely accepted.<br>…which has provoked the public’s widespread concern.</p></blockquote><ul><li>万能状语</li></ul><p>可以用多次。</p><blockquote><p>as every one can see it<br>with the rapid advance of science and technology<br>in our contemporary society<br>in the general routine of everyday living</p></blockquote><ul><li>万能插入语</li></ul><p>只记一个，只用一次，推荐写在某一段段首句的主谓之间。</p><blockquote><p>to be frank；needless to say<br>in my judgment<br>from my perspective<br>to tell the truth<br>as a matter of fact</p></blockquote><ul><li>强调句型</li></ul><p>作文中所有的句子都可以写成强调句型。<br>推荐写在某一段段首句的时候使用，不要和插入语一起用。</p><blockquote><p>It is…that…<br>I met a crazy dog in the street yesterday<br>It was yesterday that I met a crazy dog in the street.<br>It was a crazy dog that I met in the street yesterday.</p></blockquote><h4 id="1-3- 文章"><a href="#1-3- 文章" class="headerlink" title="1.3 文章"></a>1.3 文章</h4><h5 id="1-3-1- 谚语警句型"><a href="#1-3-1- 谚语警句型" class="headerlink" title="1.3.1 谚语警句型"></a>1.3.1 谚语警句型</h5><ul><li>第一段，引出主题 1+ 解释意思 2(共 3 句)</li></ul><p>第一句：只记一个，只用一次，应适当修改单词与句型。</p><blockquote><p>Nowadays,there remains an increasing interest in the topic about…<br>Recently the issue of…has been in the limelight/brought into about…<br>What is your idea as to the topic about…?It is my belief that…;<br>It looks beyond dispute that the issue about…has caused wide public attention.</p></blockquote><p>第二三句：解释这句话的意思</p><blockquote><p>The meaning of the saying seems that…</p></blockquote><ul><li>第二段，举例</li></ul><p>第一句：只记一个，只用一次，应适当修改单词与句型。</p><blockquote><p>Although so abundant cases can support my simple view,the following one is most favorable.<br>Examples to prove the view are abundant,The most persuasive one is the case of sb.<br>Such impressive cases/stories are not rare in our daily life,yet the following one is definitely typical.</p></blockquote><p>之后，举例子，XXX 如何如何，我们应该…</p><ul><li>第三段，总结(4 句)</li></ul><p>第一句：总结句。总之，…<br>只记一个，只用一次，应适当修改单词与句型。</p><blockquote><p>Under no circumstances can we fail to pour attention into the importance/seriousness of the face that…<br>It is really high time that due attention cannot have failed to paid to the issue.</p></blockquote><p>第二三句：具体措施，政府、父母、学校、个人方面，首先…其次…</p><blockquote><p>Parents are supposed to spend more time educating their kids to do sth.<br>Awareness about sth could be cultivated to make ourselves lead a healthy and favorable life.</p></blockquote><p>第四句：呼吁</p><blockquote><p>Only by taking these action can people have a more brilliant and glorious future.<br>So shouldn’t human beings pay much attention to the meaningful saying/problem?<br>So under no account could people divert attention from the issue of sth.<br>The more actively people face the issue,the more happily they will lead their life.</p></blockquote><h5 id="1-3-2- 图画图表型"><a href="#1-3-2- 图画图表型" class="headerlink" title="1.3.2 图画图表型"></a>1.3.2 图画图表型</h5><ul><li>第一段，描述图画 2＋中心总结 1(共 3 句)</li></ul><p>描述图画:</p><blockquote><p>It seems beyond dispute that in the vivid cartoon/chart…</p></blockquote><p>总结文章中心:</p><blockquote><p>Simple as the cartoon looks,its meaning behind is really so far-reaching——</p></blockquote><ul><li><p>第二段，原因分析或 <strong> 举例</strong></p></li><li><p>第三段，同谚语警句型</p></li></ul><h5 id="1-3-3- 论说文"><a href="#1-3-3- 论说文" class="headerlink" title="1.3.3 论说文"></a>1.3.3 论说文</h5><ul><li>引出主题 + 个人观点(2 句)</li></ul><blockquote><p>Nowadays,there remains an increasing interest in the topic about…<br>The issue of…,under modern conditions,has been in the limelight/brought into focus;<br>What is your idea as to the topic about…？It is my belief that…<br>It looks beyond dispute that the issue about…has caused wide public attention.</p></blockquote><ul><li><p>第二段，原因分析或 <strong> 举例</strong></p></li><li><p>第三段，同谚语警句型</p></li></ul><h5 id="1-3-4- 书信作文"><a href="#1-3-4- 书信作文" class="headerlink" title="1.3.4 书信作文"></a>1.3.4 书信作文</h5><ul><li>第一段，自我介绍 + 写作目的</li><li>第二段，按文中要求来写</li><li>第三段，表示感谢 + 期待回信</li><li>落款</li></ul><h4 id="1-4 个人总结模板"><a href="#1-4 个人总结模板" class="headerlink" title="1.4 个人总结模板"></a>1.4 个人总结模板</h4><blockquote><p>In our contemporary society,it was as every one can see it that there remains an increasing interest in the topic about love. I have been convinced that love is love.The meaning of the saying seems that love is love.</p><p>Although multitudes of cases can support my simple view,the following one,from my perspective,is the most favorable.</p><p>Consequently,it is really high time that due attention cannot have failed to paid to the issue.Parents are supposed to spend more time educating their kids to love which has been widely accepted.At the same time,I am of the opinion that awareness about love could be cultivated to make ourselves lead a healthy and top-quality life.It seems universally acknowledged that only by taking these action can youngsters and teenagers own a more brilliant and glorious future.</p></blockquote><h3 id="2- 听力 -5 分钟预读 -30 分钟做题"><a href="#2- 听力 -5 分钟预读 -30 分钟做题" class="headerlink" title="2 听力 (5 分钟预读 +30 分钟做题)"></a>2 听力(5 分钟预读 +30 分钟做题)</h3><h4 id="2-1- 听力概述"><a href="#2-1- 听力概述" class="headerlink" title="2.1 听力概述"></a>2.1 听力概述</h4><p> 英式和美式发音。<br>速度：每分钟 150–180。<br>分值：35%。</p><h4 id="2-2- 题型"><a href="#2-2- 题型" class="headerlink" title="2.2 题型"></a>2.2 题型 </h4><p> 长对话两篇 八道题 8% 分值 <br> 篇章两篇 七道题 7% 分值 <br> 讲座 / 讲话两篇 十道题 20% 分值</p><h4 id="2-3- 大纲要求"><a href="#2-3- 大纲要求" class="headerlink" title="2.3 大纲要求"></a>2.3 大纲要求 </h4><p> 理解中心 <br> 理解细节 <br> 判断说话人态度 <br> 推测隐含关系 <br> 理解语句关系</p><h4 id="2-4- 判断选项题型"><a href="#2-4- 判断选项题型" class="headerlink" title="2.4 判断选项题型"></a>2.4 判断选项题型</h4><ul><li>主旨题</li></ul><p>选项多为 n、动名词和概括性的词。</p><ul><li>数字题</li></ul><p>一般会涉及到时间、金钱、数量，大部分所听即所选。</p><ul><li>观点态度题</li></ul><p>先进性一般性评价，在说出个人观点。<br>简介说出态度，比如说就这前人的态度，会说 the same，me too。</p><ul><li>细节题</li></ul><p>所听即所选。<br>不明显的，就重点听一些地方。</p><h4 id="2-5- 做题技巧"><a href="#2-5- 做题技巧" class="headerlink" title="2.5 做题技巧"></a>2.5 做题技巧</h4><p>1、一定要预读</p><ul><li>to + v</li><li>by 方式</li><li>备选 it 开头，可能在问一个事情或事务。</li><li>备选 they 开头，可能会问一类人或事务。</li><li>he,she,the man, the woman，在问具体的一个人的活动。</li></ul><p>2、寻找中心词，推测文章大概内容。<br>3、纵横对比，猜题目问题。<br>4、听力重点。</p><ul><li>所听即所选，顺序原则。</li><li>开头重点听。</li><li>逻辑关系词：转折、条件、原因、举例、列举。</li><li>特殊句型处。</li><li>数字信息。</li><li>比较级、最高级处。</li></ul><h3 id="3- 仔细阅读 -20 分钟"><a href="#3- 仔细阅读 -20 分钟" class="headerlink" title="3 仔细阅读(20 分钟)"></a>3 仔细阅读(20 分钟)</h3><h4 id="3-1- 时间"><a href="#3-1- 时间" class="headerlink" title="3.1 时间"></a>3.1 时间</h4><p>10min/ 篇</p><h4 id="3-2- 指导原则"><a href="#3-2- 指导原则" class="headerlink" title="3.2 指导原则"></a>3.2 指导原则</h4><ul><li><p>读首段以及各段的首句，把握文章中心(2min)。</p></li><li><p>顺序原则，出题顺序与行文顺序一致。</p></li><li><p>题型分类：</p><p>1、主旨题：无论题干问什么，四个选项当中和文章中心靠的最近的，一定是正确答案。<br>2、细节题：除主旨题外都是细节题。定位(关键词定位，顺序定位)。位置：定位句 + 前后句，细节题的正确答案一定来自文中的某句话。</p></li><li><p>问作者态度，不要选的词：<br><code>indifferent</code>、<code>biased</code>、<code>prejudiced</code>、<code>detached</code>、<code>neutral</code>、<code>pessimistic</code>、<code>subjective</code>、<code>puzzled</code>、<code>confused</code></p></li><li><p>2233 原则，六级两篇阅读 10 道题 ABCD 分配比是 2：2：3：3</p></li></ul><h3 id="4- 长篇阅读 -15 分钟"><a href="#4- 长篇阅读 -15 分钟" class="headerlink" title="4 长篇阅读(15 分钟)"></a>4 长篇阅读(15 分钟)</h3><ul><li><p>看大标题和小标题，推测文章中心，中心词不能拿来定位。</p></li><li><p>找题干中的定位词，回头定位。</p><blockquote><p>专有名词：包括 <strong> 时间 </strong>、<strong> 地点 </strong>、<strong> 数字 </strong>、<strong> 人名 </strong>、<strong> 地名 </strong>、<strong> 国家名 </strong><br> 固定概念：<strong>合成词 </strong>、<strong> 专业概念 </strong>、<strong> 特别说法 </strong>、<strong> 具体的名词 </strong>。<br> 如果以上没有：用 <strong> 动词 </strong>、<strong> 极端词 </strong>、<strong> 最高级 </strong>、<strong> 形容词 </strong>、<strong> 副词</strong>。</p></blockquote></li><li><p>重叠选项，得出答案。</p><p>找到明显定位词后，最好阅读该句意思，和选项是否一致。</p></li><li><p>查漏补缺</p><p>找不到定位的最后再做。查找重点：段首段尾、转折词、因果词、递进词。已找到两个句子的段落不用再找。</p></li></ul><h3 id="5- 段落翻译 -25 分钟"><a href="#5- 段落翻译 -25 分钟" class="headerlink" title="5 段落翻译 (25 分钟)"></a>5 段落翻译(25 分钟)</h3><p> 文章长度 (180-200 words)<br> 译文基本上表达原文的意思，文字通顺连贯，无语法错误。</p><h4 id="5-1- 翻译中单词不会写？"><a href="#5-1- 翻译中单词不会写？" class="headerlink" title="5.1 翻译中单词不会写？"></a>5.1 翻译中单词不会写？</h4><p>1、用上位词替换 <br>2、用同义词或近义词替换<br>3、<strong> 用我们会的单词把这个单词的意思解释出来 </strong><br>4、大词(主谓宾) 瞎写，小词 (形介副) 忽略</p><h4 id="5-2- 英汉差异对比"><a href="#5-2- 英汉差异对比" class="headerlink" title="5.2 英汉差异对比"></a>5.2 英汉差异对比</h4><ul><li>汉语意合，英语形合</li></ul><p>1、句子结构上，汉语没有主谓宾之分，英语必须有主谓，主语必须是谓语动词的发生者，谓语必须是主语的承受者。<br>2、逻辑关系词的使用上，替换<br><code>and</code> -&gt; <code>similarly</code>、<code>equally</code>、<code>likewise</code>、<code>at the same time</code><br><code>but</code> -&gt; <code>nevertheless</code>、<code>conversely</code>、<code>on the contrary</code>、<code>by contrast</code><br><code>so</code> -&gt; <code>therefore</code>、<code>consequently</code>、<code>as a result</code><br><code>then</code> -&gt; <code>besides</code>、<code>furthermore</code>、<code>moreover</code>、<code>in addition</code></p><ul><li>英语多被动，汉语多主动</li></ul><p>1、确定时态和主被动<br>2、确定句子主干(主谓宾)</p><ul><li>英语多长句，汉语多短句</li></ul><p>短句写成长句的三种方法：<br>1、选一个最重要的动词做谓语，其余变为非谓语动词。<br>2、从句。<br>3、使用连词。</p><h4 id="5-3- 翻译的步骤"><a href="#5-3- 翻译的步骤" class="headerlink" title="5.3 翻译的步骤"></a>5.3 翻译的步骤</h4><ul><li>以意群 (句号) 为单位读句子，确定句子 <strong> 时态和语态</strong>。</li><li>确定句子的 <strong> 主干 </strong>、非主干部分用<strong> 定语或状语 </strong> 来翻译。</li><li>每句话翻译完后都要看这句话与下句话之间的逻辑关系，从而加 <strong> 逻辑关系词</strong>。</li></ul><h3 id="6- 选词填空 -10 分钟"><a href="#6- 选词填空 -10 分钟" class="headerlink" title="6 选词填空(10 分钟)"></a>6 选词填空(10 分钟)</h3><ul><li>标注选项中单词的词性、归类。</li><li>看文章首句，了解文章中心。</li><li>根据每个空的位置判断要填单词的词性。</li><li>把对应词性的选项带入，符合意思一致即正确答案。</li></ul><blockquote><p>本文转载自<a href="https://www.jianshu.com/p/c7553d05c7c4" target="_blank" rel="external nofollow noopener noreferrer">https://www.jianshu.com/p/c7553d05c7c4</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 六级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏斗模型</title>
      <link href="/archives/5b526ed5.html"/>
      <url>/archives/5b526ed5.html</url>
      
        <content type="html"><![CDATA[<h1 id="漏斗模型"><a href="# 漏斗模型" class="headerlink" title="漏斗模型"></a>漏斗模型</h1><blockquote><p>它的主要模型框架：通过检测目标流程中起点（用户进入），到最后完成目标动作。这其中经历过的每个节点的用户量与留存量，来考核每个节点的好坏，来找到最需要优化的节点。可以说漏斗模型是用户行为状态以及从起点到终点各阶段用户转化率情况的重要分析模型。</p></blockquote><a id="more"></a><h4 id="1、模型的产品应用"><a href="#1、模型的产品应用" class="headerlink" title="1、模型的产品应用"></a>1、模型的产品应用 </h4><p> 产品的每一步都会有用户流失总转化率 = 每步转化率相乘</p><img data-src="/archives/5b526ed5/yunying4-1553497618.png" class><h4 id="2、运用步骤"><a href="#2、运用步骤" class="headerlink" title="2、运用步骤"></a>2、运用步骤</h4><h4 id="2-1- 确定业务场景"><a href="#2-1- 确定业务场景" class="headerlink" title="2.1 确定业务场景"></a>2.1 确定业务场景</h4><p>•电商产品购买•活动邀请吸粉•落地页转化•提升加群量</p><h4 id="2-2- 抽象成模型"><a href="#2-2- 抽象成模型" class="headerlink" title="2.2 抽象成模型"></a>2.2 抽象成模型 </h4><p> 核心指标•渠道 ID•PV(Page View)•UV(User View)•停留时间•转化率•跳失率 bouncing rate</p><h4 id="2-3- 流程"><a href="#2-3- 流程" class="headerlink" title="2.3 流程"></a>2.3 流程</h4><p>①梳理解锁资料的环节②收集每个环节的数据③画成漏斗，根据数据计算每个环节的转化率④分析产品影响因素</p><img data-src="/archives/5b526ed5/yunying5-1553497618.png" class><h4 id="2-4- 漏斗维度分析"><a href="#2-4- 漏斗维度分析" class="headerlink" title="2.4 漏斗维度分析"></a>2.4 漏斗维度分析 </h4><p> 在漏斗模型建立完成后，我们对数据要从如下三个维度去进行分析：</p><p><strong>纵向对比</strong>：也就是让产品与自己历史同期进行对比，这种对比适用于对某一流程或其中某个步骤进行改进或优化的效果监控；</p><p><strong>横向对比</strong>：通过将本产品的同一流程转化率在竞品中进行横向对比，定位自身产品出现的问题；</p><p><strong>来源分类</strong>：细分来源或不同的客户类型在转化率上的表现，从而完成客户群体划分。在日常分析中我们通常用于网站广告或推广的效果的评价。</p><h4 id="3、实战演练"><a href="#3、实战演练" class="headerlink" title="3、实战演练"></a>3、实战演练 </h4><p><strong>3.1 任务</strong> 最近一段时间，白熊的产品经理发现：白熊官网的总体注册转化率一直维持在 6% 左右，请你通过下面的数据，帮助白能产品经理分析问题来源。</p><img data-src="/archives/5b526ed5/yunying7-1553497619.png" class><p><strong>3.2 数据思维解决——数据可视化</strong></p><img data-src="/archives/5b526ed5/yunying7-1553497619-1.png" class><p>Chrome 浏览器注册漏斗分析</p><p><strong>分析思路：</strong>从 chrome 浏览器的浏览量来看，白熊转化率最困难是发生在从浏览到注册页只有 24.1%，说明转化率不高，网站内容未能吸引客户点击注册。需要进行软文文案修改，核心竞争力内容提高。从注册页到完善首页转化率也只有一半，说明信息填写繁琐程度可能超出用户预期体验，也可能涉及隐私，用户不想完善信息。最后提交访问页面也有少许流失，可能原因是用户注册流程被迫打断，可能是客户主观被其他事情打断，也可能客观上被网络等因素打断。</p><p><strong>小结：</strong>Chrome 浏览器注册环节转化率要提高关键要提高用户的注册可能性，需从课程本身的竞争力和推广方式来解决。</p><img data-src="/archives/5b526ed5/yunying3-1553497620.png" class><p>IE 浏览器注册漏斗分析</p><p><strong>分析思路：</strong>从 IE 浏览器的浏览量来看，白熊转化率最困难是发生在从浏览到注册页只有 4.29%，说明转化率极低，且各项数据都比 Chrome 的数据要低。横向比较和纵向比较都缺少竞品数据和历史数据无法进行，基本从来源来进行比较两组数据的差异。首先从两者浏览量上数据是相近的，那么转化率迅速下降应该是客观原因居多，可能是 IE 浏览器的交互界面比 Chrome 的更加不友好，使用户浏览欲望降低，甚至找不到注册入口。其次，部分原因可能是 IE 浏览器使用用户主体不是白熊的目标用户，IE 用户可能年龄比 Chrome 用户大，不是白熊求职服务的服务人群，导致邮箱注册的转化率降低。后两部的转化数据原因同 Chrome 相似。</p><p><strong>小结：</strong>IE 浏览器注册环节转化率要提高关键要优化官网交互界面，投放向目标客户群体。总体上 IE 浏览器的转化率拉低了总体转化率，Chrome 浏览器转化率有 12.2%，IE 浏览器转化率只有其 1/10。</p><h4 id="3-3 解决方案"><a href="#3-3 解决方案" class="headerlink" title="3.3 解决方案"></a>3.3 解决方案</h4><p>（1）提高产品内容质量需要从产品自身的内容做起，修改文案满足用户的核心需求，例如白熊要针对求职者最关注的点，比如内推、求职日历、笔试面经等进行营销。</p><p>（2）改善网站设计①可以从 UI 设计优化，针对重要功能入口，提高其级别显示，使用户快速获取注册通道。②功能优化：在点击注册之后，注册流程一定要简化，使用户体验流畅，快速获得满足感。同时减少敏感信息的收集，降低用户防御心理。先拉新留住用户，延长访问时间，之后涉及关键步骤再完善信息。③检测调试注册过程，确保提交信息过程没有产品自身原因造成。</p><blockquote><p>本文转载自<a href="https://www.iyunying.org/yunying/162886.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.iyunying.org/yunying/162886.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>三大分析法 --SWOT、PEST、波特五力</title>
      <link href="/archives/629074ab.html"/>
      <url>/archives/629074ab.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了三大分析法–SWOT、PEST、波特五力</p></blockquote><a id="more"></a><hr><h1 id="1-SWOT 分析模型"><a href="#1-SWOT 分析模型" class="headerlink" title="1. SWOT 分析模型"></a>1. SWOT 分析模型</h1><h2 id="「SWOT 分析模型简介」"><a href="#「SWOT 分析模型简介」" class="headerlink" title="「SWOT 分析模型简介」"></a><strong>「SWOT 分析模型简介」</strong></h2><p>（也称 TOWS 分析法、道斯矩阵）。在现在的战略规划报告里，SWOT 分析应该算是一个众所周知的工具。来自于麦肯锡咨询公司的 SWOT 分析，包括分析企业的优势（Strengths）、劣势（Weaknesses）、机会（Opportunities）和威胁（Threats）。因此，SWOT 分析实际上是将对企业内外部条件各方面内容进行综合和概括，进而分析组织的优劣势、面临的机会和威胁的一种方法。</p><p>通过 SWOT 分析，可以帮助企业把资源和行动聚集在自己的强项和有最多机会的地方；并让企业的战略变得明朗。</p><img data-src="/archives/629074ab/71292c023ea442f5bdc100121b3af837.jpg" class><h2 id="「SWOT 模型含义介绍」"><a href="#「SWOT 模型含义介绍」" class="headerlink" title="「SWOT 模型含义介绍」"></a><strong>「SWOT 模型含义介绍」</strong></h2><p>优劣势分析主要是着眼于企业自身的实力及其与竞争对手的比较，而机会和威胁分析将注意力放在外部环境的变化及对企业的可能影响上。在分析时，应把所有的内部因素（即优劣势）集中在一起，然后用外部的力量来对这些因素进行评估。</p><p>1. 机会与威胁分析（environmental opportunities and threats）</p><p>环境发展趋势分为两大类：一类表示环境威胁，另一类表示环境机会。环境威胁指的是环境中一种不利的发展趋势所形成的挑战，如果不采取果断的战略行为，这种不利趋势将导致公司的竞争地位受到削弱。环境机会就是对公司行为富有吸引力的领域，在这一领域中，该公司将拥有竞争优势。</p><p>对环境的分析也可以有不同的角度。比如，一种简明扼要的方法就是 <strong>PEST 分析</strong>，另外一种比较常见的方法就是<strong> 波特的五力分析</strong>。</p><p>2、 优势与劣势分析（Strengths and weaknesses）</p><p>由于企业是一个整体，而且竞争性优势来源十分广泛，所以，在做优劣势分析时必须从整个价值链的每个环节上，将企业与竞争对手做详细的对比。如产品是否新颖，制造工艺是否复杂，销售渠道是否畅通，以及价格是否具有竞争性等。如果一个企业在某一方面或几个方面的优势正是该行业企业应具备的关键成功要素，那么，该企业的综合竞争优势也许就强一些。需要指出的是，衡量一个企业及其产品是否具有竞争优势，<strong>只能站在现有潜在用户角度上</strong>，而不是站在企业的角度上。</p><p>企业在维持竞争优势过程中，必须深刻认识自身的资源和能力，采取适当的措施。因为一个企业一旦在某一方面具有了竞争优势，势必会吸引到竞争对手的注意。一般地说，企业经过一段时期的努力，建立起某种竞争优势; 然后就处于维持这种竞争优势的态势，竞争对手开始逐渐做出反应; 而后，如果竞争对手直接进攻企业的优势所在，或采取其它更为有力的策略，就会使这种优势受到削弱。</p><p>而影响企业竞争优势的持续时间，主要的是三个关键因素：</p><p>1. 建立这种优势要多长时间?</p><p>2. 能够获得的优势有多大？</p><p>3. 竞争对手做出有力反应需要多长时间？</p><h2 id="「SWOT 分析步骤」"><a href="#「SWOT 分析步骤」" class="headerlink" title="「SWOT 分析步骤」"></a><strong>「SWOT 分析步骤」</strong></h2><p>1、 确认当前的战略是什么？</p><p>2、 确认企业外部环境的变化（波特五力或者 PEST）</p><p>3、 根据企业资源组合情况，确认企业的关键能力和关键限制。</p><p>4、 按照通用矩阵或类似的方式打分评价</p><p>把识别出的所有优势分成两组，分的时候以两个原则为基础：它们是与行业中潜在的机会有关，还是与潜在的威胁有关。用同样的办法把所有的劣势分成两组，一组与机会有关，另一组与威胁有关。</p><p>5、将结果在 SWOT 分析图上定位</p><img data-src="/archives/629074ab/c4951a89ce564fd49161748c23ed0546.jpg" class><p>或者用 SWOT 分析表，将刚才的优势和劣势按机会和威胁分别填入表格。</p><img data-src="/archives/629074ab/5803c181da8f427a80aed5f4039f6ea2.jpg" class><p>6、 战略分析</p><p>成功应用 SWOT 分析法的简单规则：</p><p>进行 SWOT 分析的时候必须对公司的优势与劣势有客观的认识；</p><p>进行 SWOT 分析的时候必须区分公司的现状与前景；</p><p>进行 SWOT 分析的时候必须考虑全面。</p><p>进行 SWOT 分析的时候必须与竞争对手进行比较，比如优于或是劣于你的竞争对手；</p><p>保持 SWOT 分析法的简洁化，避免复杂化与过度分析；</p><p>SWOT 分析法因人而异。</p><p>一旦使用 SWOT 分析法决定了关键问题，也就确定是市场营销的目标。SWOT 分析法可与 PEST analysis 和 Porter’s Five-Forces analysis 等工具一起使用。运用 SWOT 分析法的时候，要将不用的要素列入相关的表格当中去，很容易操作。</p><p>针对 SWOT 中的机会部分，可以用 PEST 进行分析得到系统的结果。</p><p>针对 SWOT 中的威胁部分，可以用五力分析模型来得到系统的分析结果。2. </p><h1 id="2-PEST 分析模型"><a href="#2-PEST 分析模型" class="headerlink" title="2. PEST 分析模型"></a>2. PEST 分析模型 </h1><p>PEST 是从<strong> 政治（Politics）</strong>、<strong>经济（Economic</strong>）、<strong>社会（Society）</strong>、<strong>技术（Technology）</strong>四个方面，基于公司战略的眼光来分析企业外部宏观环境的一种方法。公司战略的制定离不开宏观环境，而 PEST 分析法能从各个方面比较好的把握宏观环境的现状及变化的趋势，有利于企业对生存发展的机会加以利用，对环境可能带来的威胁及早发现避开。</p><img data-src="/archives/629074ab/f5288851593842fd9d30a3574824b5ea.jpg" class><p>要想提高商品的销量，少不了要做产品分析，只有了解了用户的需求，知道用户要什么，才能根据这些数据更好的进行产品优化和活动推广。说到分析方法，可能有些人第一个想到的就是 SWOT，这种分析方法主要是能帮助企业找出自身优势，整合资源，从而形成企业的战略规划，<strong>如果想要更加深入了解产品分析的话，最好还是用 PEST 分析法。</strong></p><h2 id="PEST 分析的内容"><a href="#PEST 分析的内容" class="headerlink" title="PEST 分析的内容"></a><strong>PEST 分析的内容 </strong></h2><p> 一、<strong>政治环境</strong>，是指一个国家或地区的政治制度、体制、方针政策、法律法规等方面。这些因素常常影响着企业的经营行为，尤其是对企业长期的投资行为有着较大影响。</p><p>二、<strong>经济环境</strong>，指企业在制定战略过程中须考虑的国内外经济条件、宏观经济政策、经济发展水平等多种因素</p><p>三、<strong>社会环境，</strong>主要指组织所在社会中成员的民族特征、文化传统、价值观念、宗教信仰、教育水平以及风俗习惯等因素。</p><p>四、 <strong>技术环境，</strong>是指企业业务所涉及国家和地区的技术水平、技术政策、新产品开发能力以及技术发展的动态等。</p><img data-src="/archives/629074ab/935214d31d72469aae69722c26be2c4f.jpg" class><h1 id="3- 波特五力模型"><a href="#3- 波特五力模型" class="headerlink" title="3. 波特五力模型"></a>3. 波特五力模型 </h1><h2 id="定义"><a href="# 定义" class="headerlink" title="[定义]"></a>[定义]</h2><p> 五力分析模型是迈克尔·波特 (Michael Porter) 于 80 年代初提出，对企业战略制定产生全球性的深远影响。用于竞争战略的分析，可以有效的分析客户的竞争环境。五力分别是： <strong>供应商的议价能力、购买者的议价能力、潜在竞争者进入的能力、替代品的替代能力、行业内竞争者现在的竞争能力。</strong>五种力量的不同组合变化最终影响行业利润潜力变化。</p><img data-src="/archives/629074ab/1335ff9605aa4a11bd2aafe41c644399.jpg" class><h2 id="五力模型"><a href="# 五力模型" class="headerlink" title="[五力模型]"></a>[五力模型]</h2><p><strong>供应商的议价能力</strong></p><p>供方主要通过其提高投入要素价格与降低单位价值质量的能力，来影响行业中现有企业的盈利能力与产品竞争力。</p><p><strong>购买者的议价能力</strong></p><p>购买者主要通过其压价与要求提供较高的产品或服务质量的能力，来影响行业中现有企业的盈利能力。</p><p><strong>新进入者的威胁</strong></p><p>新进入者在给行业带来新生产能力、新资源的同时，将希望在已被现有企业瓜分完毕的市场中赢得一席之地，这就有可能会与现有企业发生原材料与市场份额的竞争，最终导致行业中现有企业盈利水平降低，严重的话还有可能危及这些企业的生存。竞争性进入威胁的严重程度取决于两方面的因素，这就是进入新领域的障碍大小与预期现有企业对于进入者的反应情况。</p><p><strong>替代品的威胁</strong></p><p>两个处于同行业或不同行业中的企业，可能会由于所生产的产品是互为替代品，从而在它们之间产生相互竞争行为，这种源自于替代品的竞争会以各种形式影响行业中现有企业的竞争战略。</p><p><strong>同业竞争者的竞争程度</strong></p><p>大部分行业中的企业，相互之间的利益都是紧密联系在一起的，作为企业整体战略一部分的各企业竞争战略，其目标都在于使得自己的企业获得相对于竞争对手的优势，所以，在实施中就必然会产生冲突与对抗现象，这些冲突与对抗就构成了现有企业之间的竞争。现有企业之间的竞争常常表现在价格、广告、产品介绍、售后服务等方面，其竞争强度与许多因素有关。</p><p><strong>局限性</strong></p><p>五力模型的前提假设是</p><p>1. 能够清晰的界定行业边界，行业的规模是固定的。</p><p>但现实中企业之间往往不是通过吃掉对手而是与对手共同做大行业的蛋糕来获取更大的资源和市场。同时，市场可以通过不断的开发和创新来增大容量。</p><p>2. 同行业之间只有竞争关系，没有合作关系。</p><p>但现实中企业之间存在多种合作关系，不一定是你死我活的竞争关系。</p><p>3. 能搜集到一切有效信息（信息透明），制定战略者需要了解整个行业的信息。</p><blockquote><p>本文转载自<a href="https://www.cnblogs.com/lcword/p/10274893.html" target="_blank" rel="external nofollow noopener noreferrer">https://www.cnblogs.com/lcword/p/10274893.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 之 WebAPI 学习 5</title>
      <link href="/archives/32bb900e.html"/>
      <url>/archives/32bb900e.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-WebAPI 学习 5"><a href="#JavaScript-WebAPI 学习 5" class="headerlink" title="JavaScript WebAPI 学习 5"></a>JavaScript WebAPI 学习 5</h1><a id="more"></a><h2 id="元素偏移量 -offset- 系列"><a href="# 元素偏移量 -offset- 系列" class="headerlink" title="元素偏移量 offset 系列"></a>元素偏移量 offset 系列</h2><ul><li><p>offset 可以得到元素得位置，大小等</p><ul><li>获得元素距离带有定位的父元素位置</li><li>获得元素自身的宽度高度</li></ul></li><li><p>注意：返回的数值不带单位</p></li></ul><h3 id="offset 常用属性"><a href="#offset 常用属性" class="headerlink" title="offset 常用属性"></a>offset 常用属性</h3><table><thead><tr><th>location 对象的方法</th><th>返回值</th></tr></thead><tbody><tr><td>element.offsetParent</td><td>返回带有定位的父级元素，如果父级都没有定位则返回 body</td></tr><tr><td>element.offsetTop</td><td>返回带有定位父元素的上方的距离</td></tr><tr><td>element.offsetLeft</td><td>返回带有定位的父元素的左侧的距离</td></tr><tr><td>element.offsetWidth</td><td>返回盒子的宽度 (包括 padding，border) 返回值不含单位</td></tr><tr><td>element.offsetHeight</td><td>返回盒子的高度 (包括 padding，border) 返回值不含单位</td></tr></tbody></table><ul><li><code>element.offsetParent</code>和 <code>element.parentNode</code> 的区别：offsetParent 是返回带有定位的父亲，否则返回 body，而 parentNode 返回的是最近一级的父亲，无论有没有定位</li></ul><h4 id="offset- 与 -style- 的区别"><a href="#offset- 与 -style- 的区别" class="headerlink" title="offset 与 style 的区别"></a>offset 与 style 的区别</h4><ul><li>offset 与 style 都能获取元素的宽高等属性</li><li>style 只能获取行内样式的值 (写在标签内的属性)</li><li>但是 offset 可以得到任意样式表中的值</li><li>style 返回的有单位，offset 返回值没有单位</li></ul><p><img data-src="https://img-blog.csdnimg.cn/2020053121484679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjE3MDAzNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><ul><li>重要！offset 是一个只读属性，只能获取不能赋值</li><li>style 是一个可读写属性，可以获取也可以赋值</li></ul><h4 id="offset- 案例：获取鼠标在盒子内的坐标"><a href="#offset- 案例：获取鼠标在盒子内的坐标" class="headerlink" title="offset 案例：获取鼠标在盒子内的坐标"></a>offset 案例：获取鼠标在盒子内的坐标</h4><ul><li><p>实现效果：在盒子内点击后返回鼠标距离盒子边缘的距离</p></li><li><p>思路：通过 <code>e.pageX</code> 获取鼠标在页面的横坐标，然后在减去 <code>offsetLeft</code> 就是鼠标在盒子中的坐标</p><ul><li>代码示例：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">      height: 200px;</span><br><span class="line">      width: 200px;</span><br><span class="line">      background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span></span><br><span class="line"><span class="actionscript">    box.addEventListener(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 这里的 box. 完全可以替换成 this，this 指向函数调用者</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(e.pageX - box.offsetLeft);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(e.pageY - box.offsetTop);</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="offset 实例：拖动登录框"><a href="#offset 实例：拖动登录框" class="headerlink" title="offset 实例：拖动登录框"></a>offset 实例：拖动登录框</h4><ul><li><p>实现效果：点击登录键后，出现一个小框里面是登录界面，然后这个界面可以拖动<br><img data-src="https://img-blog.csdnimg.cn/2020060208263282.gif#pic_center" alt="在这里插入图片描述"></p></li><li><p>实现思路：出现和隐藏比较简单，只需要绑定两个点击事件，然后点击时候 <code>display: none;</code> 就可以了</p></li><li><p>拖拽的思路：先有一个鼠标按下的事件 (mousedown) 和鼠标移动的事件 (mousemove)，然后把鼠标在网页中的坐标减去鼠标在盒子中的坐标然后就可以获得盒子移动的坐标</p><ul><li>因为代码实在太长了，这里只给出 js 的代码</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取元素</span></span><br><span class="line"><span class="keyword">var</span> login = <span class="built_in">document</span>.querySelector(<span class="string">'.login'</span>);</span><br><span class="line"><span class="keyword">var</span> mask = <span class="built_in">document</span>.querySelector(<span class="string">'.login-bg'</span>);</span><br><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.querySelector(<span class="string">'#link'</span>);</span><br><span class="line"><span class="keyword">var</span> closeBtn = <span class="built_in">document</span>.querySelector(<span class="string">'#closeBtn'</span>);</span><br><span class="line"><span class="keyword">var</span> title = <span class="built_in">document</span>.querySelector(<span class="string">'#title'</span>);</span><br><span class="line"><span class="comment">// 2. 点击弹出层这个链接 link  让 mask 和 login 显示出来</span></span><br><span class="line">link.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    mask.style.display = <span class="string">'block'</span>;</span><br><span class="line">    login.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 3. 点击 closeBtn 就隐藏 mask 和 login</span></span><br><span class="line">closeBtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    mask.style.display = <span class="string">'none'</span>;</span><br><span class="line">    login.style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4. 开始拖拽</span></span><br><span class="line"><span class="comment">// (1) 当我们鼠标按下， 就获得鼠标在盒子内的坐标</span></span><br><span class="line">title.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX - login.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> y = e.pageY - login.offsetTop;</span><br><span class="line">    <span class="comment">// (2) 鼠标移动的时候，把鼠标在页面中的坐标，减去 鼠标在盒子内的坐标就是模态框的 left 和 top 值</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, move)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        login.style.left = e.pageX - x + <span class="string">'px'</span>;</span><br><span class="line">        login.style.top = e.pageY - y + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, move);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>这里还要讲一下我学习时的误区，我当时想鼠标松开时解除 mousedown 事件不就好了，然而这里我就进入了一个误区，在鼠标按下的时候，mousemove 事件就已经被注册了，当我们的鼠标一移动，就不断的运行 mousemove 事件，也就是整个对话框和你的鼠标走，这时再去关闭 mousedown 事件已经没有作用了，因为对话框和你的鼠标走是在 mousemove 事件中运行的，所以我们在鼠标抬起的时候停止 mousemove 事件</li></ul><h3 id="案例：查看商品的放大镜效果"><a href="# 案例：查看商品的放大镜效果" class="headerlink" title="案例：查看商品的放大镜效果"></a>案例：查看商品的放大镜效果</h3><ul><li><p>在放在图片上的时候会出现大图来查看细节<br><img data-src="https://img-blog.csdnimg.cn/20200602082656722.gif#pic_center" alt="在这里插入图片描述"></p></li><li><p>实现方法：</p></li><li><p>鼠标经过图片，黄色遮挡层和大图片盒子显示，离开时隐藏这两个盒子</p></li><li><p>黄色遮挡层跟随鼠标的中央位置</p><ul><li>注意遮挡层应该把鼠标在盒子内的坐标赋给遮挡层的 left，top 值</li><li>操作的时候一定不要忘了单位！</li><li>移动的时候遮盖层不能超过父盒子的边缘，这里只需要判断他减完的值不要小于 0，假如小于 0 的话，那就让他的 left 值等于 0 就可以了</li></ul></li><li><p>移动黄色的遮挡层，大图片跟随移动</p></li><li><p>代码示例：</p><ul><li>test.html</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.goods_img</span> &#123;</span></span><br><span class="line">        height: 400px;</span><br><span class="line">        width: 400px;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">        cursor: move;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.shelter</span> &#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        height: 100px;</span><br><span class="line">        width: 100px;</span><br><span class="line">        pointer-events: none;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-tag">rgb</span>(247, 243, 21, <span class="selector-class">.5</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">        display: none;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 410px;</span><br><span class="line">        top: 0px;</span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 500px;</span><br><span class="line">        background-color: rgb(5, 5, 5);</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.big</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        height: 800px;</span><br><span class="line">        width: 800px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/b3.png"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"goods_img"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shelter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/big.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>detail.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取一堆元素</span></span><br><span class="line">    <span class="keyword">var</span> goods_img = <span class="keyword">this</span>.document.querySelector(<span class="string">'.goods_img'</span>);</span><br><span class="line">    <span class="keyword">var</span> big = <span class="keyword">this</span>.document.querySelector(<span class="string">'.big'</span>);</span><br><span class="line">    <span class="keyword">var</span> shelter = <span class="keyword">this</span>.document.querySelector(<span class="string">'.shelter'</span>);</span><br><span class="line">    <span class="keyword">var</span> big_img = big.querySelector(<span class="string">'img'</span>);</span><br><span class="line">    <span class="comment">// 鼠标经过小图片时，显示遮挡层和大图片</span></span><br><span class="line">    goods_img.addEventListener(<span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        shelter.style.display = <span class="string">'block'</span>;</span><br><span class="line">        big.style.display = <span class="string">'block'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 鼠标离开时，隐藏遮挡层和大图片</span></span><br><span class="line">    goods_img.addEventListener(<span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        shelter.style.display = <span class="string">'none'</span>;</span><br><span class="line">        big.style.display = <span class="string">'none'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 当鼠标移动时，开始获取鼠标的横纵坐标进行计算</span></span><br><span class="line">    goods_img.addEventListener(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在盒子内的坐标</span></span><br><span class="line">        <span class="keyword">var</span> x = m.pageX - goods_img.offsetLeft;</span><br><span class="line">        <span class="keyword">var</span> y = m.pageY - goods_img.offsetTop;</span><br><span class="line">        <span class="comment">// 遮挡层在在盒子内的 top 和 left 值</span></span><br><span class="line">        <span class="keyword">var</span> maskX = x - shelter.offsetWidth / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> maskY = y - shelter.offsetWidth / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 遮挡层移动的最大距离, 因为商品盒子是正方形，所以两个是相等的</span></span><br><span class="line">        <span class="keyword">var</span> maskMax = goods_img.offsetWidth - shelter.offsetWidth;</span><br><span class="line">        <span class="comment">// 判断盒子不能超出图片边界</span></span><br><span class="line">        <span class="keyword">if</span> (maskX &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            maskX = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskX &gt;= maskMax) &#123;</span><br><span class="line">            maskX = maskMax;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maskY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            maskY = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskY &gt;= maskMax) &#123;</span><br><span class="line">            maskY = maskMax;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        shelter.style.left = maskX + <span class="string">'px'</span>;</span><br><span class="line">        shelter.style.top = maskY + <span class="string">'px'</span>;</span><br><span class="line">        <span class="keyword">var</span> bigMax = big_img.offsetWidth - big.offsetWidth;</span><br><span class="line">        <span class="comment">// 这个是按照比例来显示右侧的图片的</span></span><br><span class="line">        <span class="keyword">var</span> bigX = maskX * bigMax / maskMax;</span><br><span class="line">        <span class="keyword">var</span> bigY = maskY * bigMax / maskMax;</span><br><span class="line">        <span class="comment">// 盒子不动，图片要往下往左走，所以这里为负值</span></span><br><span class="line">        big_img.style.left = -bigX + <span class="string">'px'</span>;</span><br><span class="line">        big_img.style.top = -bigY + <span class="string">'px'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>用到的小知识：</p><ul><li>js 写在外部的做法：</li><li>js 写在外部时需要等待所有页面加载完成才能执行 js 操作，所以 window 要加上一个 load 事件</li><li>js 引入时 <code>&lt;script src=&quot;detail.js&quot;&gt;&lt;/script&gt;</code> 这样引入就可以</li></ul></li><li><p>写这段代码时所遇到的问题：</p><ul><li>当在商品图片里移动鼠标时，遮罩层会一闪一闪的，这是因为鼠标到商品图片上上以后会执行 mouseover 事件，出现遮罩层后会因为没有在商品图片上而执行 mouseout 事件，所以就会出现一闪一闪的状况</li><li>解决方法：在遮罩层上面加 <code>pointer-events: none;</code> 属性，这个属性的意思是鼠标穿过有这个属性的元素，鼠标事件指向他下面的元素</li><li>还有还有，一定不要忘记加单位</li></ul></li></ul><h2 id="元素可视区 -client- 系列"><a href="# 元素可视区 -client- 系列" class="headerlink" title="元素可视区 client 系列"></a>元素可视区 client 系列</h2><ul><li>获取元素可视区的相关信息，例如元素边框大小，元素大小等</li></ul><table><thead><tr><th>client 对象的属性</th><th>返回值</th></tr></thead><tbody><tr><td>element.clientTop</td><td>返回元素上边框大小</td></tr><tr><td>element.clientLeft</td><td>返回元素左边框大小</td></tr><tr><td>element.clientWidth</td><td>返回盒子的宽度 (包括 padding，不含边框，返回值不含单位)</td></tr><tr><td>element.clientHeight</td><td>返回盒子的高度 (包括 padding，不含边框，返回值不含单位)</td></tr></tbody></table><ul><li>和 offsetWidth 的区别：clientWidth 不包含边框，offsetWidth 包含边框</li></ul><h2 id="立即执行函数"><a href="# 立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><ul><li>立即执行函数：不需要调用，立马自己能够执行的函数</li><li>一共有两种写法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)()</span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;())</span><br><span class="line"><span class="comment">// 第二个小括号相当于调用函数 (可以传参)</span></span><br></pre></td></tr></table></figure><ul><li>立即执行函数最大的作用是：独立创建了一个作用域 (和外界的作用域隔开，里面都是局部变量)</li></ul><blockquote><p>惊，这个莫非是命名空间</p></blockquote><h3 id="读淘宝 -flexible-js- 代码"><a href="# 读淘宝 -flexible-js- 代码" class="headerlink" title="读淘宝 flexible.js 代码"></a>读淘宝 flexible.js 代码</h3><ul><li><p>看淘宝写的代码真的赏心悦目，思考的极为周全，真的应该好好阅读大厂写的代码</p></li><li><p>大家可以看看 <a href="https://gitee.com/xiaoqiang001/jsapis_material/blob/master/%E7%AC%AC%E4%BA%94%E5%A4%A9/07-flexible%E5%88%86%E6%9E%90.js" target="_blank" rel="external nofollow noopener noreferrer"> 老师写注释的源码</a></p></li><li><p><code>pageshow</code> 事件：页面重新加载触发的事件</p></li><li><p>和 load 事件的区别：</p></li><li><p>下面三种情况都能触发 load 事件：</p><ul><li>a 标签的超链接</li><li>F5 或者刷新按钮</li><li>前进后退按钮</li></ul></li><li><p>火狐中有一个特例叫往返缓存：缓存不止缓存了页面数据，同时缓存了 DOM 和 JavaScript 的状态，实际上是把整个缓存都保存到了页面里，这时的上面的按钮就不能触发 load 事件</p></li><li><p>这个时候用 pageshow 事件就能很好的解决这个问题</p></li><li><p>而且 pageshow 有一个属性，<code>persisted</code>: 这个属性如果是从缓存加载的话那就返回 true</p></li></ul><h2 id="元素滚动 -scroll- 系列"><a href="# 元素滚动 -scroll- 系列" class="headerlink" title="元素滚动 scroll 系列"></a>元素滚动 scroll 系列</h2><ul><li>scroll 可以动态获取元素的大小，滚动的距离 (经常获取滚动条)</li></ul><table><thead><tr><th>scroll 对象的属性</th><th>返回值</th></tr></thead><tbody><tr><td>element.scrollTop</td><td>返回被滚动上去的距离 (不含单位)</td></tr><tr><td>element.scrollLeft</td><td>返回被滚动到左边的距离 (不含单位)</td></tr><tr><td>element.scrollWidth</td><td>返回内容的宽度 (包括 padding，不含边框，返回值不含单位)</td></tr><tr><td>element.scrollHeight</td><td>返回内容的高度 (包括 padding，不含边框，返回值不含单位)</td></tr></tbody></table><ul><li><p>scrollWidth 和 clientWidth 的区别：scrollWidth 假如内容超出边框的话返回的是内容的宽度，而 clientWidth 假如超过边框的话仍然返回的是盒子的宽度</p></li><li><p><code>onscroll</code> 事件：当拖动滚动条时触发</p></li></ul><h3 id="scroll- 案例：仿淘宝固定右侧侧边栏"><a href="#scroll- 案例：仿淘宝固定右侧侧边栏" class="headerlink" title="scroll 案例：仿淘宝固定右侧侧边栏"></a>scroll 案例：仿淘宝固定右侧侧边栏</h3><ul><li>实现效果：淘宝右侧有一个导航栏，一旦超过某个位置他就会变成固定定位 (无论页面如何滚动他都固定在那里)</li><li>小知识：<code>window.pageYOffset</code>获取页面被滚动到上面的距离 (左右滚动是 pageXOffset)<ul><li>这个属性有兼容性问题，IE9 以上支持</li></ul></li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sliderbar = <span class="built_in">document</span>.querySelector(<span class="string">'.slider-bar'</span>);</span><br><span class="line"><span class="keyword">var</span> banner = <span class="built_in">document</span>.querySelector(<span class="string">'.banner'</span>);</span><br><span class="line"><span class="comment">// 页面滚动事件</span></span><br><span class="line"><span class="keyword">var</span> bannerTop = banner.offsetTop;</span><br><span class="line"><span class="keyword">var</span> sliderbarTop = sliderbar.offsetTop - bannerTop;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果他滚动到了 banner 这个模块，就变成固定定位，并且更改一下 top 的值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt;= bannerTop) &#123;</span><br><span class="line">        sliderbar.style.position = <span class="string">'fixed'</span>;</span><br><span class="line">        sliderbar.style.top = sliderbarTop + <span class="string">'px'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sliderbar.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">        sliderbar.style.top = <span class="string">'300px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="三个系列的小结"><a href="# 三个系列的小结" class="headerlink" title="三个系列的小结"></a>三个系列的小结</h3><ul><li>这三个系列大小的对比</li></ul><table><thead><tr><th>三个系列大小的对比</th><th>返回值</th></tr></thead><tbody><tr><td>element.offsetWidth</td><td>返回元素 padding，边框，内容的宽度 返回值没有单位</td></tr><tr><td>element.clientWidth</td><td>返回元素 padding，内容的宽度 返回值没有单位</td></tr><tr><td>element.scrollWidth</td><td>返回元素 padding，内容的宽度，假如内容超过边框返回内容实际的宽度</td></tr></tbody></table><ul><li>offset 获取元素位置：offsetLeft</li><li>client 获取元素大小：clientWidth</li><li>scroll 获取滚动距离：scrollTop</li></ul><h2 id="mouseenter- 和 -mouseover- 的区别"><a href="#mouseenter- 和 -mouseover- 的区别" class="headerlink" title="mouseenter 和 mouseover 的区别"></a>mouseenter 和 mouseover 的区别</h2><ul><li><p>mouseover 经过自身盒子会触发，经过子盒子也会触发</p></li><li><p>而 mouseenter 只会经过自身盒子触发</p></li><li><p>产生这两种区别的原因是 mouseenter 不会冒泡</p></li><li><p>同样，mouseleave 在鼠标离开时也不会冒泡</p></li></ul><h2 id="动画函数封装"><a href="# 动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h2><ul><li>动画原理：通过定时器 setInterval() 不断移动盒子位置</li><li>代码示例：有一个有定位的小盒子，一直向右移动</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (div.offsetLeft &gt; <span class="number">800</span>) &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    div.style.left = div.offsetLeft + <span class="number">5</span> + <span class="string">'px'</span>;</span><br><span class="line">&#125;, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><ul><li>中间遇到的问题：<ul><li>div 的 offsetLeft 属性是只读的，所以要用 style 来改变元素 left 值</li></ul></li></ul><h3 id="动画函数的封装"><a href="# 动画函数的封装" class="headerlink" title="动画函数的封装"></a>动画函数的封装</h3><ul><li>写一个函数来封装这个动画</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// obj: 要进行动画的元素 target: 目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj,target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.offsetLeft &gt; target) &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    obj.style.left = obj.offsetLeft + <span class="number">5</span> + <span class="string">'px'</span>;</span><br><span class="line">&#125;, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>上面那个函数的优化：把 timer 作为我们引入元素的一个属性</p><ul><li>这样做的好处：不在用 var 开辟内存空间，通过元素可以找到每一个定时器的 timer</li></ul></li><li><p>这里有一个小 bug ，当我们是点击一个按钮才让盒子走时，当我们不断的点击按钮，盒子移动的速度会越来越快</p><ul><li><p>解决方法：让我们的元素只有一个定时器</p></li><li><p>先清除所有的定时器，保证只有一个定时器执行</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// obj: 要进行动画的元素 target: 目标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj,target</span>) </span>&#123;</span><br><span class="line">  clearInterval(obj.timer);</span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.offsetLeft &gt; target) &#123;</span><br><span class="line">        clearInterval(obj.timer);</span><br><span class="line">    &#125;</span><br><span class="line">    obj.style.left = obj.offsetLeft + <span class="number">5</span> + <span class="string">'px'</span>;</span><br><span class="line">&#125;, <span class="number">30</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="缓动动画原理"><a href="# 缓动动画原理" class="headerlink" title="缓动动画原理"></a>缓动动画原理</h3><ul><li><p>缓动动画：动画是缓慢停下来的</p></li><li><p>原理：每次移动的距离慢慢的变小，使用公式：(目标值 - 现在的位置) / 10</p><ul><li><p>公式里的 10 可以更换为任意值，值越小步长越大</p></li><li><p>代码示例：</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(callback);  callback = function() &#123;&#125;  调用的时候 callback()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 步长值写到定时器的里面</span></span><br><span class="line">        <span class="comment">// 把我们步长值改为整数 不要出现小数的问题</span></span><br><span class="line">        <span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span><br><span class="line">        <span class="keyword">var</span> step = (target - obj.offsetLeft) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">        <span class="keyword">if</span> (obj.offsetLeft == target) &#123;</span><br><span class="line">            <span class="comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            <span class="comment">// 回调函数写到定时器结束里面</span></span><br><span class="line">            <span class="comment">// if (callback) &#123;</span></span><br><span class="line">            <span class="comment">//     // 调用函数</span></span><br><span class="line">            <span class="comment">//     callback();</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            callback &amp;&amp; callback();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把每次加 1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span></span><br><span class="line">        obj.style.left = obj.offsetLeft + step + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里出现了小数精度的问题，盒子停下来时他其实和目标值差零点几</li><li>我们可以把步长取整，而且是向上取整 (为了防止盒子会倒退几个像素) 这样就不会出现差一点的问题</li><li>但是这里又出现了一个小问题：当我们从一个远往近了移动时，发现和目标值差很多<ul><li>这是因为从远往近移动是负值，所以这时候应该向下取整</li><li>下面加一个判断，当移动的距离是正值时向上取整，当移动距离为负时向下取整</li></ul></li></ul><h3 id="动画函数单独封装到 -js- 文件内"><a href="# 动画函数单独封装到 -js- 文件内" class="headerlink" title="动画函数单独封装到 js 文件内"></a>动画函数单独封装到 js 文件内</h3><ul><li>可以把常用的动画封装成一个文件</li><li>使用的时候：<code>&lt;script src=&quot;XXX.js&quot;&gt;&lt;/script&gt;</code>引入</li></ul><h3 id="网页轮播图"><a href="# 网页轮播图" class="headerlink" title="网页轮播图"></a>网页轮播图</h3><ul><li>终于做到了心心念念的网页轮播图了</li></ul><p><img data-src="https://img-blog.csdnimg.cn/20200601185422964.gif#pic_center" alt="在这里插入图片描述"></p><ul><li>一共有五个功能：</li><li>鼠标经过轮播图时，显示左右按钮，离开时隐藏按钮</li><li>点击左右按钮时图片往左或右播放一张</li><li>播放的同时下面的小圆圈也同时变化</li><li>鼠标经过轮播图会暂停播放图片</li></ul><h4 id="显示 - 隐藏左右按钮"><a href="# 显示 - 隐藏左右按钮" class="headerlink" title="显示 / 隐藏左右按钮"></a>显示 / 隐藏左右按钮</h4><ul><li>鼠标经过轮播图的盒子显示这两个按钮，离开时隐藏</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标经过显示左右按钮</span></span><br><span class="line">focus.addEventListener(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    arrow_l.style.display = <span class="string">'block'</span>;</span><br><span class="line">    arrow_r.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;)</span><br><span class="line">focus.addEventListener(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    arrow_l.style.display = <span class="string">'none'</span>;</span><br><span class="line">    arrow_r.style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="动态生成小圆圈"><a href="# 动态生成小圆圈" class="headerlink" title="动态生成小圆圈"></a>动态生成小圆圈</h4><ul><li>根据图片的个数动态生成有多少个小圆圈</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态生成小圆圈</span></span><br><span class="line"><span class="keyword">var</span> ul = focus.querySelector(<span class="string">'ul'</span>);</span><br><span class="line"><span class="keyword">var</span> ol = focus.querySelector(<span class="string">'ol'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ul.children.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 创建 li</span></span><br><span class="line">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">    <span class="comment">// 插入到 ol 里</span></span><br><span class="line">    ol.appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把 ol 的第一个 li 设置为选中状态</span></span><br><span class="line">ol.children[<span class="number">0</span>].className = <span class="string">'current'</span>;</span><br></pre></td></tr></table></figure><h5 id="单击小圆圈让小圆圈处于选中状态"><a href="# 单击小圆圈让小圆圈处于选中状态" class="headerlink" title="单击小圆圈让小圆圈处于选中状态"></a>单击小圆圈让小圆圈处于选中状态</h5><ul><li>给每个小圆圈绑定点击事件，然后把其他所有的 li 去除 current 类，只给点击的这个元素 添加 current</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给每个元素绑定点击事件</span></span><br><span class="line">li.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 把所有 li 去除 current 类名</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;ol.children.length;i++) &#123;</span><br><span class="line">        ol.children[i].className = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把点击的这个留下</span></span><br><span class="line">    <span class="keyword">this</span>.className = <span class="string">'current'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="点击小圆点实现图片滚动"><a href="# 点击小圆点实现图片滚动" class="headerlink" title="点击小圆点实现图片滚动"></a>点击小圆点实现图片滚动</h4><ul><li><p>图片滚动是通过移动 ul 来实现滚动效果</p></li><li><p>我们可以直接使用之前封装好的移动函数，注意引入文件时要写在 index.js 上面，和函数声明是一样的，要先声明在使用</p></li><li><p>滚动图片的方式：点击某个小圆圈，就让图片滚动索引号乘以图片的宽度作为 ul 移动的距离</p><ul><li>通过设置自定义属性来记录当前小圆圈的索引号</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给每个小圆圈记录索引号</span></span><br><span class="line">li.setAttribute(<span class="string">'index'</span>, i);</span><br></pre></td></tr></table></figure><ul><li>这个事件还是在鼠标点击之后完成的，所以还写在 click 事件内</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">li.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 把所有 li 去除 current 类名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ol.children.length; i++) &#123;</span><br><span class="line">    ol.children[i].className = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把点击的这个留下</span></span><br><span class="line"><span class="keyword">this</span>.className = <span class="string">'current'</span>;</span><br><span class="line"><span class="comment">// 点击图片实现图片滑动效果</span></span><br><span class="line"><span class="comment">// 点击某个 li 获取当前的索引号</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="keyword">this</span>.getAttribute(<span class="string">'index'</span>);</span><br><span class="line"><span class="comment">// 移动的距离就是当前索引号乘以图片的宽度</span></span><br><span class="line">animate(ul, -index * focusWidth);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="点击右侧按钮实现图片滚动"><a href="# 点击右侧按钮实现图片滚动" class="headerlink" title="点击右侧按钮实现图片滚动"></a>点击右侧按钮实现图片滚动</h4><ul><li><p>声明一个变量 num 每点击一次，就让这个变量自增，再乘以图片的宽度，就是 ul 的移动距离</p><ul><li>无缝滚动的原理：在所有图片后面再放一个第一张图片，当从最后一张滚动到伪第一张后再迅速无动画的跳回真实的第一张</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击右侧按钮，图片滚动一张</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">arrow_r.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == ul.children.length - <span class="number">1</span>) &#123;</span><br><span class="line">        ul.style.left = <span class="number">0</span>;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">    animate(ul, -num * focusWidth);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>但是使用这种方法就会出现一个 bug，他下面的小圆圈就会多一个</p></li><li><p>而且我们不想每增加一次图片就要在 html 里修改</p></li><li><p>下面是解决方法：</p></li><li><p>克隆 ul 里的第一个 li cloneNode() 里面参数为 true 是深克隆(复制里面的子节点)，false 浅克隆</p></li><li><p>并且添加到 ul 的最后，用 appendChild() 添加</p><ul><li>又因为这个 li 是在自动生成 li 之后添加的，所以不会多出一个圆点</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 克隆第一张图片放到 ul 的最后面</span></span><br><span class="line"><span class="keyword">var</span> first = ul.children[<span class="number">0</span>].cloneNode(<span class="literal">true</span>);</span><br><span class="line">ul.appendChild(first);</span><br></pre></td></tr></table></figure><ul><li>下面的小圆点也跟着上面的一起变化</li><li>在声明一个专门控制小圆点的变量，然后他只要运行到了我们克隆的图片，就让他归零，注意一定要先加加后判断</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">arrow_r.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == ul.children.length - <span class="number">1</span>) &#123;</span><br><span class="line">        ul.style.left = <span class="number">0</span>;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    num++;</span><br><span class="line">    animate(ul, -num * focusWidth);</span><br><span class="line">    circle++;</span><br><span class="line">    <span class="keyword">if</span> (circle == ol.children.length) &#123;</span><br><span class="line">        circle = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ol.children.length; i++) &#123;</span><br><span class="line">        ol.children[i].className = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ol.children[circle].className = <span class="string">'current'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="一点小 bug"><a href="# 一点小 bug" class="headerlink" title="一点小 bug"></a>一点小 bug</h5><ul><li>在我们点击右移按钮在点击底下的小圆点时，就会出现不同步的情况</li><li>我们要让两个模块的变量联系起来，让上面点击完小圆点之后也要告诉下面的右移模块我们现在到哪里了 (小圆点的变量也是一样的，也需要上面告诉他我们移动到了哪里)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index 是指示点击小圆点时位置的变量</span></span><br><span class="line"><span class="comment">// num 和 circle 是指示右移箭头位置的变量和指示小圆点是哪个的变量</span></span><br><span class="line">num = index;</span><br><span class="line">circle = index;</span><br></pre></td></tr></table></figure><h4 id="左侧的按钮实现滚动"><a href="# 左侧的按钮实现滚动" class="headerlink" title="左侧的按钮实现滚动"></a>左侧的按钮实现滚动</h4><ul><li>左侧按钮和右侧按钮的功能差不多</li><li>像镜子一样把 arrow_r 翻转一下就可以了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">arrow_l.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">    num = ul.children.length - <span class="number">1</span>;</span><br><span class="line">    ul.style.left = -num * focusWidth + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">num--;</span><br><span class="line">animate(ul, -num * focusWidth);</span><br><span class="line">circle--;</span><br><span class="line"><span class="keyword">if</span> (circle &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    circle = ol.children.length - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ol.children.length; i++) &#123;</span><br><span class="line">    ol.children[i].className = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line">ol.children[circle].className = <span class="string">'current'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="轮播图的自动播放效果"><a href="# 轮播图的自动播放效果" class="headerlink" title="轮播图的自动播放效果"></a>轮播图的自动播放效果</h4><ul><li>自动播放就相当于点了右侧的按钮</li><li>一个超级强的事件：手动调用点击事件 <code>element.click()</code> 模拟人手点击这个按钮</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    arrow_r.click();</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><ul><li>鼠标一经过时停止定时器也就停止滚动，鼠标一经过就开始定时器</li></ul><h4 id="节流阀"><a href="# 节流阀" class="headerlink" title="节流阀"></a>节流阀</h4><ul><li><p>节流阀：当上一个动画执行完毕时再去执行下一个函数动画</p></li><li><p>在这里我们当一个图片滚动完成后才能接着点击这个按钮</p></li><li><p>我们用回调函数来实现锁住函数和解锁函数</p></li><li><p>具体思路：</p><ul><li>我们在事件外面声明一个变量，当我们运行这个事件后的时候我们把这个变量置为 false，里面有一个判断条件，当变量为 false 时运行不了这个函数</li><li>我们再在动画运行的最后把这个变量重新置为 true 他就不会动画动的过快了</li></ul></li></ul><h3 id="案例：返回顶部动画版"><a href="# 案例：返回顶部动画版" class="headerlink" title="案例：返回顶部动画版"></a>案例：返回顶部动画版</h3><ul><li>窗口滚动到文档中的指定位置：<code>window.scroll(x,y)</code><ul><li>里面的 x 和 y 都是不加单位的</li></ul></li><li>但是这种方法出来的效果是直接回到顶部的，没有动画效果</li></ul><hr><ul><li>这里我们可以直接修改我们的动画函数，把所有 left 修改为 top 就可以了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target, callback</span>) </span>&#123;</span><br><span class="line"><span class="comment">// console.log(callback);  callback = function() &#123;&#125;  调用的时候 callback()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">clearInterval(obj.timer);</span><br><span class="line">obj.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 步长值写到定时器的里面</span></span><br><span class="line">    <span class="comment">// 把我们步长值改为整数 不要出现小数的问题</span></span><br><span class="line">    <span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span><br><span class="line">    <span class="keyword">var</span> step = (target - <span class="built_in">window</span>.pageYOffset) / <span class="number">10</span>;</span><br><span class="line">    step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset == target) &#123;</span><br><span class="line">        <span class="comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">        clearInterval(obj.timer);</span><br><span class="line">        <span class="comment">// 回调函数写到定时器结束里面</span></span><br><span class="line">        <span class="comment">// if (callback) &#123;</span></span><br><span class="line">        <span class="comment">//     // 调用函数</span></span><br><span class="line">        <span class="comment">//     callback();</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        callback &amp;&amp; callback();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把每次加 1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span></span><br><span class="line">    <span class="comment">// obj.style.top = window.pageYOffset + step + 'px';</span></span><br><span class="line">    <span class="built_in">window</span>.scroll(<span class="number">0</span>, <span class="built_in">window</span>.pageYOffset + step);</span><br><span class="line">&#125;, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例：筋斗云"><a href="# 案例：筋斗云" class="headerlink" title="案例：筋斗云"></a>案例：筋斗云</h3><ul><li>实现样式：<ul><li>鼠标经过某个 li 筋斗云移动到当前 li 的位置</li><li>离开这个 li 时，筋斗云复原为原来的位置</li><li>点击了某个 li 筋斗云就会停留在这个 li 的位置</li></ul></li></ul><p><img data-src="https://img-blog.csdnimg.cn/20200601184614761.gif#pic_center" alt="在这里插入图片描述"></p><ul><li><p>具体思路：</p><ul><li><p>通过设置筋斗云的 offsetLeft 值实现筋斗云的移动</p></li><li><p>设置一个全局变量作为筋斗云的偏移量，然后绑定三个事件</p><ul><li>鼠标经过把筋斗云的位置移动到鼠标处</li><li>鼠标离开把上面设置的全局变量设置为筋斗云的偏移量</li><li>鼠标点击改变全局变量为现在的偏移量</li></ul></li><li><p>代码示例：</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取元素</span></span><br><span class="line"><span class="keyword">var</span> cloud = <span class="built_in">document</span>.querySelector(<span class="string">'.cloud'</span>);</span><br><span class="line"><span class="keyword">var</span> c_nav = <span class="built_in">document</span>.querySelector(<span class="string">'.c-nav'</span>);</span><br><span class="line"><span class="keyword">var</span> lis = c_nav.querySelectorAll(<span class="string">'li'</span>);</span><br><span class="line"><span class="comment">// 2. 给所有的小 li 绑定事件</span></span><br><span class="line"><span class="comment">// 这个 current 做为筋斗云的起始位置</span></span><br><span class="line"><span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    <span class="comment">// (1) 鼠标经过把当前小 li 的位置做为目标值</span></span><br><span class="line">    lis[i].addEventListener(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        animate(cloud, <span class="keyword">this</span>.offsetLeft);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// (2) 鼠标离开就回到起始的位置</span></span><br><span class="line">    lis[i].addEventListener(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        animate(cloud, current);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// (3) 当我们鼠标点击，就把当前位置做为目标值</span></span><br><span class="line">    lis[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        current = <span class="keyword">this</span>.offsetLeft;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/106462095" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/106462095</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 之 WebAPI 学习 4</title>
      <link href="/archives/45bca098.html"/>
      <url>/archives/45bca098.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-WebAPI 学习 4"><a href="#JavaScript-WebAPI 学习 4" class="headerlink" title="JavaScript WebAPI 学习 4"></a>JavaScript WebAPI 学习 4</h1><blockquote><p>这篇笔记主要讲了窗口大小事件，两种定时器，this 指向得问题，和刷新，获取 URL 等属性得方法，js 同步和异步 <br> 初学者写下得笔记，如有错误，欢迎前来指正</p></blockquote><a id="more"></a><h2 id="BOM 浏览器对象模型"><a href="#BOM 浏览器对象模型" class="headerlink" title="BOM 浏览器对象模型"></a>BOM 浏览器对象模型</h2><ul><li>BOM：浏览器对象模型，例如刷新，后退等操作</li><li>BOM 兼容性较差</li><li>BOM 顶级对象是 window</li><li>BOM 浏览器窗口进行交互的一些对象</li></ul><h3 id="window- 对象"><a href="#window- 对象" class="headerlink" title="window 对象"></a>window 对象</h3><ul><li>BOM 构成：</li></ul><p><img data-src="JavaScript%E4%B9%8BWebAPI%E5%AD%A6%E4%B9%A04/20200514221759839.png" alt="在这里插入图片描述"></p><ul><li>他是 js 访问浏览器窗口的一个接口</li><li>他是一个全局对象，定义在全局作用域中的变量或者函数都会变成 window 对象的属性和方法 (在调用时可以省略 window)</li><li>alert 也是 window 的方法，完整写法 (window.alert)</li><li>window 下面有一个特殊属性 window.name (所以声明变量时不要用 name 作为变量名，即使他不是关键字)</li></ul><h4 id="window- 对象常用事件"><a href="#window- 对象常用事件" class="headerlink" title="window 对象常用事件"></a>window 对象常用事件</h4><ul><li><p>窗口加载事件：<code>window.onload = function() {}</code> 或者 <code>window.addEventListener(&#39;load&#39;,function() {})</code></p></li><li><p>窗口加载事件是在文档内容完全加载后在调用这个事件</p></li><li><p>使用场景：之前的 script 必须写在网页的最下面，这里我们可以把原来的代码放在这个事件里，我们就可以随心所欲的把 script 标签 移动到任何地方</p></li><li><p>传统的 <code>window.onload</code> 只能写一次，否则后面的会把前面的覆盖掉，所以推荐 <code>window.addEventListener</code> 方式</p></li></ul><hr><ul><li>窗口加载事件：<code>document.addEventListener(&#39;DOMcontentLoaded&#39;,function() {})</code></li><li>DOMcontentLoaded 在 DOM 加载完成触发，不包括样式表(css)，图片，flash 等</li><li>兼容性：IE9 以上支持</li><li>因为不需要等到加载图片等就可以完成，所以速度要比 onnload 快</li></ul><h4 id="调整窗口大小事件"><a href="# 调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h4><ul><li><p>调整窗口大小事件：<code>window.onresize</code> 或者 <code>window.addEventListener(&#39;resize&#39;,function() {})</code></p></li><li><p>当窗口大小发生改变时就触发这个事件</p></li><li><p>应用于响应式布局</p></li><li><p><code>window.innerWidth</code> 获取当前屏幕宽度，和上面来一起使用，应用于响应式布局</p></li></ul><h4 id="定时器"><a href="# 定时器" class="headerlink" title="定时器"></a>定时器</h4><ul><li>定时器分为两种 <code>setTimeout()</code> 和 <code>setInterval()</code></li></ul><h5 id="定时器之 -setTimeout"><a href="# 定时器之 -setTimeout" class="headerlink" title="定时器之 setTimeout()"></a>定时器之 setTimeout()</h5><ul><li>使用格式：<code>window.setTimeout(调用函数, [延迟的毫秒数])</code></li><li>在延迟毫秒数之后调用函数</li><li>window 在使用时可以省略</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2 秒钟后调用前面的 function 函数</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="comment">// 还有一种写法 (不提倡)</span></span><br><span class="line">setTimeout(<span class="string">'函数名()'</span>, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><ul><li>一个页面上可能有多个不同的定时器，为了区分他们，我们给定时器加标志符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在就有两个不同的定时器</span></span><br><span class="line"><span class="keyword">var</span> timer1 = setTimeout(callback, <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">var</span> timer2 = setTimeout(callback, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><h6 id="回调函数"><a href="# 回调函数" class="headerlink" title="回调函数"></a>回调函数</h6><ul><li>正常函数都是根据代码顺序进行的，回调函数是运行到某个地方，回头调用这个函数</li><li>例如计时器里的函数，或者注册事件里的函数都是回调函数</li></ul><h6 id="案例：自动关闭的广告"><a href="# 案例：自动关闭的广告" class="headerlink" title="案例：自动关闭的广告"></a>案例：自动关闭的广告</h6><ul><li>打开页面显示一个广告，5 秒后自动关闭广告</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.Ad</span> &#123;</span></span><br><span class="line">    height: 200px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 200px;</span><br><span class="line">    font-size: 25px;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Ad"</span>&gt;</span>我是广告！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Ad = <span class="built_in">document</span>.querySelector(<span class="string">'.Ad'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">disable</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        Ad.style.display = <span class="string">'none'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(disable, 5000);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="停止定时器 -clserTimeout"><a href="# 停止定时器 -clserTimeout" class="headerlink" title="停止定时器 (clserTimeout)"></a>停止定时器 (clserTimeout)</h6><ul><li>把这个定时器停止掉</li><li>使用方法：<code>window.clearTimeout(timeoutID)</code></li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1024</span>);</span><br><span class="line">clearTimeout(timer);</span><br></pre></td></tr></table></figure><h5 id="定时器之 -setInterval"><a href="# 定时器之 -setInterval" class="headerlink" title="定时器之 setInterval()"></a>定时器之 setInterval()</h5><ul><li><p>使用格式：<code>window.setInterval(回调函数,[间隔毫秒数])</code></p></li><li><p>setInterval 是每隔这个时间就调用一次回调函数</p></li><li><p>和上面的函数的基本操作是一样的</p><ul><li>代码示例：</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'每隔一秒我输出一次'</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h6 id="定时器案例：倒计时"><a href="# 定时器案例：倒计时" class="headerlink" title="定时器案例：倒计时"></a>定时器案例：倒计时</h6><ul><li>实现一个类似于京东倒计时秒杀的效果</li><li>大概思路就是有一个函数计算当前时间和我们倒计时时间的差的函数，然后每隔 1 秒就进行一次刷新，就会出现倒计时的效果</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  ul li &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    height: 50px;</span><br><span class="line">    width: 50px;</span><br><span class="line">    background-color: black;</span><br><span class="line">    float: left;</span><br><span class="line">    margin-left: 20px;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    color: aliceblue;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 50px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-5-9 18:00:00'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 之前调用一次，防止第一次刷新页面有空白</span></span></span><br><span class="line">    countDown();</span><br><span class="line">    setInterval(countDown, 1000);</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times 是剩余时间总的秒数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">// 时</span></span></span><br><span class="line"><span class="actionscript">      h = h &lt; <span class="number">10</span> ? <span class="string">'0'</span> + h : h;</span></span><br><span class="line"><span class="actionscript">      lis[<span class="number">0</span>].innerHTML = h; <span class="comment">// 把剩余的小时给 小时黑色盒子</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span></span><br><span class="line"><span class="actionscript">      m = m &lt; <span class="number">10</span> ? <span class="string">'0'</span> + m : m;</span></span><br><span class="line">      lis[1].innerHTML = m;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span></span><br><span class="line"><span class="actionscript">      s = s &lt; <span class="number">10</span> ? <span class="string">'0'</span> + s : s;</span></span><br><span class="line">      lis[2].innerHTML = s;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="停止定时器：clearInterval"><a href="# 停止定时器：clearInterval" class="headerlink" title="停止定时器：clearInterval"></a>停止定时器：clearInterval</h6><ul><li>使用方法：<code>window.clearInterval(intervalID)</code></li><li>intervalID 是定时器的名字</li><li>注意变量作用域的问题，想要提升变量的作用域，可以定义一个同名全局变量并赋初值为 null</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="number">1024</span>);</span><br><span class="line">clearInterval(timer);</span><br></pre></td></tr></table></figure><h5 id="发送验证码后倒计时效果"><a href="# 发送验证码后倒计时效果" class="headerlink" title="发送验证码后倒计时效果"></a>发送验证码后倒计时效果</h5><ul><li>点击按钮后禁用 disable 为 true</li><li>上面只要有一个按钮就可以</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 倒计时 5 秒</span></span><br><span class="line"><span class="keyword">var</span> time = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  btn.disabled = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    time--;</span><br><span class="line">    btn.innerHTML = <span class="string">'还剩'</span> + time + <span class="string">'秒后重试'</span>;</span><br><span class="line">    <span class="comment">// 时间为 0 后，清除定时器，复原按钮</span></span><br><span class="line">    <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span><br><span class="line">      clearInterval(timer);</span><br><span class="line">      btn.innerHTML = <span class="string">'发送验证码'</span>;</span><br><span class="line">      btn.disabled = <span class="literal">false</span>;</span><br><span class="line">      time = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="this 指向问题"><a href="#this 指向问题" class="headerlink" title="this 指向问题"></a>this 指向问题</h3><ul><li>this 指向调用它的对象</li><li>全局作用下 this 指向全局对象 window (定时器里的 this 也指向 window)</li><li>方法中谁调用这个函数 this 指向谁</li><li>例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    sayhi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.sayhi();</span><br></pre></td></tr></table></figure><ul><li>这里的 this 指向 o</li></ul><hr><ul><li>构造函数里的 this 指向实例化的对象 fun</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> Fun();</span><br></pre></td></tr></table></figure><h3 id="JS 同步和异步"><a href="#JS 同步和异步" class="headerlink" title="JS 同步和异步"></a>JS 同步和异步</h3><ul><li><p>JS 是单线程语言，为了防止一个线程占用系统资源过多，系统允许 JS 创建多个线程，JS 里就出现了同步和异步</p></li><li><p>同步：上一个任务结束后才能执行下一个任务</p></li><li><p>异步：可以同时进行多个任务</p><ul><li>异步实例：</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 输出：1 3 2</span></span><br></pre></td></tr></table></figure><ul><li>正常同步的话应该输出 1 2 3</li><li>但是异步的话输出的就是 1 3 2，因为 2 所需要的时间长，所以 JS 会先执行 log(3)</li></ul><h4 id="同步异步执行过程"><a href="# 同步异步执行过程" class="headerlink" title="同步异步执行过程"></a>同步异步执行过程</h4><ul><li><p>js 把所有任务分成 同步任务和异步任务</p></li><li><p>同步任务放在主线程上执行栈里执行</p></li><li><p>异步任务是通过回调函数实现的</p></li><li><p>异步任务包括：</p><ul><li>普通事件：click，resize 等</li><li>资源加载：load，error 等</li><li>定时器：setInterval，setTimeout</li></ul></li></ul><h5 id="JS 执行机制"><a href="#JS 执行机制" class="headerlink" title="JS 执行机制"></a>JS 执行机制</h5><ul><li><p>先执行同步任务，碰到回调函数把函数放到任务队列里，然后主线程执行完后再去执行任务队列</p></li><li><p>多个异步任务时，会有一个叫异步进程处理的东西来处理事件</p><ul><li>比如一个 onclick 事件，异步进程处理就会等待鼠标点击，鼠标点击后再把函数放入任务队列，然后执行这个函数</li><li>例如一个计时器(setTimeout)，异步进程处理就会等待几秒后然后再把函数放入任务队列中</li></ul></li><li><p>事件循环：主线程不断向任务队列中放入事件，执行事件的情况</p></li></ul><h3 id="location- 对象"><a href="#location- 对象" class="headerlink" title="location 对象"></a>location 对象</h3><ul><li><p>location 对象用于获取或者设置窗体的 URL</p></li><li><p>返回的是一个对象</p></li><li><p>URL 语法格式：<br><img data-src="JavaScript%E4%B9%8BWebAPI%E5%AD%A6%E4%B9%A04/20200514222006253.png" alt="- == 这里有张图 =="></p></li><li><p>location 对象的属性：</p></li></ul><table><thead><tr><th>location 对象的属性</th><th>返回值</th></tr></thead><tbody><tr><td>location.herf</td><td>获取或者设置整个 URL</td></tr><tr><td>location.host</td><td>返回主机域名</td></tr><tr><td>location.port</td><td>返回端口号，若没有则返回空字符串</td></tr><tr><td>location.pathname</td><td>返回路径</td></tr><tr><td>location.search</td><td>返回参数 <strong>重要</strong></td></tr><tr><td>location.hash</td><td>返回片段 (# 后面的内容) 常见于链接 锚点</td></tr></tbody></table><h4 id="location 对象实例：5 秒后跳转页面"><a href="#location 对象实例：5 秒后跳转页面" class="headerlink" title="location 对象实例：5 秒后跳转页面"></a>location 对象实例：5 秒后跳转页面</h4><ul><li>点击按钮跳转到百度的页面</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = <span class="number">5</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  div.innerHTML = <span class="string">'您将在'</span> + timer + <span class="string">'跳转'</span>;</span><br><span class="line">  timer--;</span><br><span class="line">  <span class="keyword">if</span>(timer==<span class="number">0</span>) location.herf = <span class="string">'https://www.baidu.com'</span>;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h4 id="location 对象实例：不同页面之间传递参数"><a href="#location 对象实例：不同页面之间传递参数" class="headerlink" title="location 对象实例：不同页面之间传递参数"></a>location 对象实例：不同页面之间传递参数</h4><ul><li><p>使用 URL 里面的 location.search 参数来传递表单参数</p><ul><li>第一个页面：登陆页面 login.html</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"index.html"</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第二个页面：index.html</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(location.search);</span><br><span class="line"><span class="comment">// 获取的值是带问号的参数，下面需要剪切字符串</span></span><br><span class="line"><span class="comment">// substr('起始的位置', 截取几个字符) 第二个参数没有的话默认截到末尾</span></span><br><span class="line"><span class="keyword">var</span> str = location.search.substr(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 下面利用等号 = 分割为数组</span></span><br><span class="line"><span class="comment">// split('=')</span></span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">'='</span>);</span><br><span class="line">alert(<span class="string">'欢迎'</span> + arr[<span class="number">1</span>] + <span class="string">'登录'</span>);</span><br></pre></td></tr></table></figure><h4 id="location 对象常见方法"><a href="#location 对象常见方法" class="headerlink" title="location 对象常见方法"></a>location 对象常见方法</h4><table><thead><tr><th>location 对象的方法</th><th>返回值</th></tr></thead><tbody><tr><td>location.assign()</td><td>和 herf 一样可以跳转页面 (可以后退)</td></tr><tr><td>location.replace()</td><td>替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td>location.reload()</td><td>重新加载页面相当于刷新按钮，如果参数为 true 则强制刷新 (ctrl+F5)</td></tr></tbody></table><h3 id="navigator- 对象"><a href="#navigator- 对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h3><ul><li>获取浏览器信息</li><li>主要是里面的 userAgent 属性，可以看到浏览器得情况</li><li>可以通过里面的信息来判断应该打开电脑端页面还是手机端页面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="regexp">/Android|webOS|iPhone|iPod|BlackBerry/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">"https://www.baidu.com/"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">"http://news.baidu.com/"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="history- 对象"><a href="#history- 对象" class="headerlink" title="history 对象"></a>history 对象</h3><table><thead><tr><th>history 对象</th><th>返回值</th></tr></thead><tbody><tr><td>history.back()</td><td>实现后退功能</td></tr><tr><td>history.forward()</td><td>前进功能</td></tr><tr><td>history.go(参数)</td><td>前进后退功能，参数为 1 前进一个页面，参数为 -1 后退一个页面</td></tr></tbody></table><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/106130017" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/106130017</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 之 WebAPI 学习 3</title>
      <link href="/archives/dbd8353b.html"/>
      <url>/archives/dbd8353b.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-WebAPI 学习 3"><a href="#JavaScript-WebAPI 学习 3" class="headerlink" title="JavaScript WebAPI 学习 3"></a>JavaScript WebAPI 学习 3</h1><a id="more"></a><h2 id="事件高级"><a href="# 事件高级" class="headerlink" title="事件高级"></a>事件高级 </h2><h3 id="注册事件"><a href="# 注册事件" class="headerlink" title="注册事件"></a> 注册事件</h3><ul><li>注册事件分为两种方式：传统注册方式和监听注册方式</li></ul><h4 id="传统注册事件"><a href="# 传统注册事件" class="headerlink" title="传统注册事件"></a>传统注册事件</h4><ul><li>特点：注册事件唯一性 (同一个元素同一个事件只能设置一个处理函数，后注册的函数回把先注册的给覆盖掉)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>传统注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySeleter(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'传统注册事件'</span>)；</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我会把前面覆盖掉'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方法监听注册方式 -addEventListener"><a href="# 方法监听注册方式 -addEventListener" class="headerlink" title="方法监听注册方式 (addEventListener)"></a>方法监听注册方式 (addEventListener)</h4><ul><li><p>监听注册：<code>eventTarget.addEventListener(type,listener,[useCapture])</code></p><ul><li>eventTarget：目标对象</li><li>type：事件处理函数，例如 click，mouseover，这里不需要带 on</li><li>listener：事件处理函数，事件发生时会调用监听函数</li><li>useCapture：可选参数，默认为 false (这个参数下面 DOM 参数流会讲)</li></ul></li><li><p>有兼容性问题：IE9 之前不支持，可以使用 <code>attachEvent()</code> 代替</p></li><li><p>同一个元素同一个事件可以注册多个监听器</p><ul><li>使用实例：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>传统注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySeleter(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript">    btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'方法监听注册'</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="兼容注册方式 -attachEvent"><a href="# 兼容注册方式 -attachEvent" class="headerlink" title="兼容注册方式 (attachEvent)"></a> 兼容注册方式(attachEvent)</h4><ul><li><p>这种方法是非标准的，不推荐使用</p></li><li><p>注册事件：<code>eventTarget.attachEvent(eventNameWithOn, callback)</code></p><ul><li><p>eventNameWithOn：事件类型字符串，如 onclick，这里要带 on</p></li><li><p>callback：事件处理函数，当目标触发事件时回调函数被调用</p></li><li><p>代码示例：</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>传统注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySeleter(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript">    btn.attachEvent(<span class="string">'onclick'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'只有 ie9 才能支持这种方法'</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>只有 ie9 以下才支持，其他浏览器都会报错</li></ul><h3 id="删除事件 - 解绑事件"><a href="# 删除事件 - 解绑事件" class="headerlink" title="删除事件 (解绑事件)"></a> 删除事件(解绑事件)</h3><ul><li><p>传统删除方式：<code>eventTarget.onclick = null</code></p></li><li><p>方法监听删除方式：<code>eventTarget.removeEventListener(type,listener,[useCapture])</code></p><ul><li>删除事件的时候不能使用匿名函数，函数必须有名字才可以删除</li></ul></li><li><p>与 ie9 以前的浏览器兼容的删除方式：<code>eventTarget.detachEvent(eventNameWithOn,callback)</code></p><ul><li><p>同样，只有 IE9 之前能运行</p></li><li><p>代码示例：</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySeletorAll(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 传统删除方法</span></span></span><br><span class="line"><span class="actionscript">    divs[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'传统方法删除事件'</span>);</span></span><br><span class="line"><span class="actionscript">        divs[<span class="number">0</span>].onclick = <span class="literal">null</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 方法监听删除方式</span></span></span><br><span class="line"><span class="actionscript">    divs[<span class="number">1</span>].addEventListener(<span class="string">'click'</span>,fn)</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'方法监听删除事件'</span>);</span></span><br><span class="line"><span class="actionscript">        div[<span class="number">1</span>].removeEventListener(<span class="string">'click'</span>,fn);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 与 ie9 以前的浏览器兼容的删除方式</span></span></span><br><span class="line"><span class="actionscript">    div[<span class="number">2</span>].attachEvent(<span class="string">'onclick'</span>,fn1);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'与 ie9 以前的浏览器兼容的删除方式'</span>);</span></span><br><span class="line"><span class="actionscript">        div[<span class="number">2</span>].detachEvent(<span class="string">'onclick'</span>,fn1);</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOM 事件流"><a href="#DOM 事件流" class="headerlink" title="DOM 事件流"></a>DOM 事件流</h2><ul><li>事件传播的过程叫做 DOM 事件流</li></ul><p><img data-src="JavaScript%E4%B9%8BWebAPI%E5%AD%A6%E4%B9%A03/20200505225708861.png" alt="事件流"></p><ul><li><p>从 document -&gt; html -&gt; body -&gt; ···</p></li><li><p>DOM 事件流分为三个阶段：</p><ol><li>捕获阶段 (一层一层去找绑定事件的元素)</li><li>当前目标阶段 (找到了！)</li><li>冒泡阶段 (一层一层去冒泡去返回到 document)</li></ol></li><li><p>个人感觉可以把网页想象成一层一层的状态，document 在最外层，div 等元素在最里层，当我们点击鼠标后，他会一层一层向下寻找，直到找到绑定点击事件的元素</p></li></ul><blockquote><p>事件冒泡是 IE 提出的！IE 队 + 1 分 <br> 事件捕获是网景提出的，网景是一家美国的浏览器公司</p></blockquote><h3 id="DOM 事件流示例"><a href="#DOM 事件流示例" class="headerlink" title="DOM 事件流示例"></a>DOM 事件流示例</h3><ul><li>js 代码中只能执行捕获或者冒泡其中的一个阶段</li><li>onclick 和 attachEvent 只能得到冒泡阶段</li><li>addEventListener 既能获得捕获也能获得冒泡阶段<ul><li>第三个参数是 true 时则事件处于捕获阶段时调用程序</li><li>第三个参数为 false 时则事件处于冒泡阶段时调用程序</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>son 盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">///// 捕获阶段调用 /////</span></span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 假如父亲和儿子都有一个 onclick 事件，捕获阶段调用程序时，先捕获到父亲，后捕获到儿子</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">'.son'</span>);</span></span><br><span class="line"><span class="actionscript">    son.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'儿子捕获阶段'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">'.father'</span>);</span></span><br><span class="line"><span class="actionscript">    father.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      alert(<span class="string">'父亲捕获阶段'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 输出：</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 父亲捕获阶段</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 儿子捕获阶段</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">///// 冒泡阶段调用 /////</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 这时和捕获阶段正好相反，冒泡是先从儿子这里冒泡，然后再到父亲冒泡</span></span></span><br><span class="line"><span class="actionscript">    son.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'儿子冒泡阶段'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">    father.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      alert(<span class="string">'父亲冒泡阶段'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 输出：</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 儿子冒泡阶段</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 父亲冒泡阶段</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>有些事件不会冒泡，例如：<code>onblur, onfocus, onmouseenter, onmouseleave</code></li></ul><h3 id="事件对象"><a href="# 事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>上面代码里的 event 就是事件对象 (感觉像形参)</p></li><li><p>事件对象有了事件才会存在 (例如 onclick 等)，他是系统自动创建的，不需要我们传递参数</p></li><li><p>事件对象是事件相关数据的集合，例如鼠标点击就包含鼠标的相关信息，如果是键盘事件就包含键盘的信息</p></li><li><p>event 不是关键字，可以起任意的名字</p></li><li><p>同样有兼容性问题：IE9 以下不支持</p><ul><li>IE9 通过 <code>window.event</code> 来调用事件对象 (必须一模一样)</li><li>解决兼容性问题：<code>event = event || window.event</code></li></ul></li></ul><h4 id="事件对象常见的属性和方法"><a href="# 事件对象常见的属性和方法" class="headerlink" title="事件对象常见的属性和方法"></a>事件对象常见的属性和方法</h4><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>e.target</td><td>返回触发事件的对象</td></tr><tr><td>e.type</td><td>返回事件类型，不带 on</td></tr><tr><td>e.stopPropagation()</td><td>阻止冒泡</td></tr><tr><td>e.preventDefault()</td><td>阻止默认事件，例如不让链接跳转</td></tr><tr><td>e.srcElement</td><td>返回触发事件的对象 (IE6-8 使用)</td></tr><tr><td>e.cancelBubble</td><td>阻止冒泡 (IE6-8 使用)</td></tr><tr><td>e.returnValue</td><td>阻止默认事件，例如不让链接跳转 (IE6-8 使用)</td></tr></tbody></table><h5 id="this- 和 -e-target- 的区别"><a href="#this- 和 -e-target- 的区别" class="headerlink" title="this 和 e.target 的区别"></a>this 和 e.target 的区别</h5><ul><li><p>e.target 返回的是触发事件的对象，this 返回的是绑定事件的对象</p></li><li><p>下面的例子能更帮助理解</p><ul><li>这里我们给 ul 绑定点击事件，但是我们点击的是 li ，this 输出的是绑定事件的元素，所以他还是会输出 ul ，但是 e.target 返回的是触发事件的元素，所以他会返回的是 li</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySeletor(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript">    ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 这里 this 指向 ul</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 我们如果点击的是 li， target 返回的是 li</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(e.target);</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>与 this 有一个相似的属性 <code>currentTarget</code> (同样有兼容性问题，所以用的较少)</li></ul><h5 id="阻止默认行为"><a href="# 阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h5><ul><li>可以让链接不在跳转，或者阻止表单提交</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> a = <span class="built_in">document</span>.querySeletor(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="actionscript">    a.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 例如让链接不跳转</span></span></span><br><span class="line">      e.preventDefault();</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    a.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// return false 也能阻止默认行为，并且没有兼容性问题 但是 return 后面的代码不执行 并且这种方法仅限于传统注册方式</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="阻止事件冒泡"><a href="# 阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h5><ul><li><code>stopPropagation()</code>方法阻止事件冒泡</li><li>接着沿用上面的一个实例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>son 盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    son.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'儿子冒泡阶段'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 有下面一句代码以后点击事件就不在向上传播了，也就是只输出 儿子冒泡阶段 一句话</span></span></span><br><span class="line">        e.stopPropagation();</span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript">    father.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      alert(<span class="string">'父亲冒泡阶段'</span>);</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">false</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="事件委托"><a href="# 事件委托" class="headerlink" title="事件委托"></a>事件委托</h5><ul><li><p>使用场景：假如很多个 li 都需要绑定一个点击事件，这时注册事件所花费的时间就很多</p></li><li><p>事件委托的原理：假如很多子节点都需要绑定同一个事件，我们可以把这个事件绑定在父节点上，然后我们利用冒泡影响每一个子节点</p><ul><li>代码示例：我们要给一堆 li 绑定点击事件，我们可以把事件绑定在父元素 ul 上，根据冒泡原理，我们点击 li 会向父元素冒泡，也就触发了点击事件</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 点击 li 让那个 li 变色</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript">    ul.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      e.target.style.backgroundColor = <span class="string">'pink'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="一些小知识"><a href="# 一些小知识" class="headerlink" title="一些小知识"></a>一些小知识</h5><ul><li><p>小知识：禁止鼠标右键菜单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'contextmenu'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>小知识：禁止选中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// selectstart 开始选中</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'selectstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="鼠标事件对象"><a href="# 鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h4><ul><li>鼠标事件对象 <code>MouseEvent</code></li></ul><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX(e.clientY)</td><td>返回鼠标相对于浏览器窗口可视区域的 X / Y 坐标</td></tr><tr><td>e.pageX(e.pageY)</td><td>返回鼠标相对于文档页面的 X / Y 坐标 (有兼容性问题)</td></tr><tr><td>e.screenX(e.screenY)</td><td>返回鼠标相对于电脑屏幕的 X / Y 坐标</td></tr></tbody></table><ul><li>e.clientX：无论页面滚动到那里，都是相对于页面可视区域的左上角的坐标</li><li>相对的 e.pageX 获取的就是整个网页的坐标</li></ul><h5 id="鼠标事件对象实例：跟随鼠标的天使"><a href="# 鼠标事件对象实例：跟随鼠标的天使" class="headerlink" title="鼠标事件对象实例：跟随鼠标的天使"></a>鼠标事件对象实例：跟随鼠标的天使</h5><ul><li><p>鼠标移动事件：<code>mousemove</code></p></li><li><p>给 document 注册事件</p></li><li><p>gif 图要使用绝对定位，不能占用位置</p></li><li><p>当使用绝对定位时千万不要忘了单位</p><ul><li>代码示例：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    img &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/angel.gif"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 千万不能忘了单位</span></span></span><br><span class="line"><span class="actionscript">      img.style.top = e.pageY + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">      img.style.left = e.pageX + <span class="string">'px'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>商城里的商品放大图就是用的这个原理</li></ul><h4 id="常用键盘事件"><a href="# 常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h4><table><thead><tr><th>键盘事件</th><th>说明</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键按下时触发</td></tr><tr><td>onkeypress</td><td>某个按键按下时触发 (但是他不能识别功能键，例如 ctrl shift 回退等)</td></tr></tbody></table><ul><li>按下触发是按下时一直触发</li><li>执行顺序：down &gt; press</li><li>注意：回退键也是功能键</li></ul><h4 id="键盘事件对象"><a href="# 键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h4><ul><li><p>获取按下的是哪个键：key (兼容性较差)，keycode 返回按键的 ASSII 码值</p></li><li><p>注意：keyup 和 keydown 不区分字母大小写</p><ul><li>keypress 区分字母大小写</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.keyCode);</span><br><span class="line">  <span class="comment">// 输出 97</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keypress'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.keyCode);</span><br><span class="line">  <span class="comment">// 输出 65</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>注意：keydown 和 keypress 是在文本框还没有输入的时候触发</li></ul><h5 id="键盘事件示例：按键输入案例"><a href="# 键盘事件示例：按键输入案例" class="headerlink" title="键盘事件示例：按键输入案例"></a>键盘事件示例：按键输入案例</h5><ul><li>用户输入时自动把光标定位到文本框中</li><li>聚焦文本框：使用 js 里面的 <code>focus()</code> 方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            search.focus();</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="模拟京东快递单号查询案例"><a href="# 模拟京东快递单号查询案例" class="headerlink" title="模拟京东快递单号查询案例"></a>模拟京东快递单号查询案例</h5><ul><li>当我们输入快递单号时，上面会出现一个框里面的字会更大方便观看，获得焦点时出现盒子，失去焦点隐藏盒子</li><li>注意不要命名不要命名为保留字 (尤其是 top)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.con</span> &#123;</span></span><br><span class="line">    height: 25px;</span><br><span class="line">    width: 100px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 25px;</span><br><span class="line">    font-size: 22px;</span><br><span class="line">    background-color: rgb(163, 79, 79);</span><br><span class="line">    display: none;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的快递单号"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"con"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> con = <span class="built_in">document</span>.querySelector(<span class="string">'.con'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'.search'</span>).querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="actionscript">    text.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 如果内容为空，则隐藏</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.value == <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        con.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">        con.style.display = <span class="string">'block'</span>;</span></span><br><span class="line"><span class="actionscript">        con.innerText = <span class="keyword">this</span>.value;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="comment">// 失去焦点隐藏</span></span></span><br><span class="line"><span class="actionscript">    text.addEventListener(<span class="string">'blur'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      con.style.display = <span class="string">'none'</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="actionscript">    <span class="comment">// 获得焦点出现</span></span></span><br><span class="line"><span class="actionscript">    text.addEventListener(<span class="string">'focus'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 防止没有焦点时也出现</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.value !== <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript">          con.style.display = <span class="string">'block'</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>这时如果把 keyup 改成 keydown 或者 keypress 可以吗？</p></li><li><p>我们尝试修改一下，结果发现 keydown 和 keypress 每次都和文本框里的数字差一位</p></li><li><p>这是因为 keydown 和 keypress 在事件触发时，文字还没有落入文本框中</p></li><li><p>也就是按下键盘后立即执行了一次事件，事件运行结束后才把文字落入文本框中</p></li><li><p>keyup 正好相反，是先让文字落入，后执行事件，所以这里选用 keyup</p></li></ul><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/105940974" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/105940974</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 之 WebAPI 学习 1</title>
      <link href="/archives/35d65417.html"/>
      <url>/archives/35d65417.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-WebAPI 学习 1"><a href="#JavaScript-WebAPI 学习 1" class="headerlink" title="JavaScript WebAPI 学习 1"></a>JavaScript WebAPI 学习 1</h1><blockquote><p>这篇笔记主要讲了获取元素方法，事件，修改操作元素内容 / 链接 / 表单属性 / 元素 CSS 样式 <br> 初学者写下的笔记，如有错误，欢迎前来指正！</p></blockquote><a id="more"></a><h2 id="API- 与 -WebAPI"><a href="#API- 与 -WebAPI" class="headerlink" title="API 与 WebAPI"></a>API 与 WebAPI</h2><ul><li>API：应用程序编程接口 (实现某种功能的接口)</li><li>WebAPI：操作浏览器功能的接口 (BOM，DOM)</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul><li>DOM 是一种接口</li><li>DOM 把以下这些都看作对象：<ul><li>文档(document)：整个页面</li><li>元素(element)：标签</li><li>节点(node)：标签，属性，文本，注释</li></ul></li></ul><h3 id="获取元素"><a href="# 获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><ul><li>注意：id 选择器只能选择第一个符合条件的，而类名选择器和标签名选择器都是选择所有复合条件的</li></ul><h4 id="根据 ID 获取"><a href="# 根据 ID 获取" class="headerlink" title="根据 ID 获取"></a>根据 ID 获取</h4><ul><li>方法名：getElementById()</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"time"</span>&gt;</span>2020 / 03 / 13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> timer = <span class="built_in">document</span>.getElementById(<span class="string">'time'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 文档下搜索指定 id，函数参数是字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(timer);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 输出整个 div 标签</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 输出 object</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.dir(timer);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 打印元素对象，能看到里面的属性和方法</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：id 大小写敏感并且是字符串，返回一个 DOM 对象，找不到返回 null</li><li>文档页面从上往下加载所以先声明标签，后执行 js</li><li>console.dir 输出对象的属性和方法</li></ul><h4 id="根据标签名获取"><a href="# 根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h4><ul><li>选择方法：getElementsByTagName()</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 输出 1</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 想要获取 ol 标签下的 li</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ol = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ol'</span>);</span></span><br><span class="line"><span class="actionscript">        ol[<span class="number">0</span>].getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>同样方法里面放的是字符串</li><li>返回一个伪数组 (对象的集合)<ul><li>即使只剩一个元素返回的也是伪数组形式</li><li>没有这个元素时返回的是空的伪数组</li></ul></li></ul><h4 id="通过类名获取元素 -H5 新特性"><a href="# 通过类名获取元素 -H5 新特性" class="headerlink" title="通过类名获取元素 (H5 新特性)"></a>通过类名获取元素 (H5 新特性)</h4><ul><li>方法名：getElementsByClassName();</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> boxs = documents.getElementsByClassName(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(boxs);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>获取的是所有符合条件的类名 (但是也没有人给一大堆标签起相同的类名吧)</li></ul><h4 id="querySelector 选择器 -H5 新特性"><a href="#querySelector 选择器 -H5 新特性" class="headerlink" title="querySelector 选择器 (H5 新特性)"></a>querySelector 选择器 (H5 新特性)</h4><ul><li>方法名：querySelector();</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boxs"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 类选择器</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> firstBox = <span class="built_in">document</span>.querySelector(<span class="string">'.boxs'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// id 选择器</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> idBox = <span class="built_in">document</span>.querySelector(<span class="string">'#test'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 选择标签</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> li = <span class="built_in">document</span>.querySelector(<span class="string">'li'</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：只能选择第一个元素对象</li></ul><h4 id="querySelectorAll- 选择器 -H5 新特性"><a href="#querySelectorAll- 选择器 -H5 新特性" class="headerlink" title="querySelectorAll 选择器 (H5 新特性)"></a>querySelectorAll 选择器 (H5 新特性)</h4><ul><li>可以选择所有复合条件的标签</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 选择所有的 box 属性的标签</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> allBox = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.box'</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>返回的仍然是伪数组</li></ul><h4 id="获取 html 和 body 标签"><a href="# 获取 html 和 body 标签" class="headerlink" title="获取 html 和 body 标签"></a>获取 html 和 body 标签</h4><ul><li>获取 body 元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body;</span><br><span class="line"><span class="comment">// 返回 body 元素对象</span></span><br></pre></td></tr></table></figure><ul><li>获取 html 元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="comment">// 返回 html 元素对象</span></span><br></pre></td></tr></table></figure><h3 id="事件基础"><a href="# 事件基础" class="headerlink" title="事件基础"></a>事件基础</h3><ul><li><p>事件是 JavaScript 能侦测到的行为，并作出响应机制</p></li><li><p>事件由三部分组成：事件源，事件类型，事件处理程序</p><ul><li><p>事件源：触发事件的对象</p></li><li><p>事件类型：如何触发事件 (鼠标点击，鼠标经过)</p></li><li><p>事件处理程序：通过函数赋值的操作完成</p></li><li><p>代码示例：</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 事件源</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 事件类型 (绑定事件)</span></span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 事件处理程序</span></span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'test'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>事件处理三部曲：</p><ul><li>1. 获取元素</li><li>2. 注册事件</li><li>3. 程序处理</li></ul></li><li><p>鼠标事件：</p></li></ul><table><thead><tr><th>鼠标事件</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>左键单击触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得焦点触发</td></tr><tr><td>onblur</td><td>失去焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标抬起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr></tbody></table><h3 id="操作元素属性"><a href="# 操作元素属性" class="headerlink" title="操作元素属性"></a>操作元素属性</h3><ul><li>包括更改元素内容，修改元素路径</li></ul><h4 id="修改元素内容"><a href="# 修改元素内容" class="headerlink" title="修改元素内容"></a>修改元素内容</h4><ul><li>修改元素内容两种方法：<ul><li>.innerText 和 .innerHTML (推荐使用.innerHTML)</li></ul></li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 点击 button 按钮，div 变成当前时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>当前时间 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> 当前时间<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            div.innerText = <span class="string">'2020/3/15'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 元素可以不用添加事件，直接显示在网页上</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="actionscript">        p.innerText = <span class="string">'2020/3/15'</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>这两个属性是可读写的，可以获取元素里面的内容</p></li><li><p>innerText 和 innerHTML 的区别</p><ul><li>innerText 不识别 HTML 标签，但 innerHTML 可以识别</li><li>innerText 在读取时会去除空格和换行</li></ul></li></ul><h4 id="修改 herf 和 src"><a href="# 修改 herf 和 src" class="headerlink" title="修改 herf 和 src"></a>修改 herf 和 src</h4><ul><li>可以修改链接的地址或者图片的地址</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实现点击按钮更改图片的效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> button1 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="actionscript">        button1[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            img.src = <span class="string">''</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        button1[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            img.src = <span class="string">''</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="修改内容实例：不同时间的问候语"><a href="# 修改内容实例：不同时间的问候语" class="headerlink" title="修改内容实例：不同时间的问候语"></a>修改内容实例：不同时间的问候语</h5><ul><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>上午好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> hh = date.getHours();</span></span><br><span class="line">        if (h &lt; 12) &#123;</span><br><span class="line"><span class="actionscript">            div.innerHTML = <span class="string">'上午好'</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h &lt; <span class="number">18</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            div.innerHTML = <span class="string">'下午好'</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            div.innerHTML = <span class="string">'晚上好'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改表单属性"><a href="# 修改表单属性" class="headerlink" title="修改表单属性"></a>修改表单属性</h4><ul><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单击按钮后表单里的文字被清空 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"请输入内容"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            input.value = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 想要某个表单被禁用 disabled</span></span></span><br><span class="line"><span class="actionscript">            btn.disabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// == this.disabled = true;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="显示密码的案例"><a href="# 显示密码的案例" class="headerlink" title="显示密码的案例"></a>显示密码的案例</h5><ul><li>登录框时的显示密码明文</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.passwd</span> &#123;</span></span><br><span class="line">        width: 400px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.passwd</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line">        width: 370px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        border: 0;</span><br><span class="line">        outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.passwd</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        width: 20px;</span><br><span class="line">        top: 10px;</span><br><span class="line">        right: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"passwd"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> flag = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">            if (flag == 0) &#123;</span><br><span class="line">                input.type = text;</span><br><span class="line">                flag = 1;</span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">                input.type = password;</span><br><span class="line">                flag = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用一个 flag 来确定是应该显示密码还是隐藏密码</li></ul><h4 id="操作元素样式"><a href="# 操作元素样式" class="headerlink" title="操作元素样式"></a>操作元素样式</h4><ul><li>两种操作方法：<ul><li>.style 行内样式操作 (修改元素较少)</li><li>.className 类名样式操作 (修改样式较多)</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="javascript">        div.onclick = <span class="built_in">document</span>() &#123;</span></span><br><span class="line"><span class="actionscript">            div.style.backgroundColor = <span class="string">'purple'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意！属性用小驼峰命名法</li><li>产生的样式是行内样式 (写在标签名里的样式，优先级最高)</li></ul><h5 id="style 操作样式实例：循环精灵图"><a href="#style 操作样式实例：循环精灵图" class="headerlink" title=".style 操作样式实例：循环精灵图"></a>.style 操作样式实例：循环精灵图</h5><ul><li><p>图片地址：<a href="https://img.alicdn.com/tfs/TB1eiXTXlTH8KJjy0FiXXcRsXXa-24-595.png" target="_blank" rel="external nofollow noopener noreferrer">淘宝精灵图</a></p><ul><li>代码实例：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    ul li &#123;</span><br><span class="line">        width: 24px;</span><br><span class="line">        height: 24px;</span><br><span class="line">        background: url(images/spirit.png);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> lis = ul[<span class="number">0</span>].getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> index = i * <span class="number">44</span>;</span></span><br><span class="line"><span class="actionscript">            lis[i].style.backgroundPosition = <span class="string">'0 -'</span> + index + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 注意这里属性值的写法</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>优点：不用每个 li 都要设置一个 css 样式了</li></ul><h5 id="表单操作案例：搜索框提示词"><a href="# 表单操作案例：搜索框提示词" class="headerlink" title="表单操作案例：搜索框提示词"></a>表单操作案例：搜索框提示词</h5><ul><li>两个新事件：失去焦点 onblur，获得焦点 onfocus</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    input &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"手机"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="actionscript">        text.onfocus = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (text.value === <span class="string">'手机'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                text.value = <span class="string">''</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 获得焦点时文字颜色变深</span></span></span><br><span class="line"><span class="actionscript">            text.style.color = <span class="string">'#333'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        text.onblur = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (text.value === <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                text.value = <span class="string">'手机'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            text.style.color = <span class="string">'#999'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：修改 value 时不用加 style，因为他不是 css 里面的样式</li></ul><h5 id="className 改变样式"><a href="#className 改变样式" class="headerlink" title="className 改变样式"></a>className 改变样式</h5><ul><li>给标签修改类名 (class)</li><li>代码示例：更改盒子样式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.change</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: purple;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">        div.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.className = <span class="string">'change'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：会覆盖掉原先的类名</li><li>如果想要保留原来的类名：<code>this.className = &#39; 原来的类名 change&#39;;</code> (多类名选择器)</li></ul><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104932590" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104932590</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 之 WebAPI 学习 2</title>
      <link href="/archives/acdf05ad.html"/>
      <url>/archives/acdf05ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-WebAPI 学习 2"><a href="#JavaScript-WebAPI 学习 2" class="headerlink" title="JavaScript WebAPI 学习 2"></a>JavaScript WebAPI 学习 2</h1><blockquote><p>这篇文章讲解了修改元素属性，自定义属性，节点的增删添加删除等操作 <br> 这篇文章实在是太长了，里面主要有一些代码占据了很多的空间，我尝试能不能把他们折叠起来 <br> 这篇博客是初学者写下的笔记，如有错误，欢迎前来指正！<br>最后推荐大家看 <a href="https://www.bilibili.com/video/BV1k4411w7sV?p=56" target="_blank" rel="external nofollow noopener noreferrer"> 这部分知识点的总结</a>，六分钟回顾一下这里的知识点</p></blockquote><a id="more"></a><h2 id="js 案例"><a href="#js 案例" class="headerlink" title="js 案例"></a>js 案例 </h2><h3 id="案例：排他思想"><a href="# 案例：排他思想" class="headerlink" title="案例：排他思想"></a> 案例：排他思想</h3><ul><li>案例：当点击一个按钮时选中它，并且其他的按钮都恢复未被选中的状态 (不能出现多个按钮同时被选中的状态)</li><li>思考过程：在选中之前把其他的选中都去掉<ol><li>先把其他元素的样式清除掉</li><li>在设置自己的样式</li></ol></li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮 2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮 3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">// 1. 获取所有按钮元素</span></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> btns = <span class="built_in">document</span>.querrySelectorAll(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript">   <span class="comment">// 返回含有三个 button 的伪数组</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">   <span class="comment">// 为背景颜色添加事件</span></span></span><br><span class="line"><span class="actionscript">   btns[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 先把所有的背景颜色清空，防止出现多个被选中的状态</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">    btns[i].style.backgroundColor = <span class="string">''</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 改变按钮的背景颜色</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.style.backgroundColor = <span class="string">'blue'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：百度换肤"><a href="# 案例：百度换肤" class="headerlink" title="案例：百度换肤"></a>案例：百度换肤</h3><ul><li>这里我们没有图片做背景，还是用颜色作为背景</li><li>就是点击一个按钮，然后整个网页的颜色就会改变</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  ul li &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    list-style: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.color</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line">    height: 40px;</span><br><span class="line">    width: 40px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.color</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line">    height: 40px;</span><br><span class="line">    width: 40px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.color</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">    height: 40px;</span><br><span class="line">    width: 40px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.color</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line">    height: 40px;</span><br><span class="line">    width: 40px;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"color"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.ipg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> items = <span class="built_in">document</span>.querySelector(<span class="string">'.color'</span>).  querySelectorAll(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(items);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">      items[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.style.backgroundColor);</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 这里需要注意一下，这里需要两边加上 url()</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.style.backgroundColor = <span class="string">'url('</span>  +<span class="keyword">this</span>.src+<span class="string">')'</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：当前行变色"><a href="# 案例：当前行变色" class="headerlink" title="案例：当前行变色"></a>案例：当前行变色</h3><ul><li>实现效果：鼠标放在一行上，该行变色，鼠标移开时该行变成原来的颜色</li><li>做法：直接用 onmouseover 事件和 onmouseout 两个事件更改背景颜色</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thead"</span>&gt;</span>表头 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tbody"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span> 行 1<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>行 2<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>行 3<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 多重选择</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">'.tbody'</span>). querySelectorAll(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tbody.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 鼠标经过事件</span></span></span><br><span class="line"><span class="actionscript">      tbody[i].onmouseover =  <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.style.backgroundColor = <span class="string">'gray'</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 鼠标离开事件</span></span></span><br><span class="line"><span class="actionscript">      tbody[i].onmouseout = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.style.backgroundColor = <span class="string">''</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：表单全选取消"><a href="# 案例：表单全选取消" class="headerlink" title="案例：表单全选取消"></a>案例：表单全选取消</h3><ul><li><p>要求：有一个全选按钮，当所有元素都被选中时他也被选中，反之只要有一个还是没有选中的状态他就没有选中，点击他可以实现全选与非全选之间的切换，同样，下面有一个按钮未选中时全选按钮就不选中，下面所有按钮选中时上面全选按钮选中</p></li><li><p>操作思路：</p><ul><li><p>全选按钮影响下面的按钮：给全选按钮绑定点击事件，当全选按钮被点击时让下面所有复选框的状态和全选按钮的状态一样</p></li><li><p>下面的按钮影响全选框：给所有的下面的按钮绑定点击事件，当被点击时遍历所有的子按钮，如果全都处于选中状态则全选按钮为 True 只要有一个按钮未选中则全选按钮为 False (这个里面坑特别多，代码下面细讲)</p></li><li><p>代码示例：</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkall"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dtinput = <span class="built_in">document</span>.querySelector(<span class="string">'.checkall'</span>).querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ddinput = <span class="built_in">document</span>.querySelector(<span class="string">'dl'</span>).getElementsByTagName(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 全选按钮影响下面的按钮</span></span></span><br><span class="line"><span class="actionscript">    dtinput.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ddinput.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这里十分巧妙，让下面的普通复选框保持和全选复选框一样的状态就可以了</span></span></span><br><span class="line"><span class="actionscript">        ddinput[i].checked = <span class="keyword">this</span>.checked;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 下面按钮影响全选按钮</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ddinput.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">      ddinput[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 这个 flag 一定要放在 function 里面，否则会出现下面的按钮全选，而上面的全选按钮没有选上</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ddinput.length; i++) &#123;</span></span><br><span class="line">          if (!ddinput[i].checked) &#123;</span><br><span class="line"><span class="actionscript">            flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 这里是为了提高运行效率</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">break</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dtinput.checked = flag;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里讲一下我写这段代码时遇到的坑，首先，就是一定一定要把全选按钮和下面的按钮分开放，要不会出现一堆莫名奇妙的问题(我之前是使用 dt 存放全选标签，然后用 dd 存放下面的按钮，就导致他们两个是处于一个大标签下面的平级的两个小标签，很难把他们分离开)</li><li>然后就是在下面定义 flag 时，需要把 flag 定义在 function 里面，之前我有一个 bug ，就是下面的按钮全选，而上面的全选按钮并没有选上，这个问题困扰了我好长时间，再加上我上面的获取元素也有一些问题，浪费了我一个小时之久(其实就是一个小问题，大家都可能不会犯这个错误)，最后发现这里其实是作用域问题，我把 flag 定义在了 function 的外面，而 bool 类型的初值还是 false ，所以就出现我上面的那种情况</li></ul><h2 id="获取 - 修改 - 删除元素属性值"><a href="# 获取 - 修改 - 删除元素属性值" class="headerlink" title="获取 / 修改 / 删除元素属性值"></a>获取 / 修改 / 删除元素属性值</h2><ul><li><p>获取属性：</p></li><li><p>可以使用 <code>element. 属性</code> 来获取元素属性值</p></li><li><p>或者通过 <code>element.getAttribute(&#39; 属性 &#39;)</code> 获取属性</p><ul><li>代码示例：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"demo"</span> <span class="attr">index</span> = <span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querrySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// element. 属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.id);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// element.getAttribute('属性')</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.getAttribute(<span class="string">'index'</span>));</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>两者区别：</p><ul><li><code>element. 属性</code>：获取元素本身自带的属性 (无法获取自定义属性)</li><li><code>element.getAttribute(&#39; 属性 &#39;)</code>：获取程序员自己定义的属性(自定义属性)</li></ul></li><li><p>修改属性：</p></li><li><p><code>element. 属性 </code> 同样可以改变元素的属性值</p></li><li><p>还可以通过 <code>element.setAttribute(&#39; 属性 &#39;,&#39; 值 &#39;);</code> 来修改元素属性值 (同样针对自定义属性值，但是也能修改普通的属性)</p></li></ul><blockquote><p>小知识：用 <code>element. 属性</code> 修改 class 属性时应该写<code>element.className</code></p></blockquote><ul><li>删除属性：</li><li>移除属性：<code>removeAttribute(&#39; 属性 &#39;)</code></li></ul><h3 id="操作元素属性值实例：tab 栏切换"><a href="# 操作元素属性值实例：tab 栏切换" class="headerlink" title="操作元素属性值实例：tab 栏切换"></a>操作元素属性值实例：tab 栏切换</h3><ul><li>点击不同的标签显示不同的内容</li><li>这里面的难点，不知道点击哪个 li<ul><li>解决方法，给 li 添加自定义属性例如 <code>index</code> 等于从 0 到 4 然后通过 this 来取出哪个要显示的标签</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        li &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.headbox</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.headbox</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            height: 48px;</span><br><span class="line">            width: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#a7a3a3</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 50px;</span><br><span class="line">            margin-left: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footbox</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#a7a7a7</span>;</span></span><br><span class="line">            font-size: 24px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 200px;</span><br><span class="line">            z-index: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.tagbox</span> <span class="selector-class">.selected</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">            color: white;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tagbox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"headbox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span>商品介绍 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span> 规格与包装 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span> 售后保障 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">index</span>=<span class="string">"3"</span>&gt;</span> 商品评价 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footbox"</span> <span class="attr">style</span>=<span class="string">"display:block;"</span>&gt;</span> 产品介绍 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footbox"</span>&gt;</span> 规格与包装 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footbox"</span>&gt;</span> 售后保障 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footbox"</span>&gt;</span> 商品评价<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tab = <span class="built_in">document</span>.querySelector(<span class="string">'.headbox'</span>).querySelectorAll(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.footbox'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 点击一个按钮后按钮变色</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tab.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            tab[i].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">// tag 标签变色</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tab.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    tab[i].className = <span class="string">''</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.className = <span class="string">'selected'</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 显示内容变化</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> index = <span class="keyword">this</span>.getAttribute(<span class="string">'index'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">                    items[i].style.display = <span class="string">'none'</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                items[index].style.display = <span class="string">'block'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>刚开始我尝试自己做的时候，就陷入了一个误区，我当时认为可以通过外面给 li 注册事件的循环计数的 i 可以知到我点击的是哪个 li，但是注册事件是一次注册完成的，就是说你无论点击哪个 li，他能获取到的 i 的值都是 4 (刚开始我看到这个 4 还十分奇怪，后来仔细想想 for 循环是先 ++ 再判断，所以最后 i 值是 4)，所以外层循环的 i 是没有价值的</li><li>然后我又琢磨了好长时间，当时的我既不知到 this 来知到我们选择的是哪个元素又想不出穿透作用域的方法，后来接着看老师的视频，才发现如此简单</li><li>这里简单总结一下，其实很简单，通过 this 指针来知到我们点击的是哪个 li 在和下面的 div 相对应，然后就可以实现点击不同标签出现不同内容的效果了</li></ul><h2 id="H5 自定义属性"><a href="#H5 自定义属性" class="headerlink" title="H5 自定义属性"></a>H5 自定义属性</h2><ul><li><p>自定义属性目的是保存数据</p></li><li><p>自定义属性通过 <code>element.getAttribute(&#39; 属性 &#39;)</code> 获取</p></li><li><p>为了区分自带的属性和我们自己定义的自定义属性，H5 做出如下规范</p><ul><li>H5 规定自定义属性用 <code>data- 属性</code> 作为自定义属性名</li></ul></li><li><p>新方法：可以通过 <code>element.dataset. 属性名</code> 或者<code>element.dataset[&#39; 属性名 &#39;]</code> (IE11 兼容)</p><ul><li><p>注意：属性名前面不用加 <code>data-</code> 了</p></li><li><p><code>element.dataset</code>存放了所有以 data 开头的属性 (也就是自定义属性)</p></li><li><p>自定义属性里面有多个 - 连接，dataset 后面的用小驼峰命名法</p></li><li><p>代码示例：</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-list-name</span>=<span class="string">"andy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 这是个特例，需要注意下</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.dataset.listName);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(div.dataset[<span class="string">'listName'</span>]);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="节点操作"><a href="# 节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><ul><li><p>通过节点层级关系获取元素</p></li><li><p>节点包括：文档，元素，属性，文本</p></li><li><p>一个节点至少包括<code>nodeType(节点类型) nodeName(节点名称) nodeValue(节点值)</code></p></li><li><p>其中 nodeType 分类：</p><ul><li>元素节点 nodeType = 1</li><li>属性节点 nodeType = 2</li><li>文本节点 nodeType = 3 (包括文字，空格，换行)</li></ul></li></ul><h3 id="节点层级"><a href="# 节点层级" class="headerlink" title="节点层级"></a>节点层级</h3><ul><li>分为父子兄三种关系</li></ul><h4 id="父节点"><a href="# 父节点" class="headerlink" title="父节点"></a>父节点</h4><ul><li>父节点 <code>parentNode</code></li><li>同样是就近原则，返回的是最近的父节点</li><li>没有返回 null</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ada"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> ada = documnet.querySelector(<span class="string">'.ada'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取父节点</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ada.parentNode);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子节点"><a href="# 子节点" class="headerlink" title="子节点"></a>子节点</h4><ul><li><p>所有子节点 <code>childNodes</code></p></li><li><p>这种子节点方法会返回文本节点和元素节点，如果我们只想要元素节点的话，我们根据 nodeType 来区分</p></li><li><p>只获取元素的子节点<code>children</code></p><ul><li>代码示例：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ul.childNodes);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 这时返回 7 个节点，里面包括四个文本节点 (包括换行)</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(ul.children);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 这时只输出三个 li</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>获取子节点 (同样会获取文本节点)</p><ul><li>第一个节点<code>firstChild</code></li><li>最后一个节点<code>lastChild</code></li></ul></li><li><p>获取子元素节点 (有兼容性问题 IE9 以上支持)</p><ul><li>第一个元素节点<code>firstElementChild</code></li><li>最后一个元素节点<code>lastElementChild</code></li></ul></li><li><p>实际开发写法<code>ul.children[0]</code>(这不挺正常)</p><ul><li>最后一个的写法<code>ul.children[ul.children.length - 1]</code></li></ul></li></ul><h4 id="节点操作实例：下拉菜单"><a href="# 节点操作实例：下拉菜单" class="headerlink" title="节点操作实例：下拉菜单"></a>节点操作实例：下拉菜单</h4><ul><li>鼠标一经过，显示下拉菜单，离开时隐藏下拉菜单</li><li>这里使用定位来确定这两个下拉菜单，注册鼠标经过与鼠标离开两个事件</li><li>代码如下：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        ul,</span><br><span class="line">        li &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.tag</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.tag</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">            height: 30px;</span><br><span class="line">            width: 40px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.tag</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.tag</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            height: 40px;</span><br><span class="line">            width: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#dd72bd</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tag"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下拉菜单 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>目录 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>目录 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>目录 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>下拉菜单 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>目录 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>目录 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>目录 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tag = <span class="built_in">document</span>.querySelector(<span class="string">'.tag'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 找到两个 li</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> lis = tag.querySelector(<span class="string">'ul'</span>).children;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(lis);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 注册鼠标经过事件</span></span></span><br><span class="line"><span class="actionscript">            lis[i].onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.children[<span class="number">1</span>].style.display = <span class="string">'block'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 鼠标离开事件</span></span></span><br><span class="line"><span class="actionscript">            lis[i].onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.children[<span class="number">1</span>].style.display = <span class="string">'none'</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="兄弟节点"><a href="# 兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><ul><li><p>获取上一个兄弟节点的方式：<code>node.previousSibling</code></p></li><li><p>获取下一个兄弟节点的方式：<code>node.nextSibling</code></p><ul><li>这两种种获取方式都包括文本节点</li></ul></li><li><p>获取下一个元素兄弟节点：<code>node.nextElementSibling</code></p></li><li><p>获取上一个元素兄弟节点：<code>node.previousElementSibling</code></p><ul><li>这两种方法有兼容性问题，IE9 以上支持</li><li>解决兼容性方法：写一个兼容性的函数</li></ul></li></ul><h3 id="创建和添加节点"><a href="# 创建和添加节点" class="headerlink" title="创建和添加节点"></a>创建和添加节点</h3><ul><li>动态创建元素节点<code>document.createElement(&#39;tagname&#39;)</code></li><li>创建完节点之后还要把节点添加到某个地方</li><li>添加 (插入) 节点：<code>node.appendChild(child)</code><ul><li>给父节点 node 节点添加一个元素 child 在父元素的末尾 (类似于 after 伪元素)</li></ul></li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySeletor(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 添加节点</span></span></span><br><span class="line">    ul.appendChild(li);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第二种添加 (插入) 方法：<code>node.insertBefore(child, 指定元素)</code></li><li>在指定元素前面插入</li></ul><h4 id="创建 - 添加节点案例：留言板"><a href="# 创建 - 添加节点案例：留言板" class="headerlink" title="创建 / 添加节点案例：留言板"></a>创建 / 添加节点案例：留言板</h4><ul><li><p>在一个文本框内输入后点击提交后会在下方出现一个 li 来展示输入的内容</p></li><li><p>小知识：<code>text.value</code>获取文本框里的文字</p><ul><li><p>通过 <code>li.innerHTML</code> 把值给 li</p></li><li><p>代码示例：</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comments"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 注册按钮事件</span></span></span><br><span class="line"><span class="actionscript">        btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (text.value == <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">' 您还没有输入 '</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 创建元素</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 给 li 里面赋值</span></span></span><br><span class="line">                li.innerHTML = text.value;</span><br><span class="line"><span class="actionscript">                <span class="comment">// 添加元素</span></span></span><br><span class="line">                ul.appendChild(li);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果想让最新的评论显示在最上面的话把 <code>ul.appendChild(li)</code> 改成 <code>node.insertBefore(li,ul.children[0])</code> 就可以了</li></ul><h3 id="删除节点"><a href="# 删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ul><li><p>删除某个节点的方法：<code>node.removeChlid(child)</code></p><ul><li><p>删除父节点中的一个子节点，返回删除的节点</p></li><li><p>代码示例：</p></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取父元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querrySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 开始删除</span></span></span><br><span class="line">    ul.removeChild(ul.children[0]);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="删除节点案例：删除留言"><a href="# 删除节点案例：删除留言" class="headerlink" title="删除节点案例：删除留言"></a>删除节点案例：删除留言</h4><ul><li>接着上一个示例做</li><li>li 后面有一个链接，当点击链接的时候，删除这个 li</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span><br><span class="line"><span class="comment">// 注册按钮事件</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (text.value == <span class="string">''</span>) &#123;</span><br><span class="line">        alert(<span class="string">' 您还没有输入 '</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建元素</span></span><br><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">        <span class="comment">// 给 li 里面赋值</span></span><br><span class="line">        li.innerHTML = text.value + <span class="string">"&lt;a href='javascript:void(0);'&gt; 删除 &lt;/a&gt;"</span>;</span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        ul.appendChild(li);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">as</span> = <span class="built_in">document</span>.querySelectorAll(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="keyword">as</span>.length;i++) &#123;</span><br><span class="line">    <span class="keyword">as</span>[i].oncilck = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这里删除的是 ul 的子元素 li ，但是是这个事件 a 的父元素</span></span><br><span class="line">        ul.removeChild(<span class="keyword">this</span>.parentElement);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>样式尽量通过 css 修改</li><li>阻止链接跳转可以使用 <code>javascript:void(0);</code> 或者 <code>javascript:;</code></li></ul><h3 id="复制节点"><a href="# 复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><ul><li>复制节点的方法：<code>node.cloneNode()</code></li><li>返回这个节点的一个副本</li><li>注意：参数为空或者为 flase 则为浅拷贝，只复制节点本身，不复制里面的子节点(包括内容)</li><li>括号里为 true 时为深拷贝</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取父元素</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.querrySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 开始复制</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> li = ul.chlidren[<span class="number">0</span>].cloneNode();</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 把复制的节点放入 ul 里面</span></span></span><br><span class="line">    ul.appendChild(li);</span><br><span class="line"><span class="actionscript">    <span class="comment">// 浅拷贝只复制了节点</span></span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态表格示例"><a href="# 动态表格示例" class="headerlink" title="动态表格示例"></a>动态表格示例</h3><ul><li>使用动态数据 (在 js 里面使用数据)</li><li>这个主要是通过这个示例来把 json 数据 和 js 联系起来，然后又复习了节点操作</li><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        table &#123;</span><br><span class="line">            width: 500px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        td,</span><br><span class="line">        th &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        thead tr &#123;</span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名 <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span> 科目 <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span> 成绩 <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span> 操作 <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 感觉这个就是 json 文件里的东西</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> datas = [&#123;</span></span><br><span class="line"><span class="actionscript">            name: <span class="string">'小铭'</span>,</span></span><br><span class="line"><span class="actionscript">            subject: <span class="string">'JavaScript'</span>,</span></span><br><span class="line">            score: 100</span><br><span class="line">        &#125;, &#123;</span><br><span class="line"><span class="actionscript">            name: <span class="string">'子程序'</span>,</span></span><br><span class="line"><span class="actionscript">            subject: <span class="string">'JavaScript'</span>,</span></span><br><span class="line">            score: 90</span><br><span class="line">        &#125;, &#123;</span><br><span class="line"><span class="actionscript">            name: <span class="string">'海洋哥'</span>,</span></span><br><span class="line"><span class="actionscript">            subject: <span class="string">'JavaScript'</span>,</span></span><br><span class="line">            score: 80</span><br><span class="line">        &#125;, &#123;</span><br><span class="line"><span class="actionscript">            name: <span class="string">'zzmc'</span>,</span></span><br><span class="line"><span class="actionscript">            subject: <span class="string">'JavaScript'</span>,</span></span><br><span class="line">            score: 70</span><br><span class="line">        &#125;];</span><br><span class="line"><span class="actionscript">        <span class="comment">// 动态生成表格</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">'tbody'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 创建四行 tr</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>);</span></span><br><span class="line">            tbody.appendChild(tr);</span><br><span class="line"><span class="actionscript">            <span class="comment">// 创建单元格 td</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> datas[i]) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 把值赋给单元格</span></span></span><br><span class="line">                td.innerHTML = datas[i][k];</span><br><span class="line">                tr.appendChild(td);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 创建删除单元格</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">            td.innerHTML = "<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'javascript:void(0);'</span>&gt;</span> 删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span>";</span></span></span><br><span class="line">            tr.appendChild(td);</span><br><span class="line"><span class="actionscript">            td.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                tbody.removeChild(<span class="keyword">this</span>.parentElement);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三种动态创建元素的区别"><a href="# 三种动态创建元素的区别" class="headerlink" title="三种动态创建元素的区别"></a>三种动态创建元素的区别</h3><ul><li><p><code>document.white()</code>使用很少 (不推荐)</p><ul><li>代码示例:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.white(<span class="string">'&lt;div&gt;123&lt;/div&gt;'</span>);</span><br><span class="line"><span class="comment">// 新建一个页面，里面只显示 div 一个元素</span></span><br></pre></td></tr></table></figure><ul><li>这种方法如果文档流执行完毕 (页面显示完毕)，这种写法会导致重绘页面</li><li>重绘页面：新建一个网页，里面只显示 white 里的元素</li></ul></li><li><p><code>innerHTML</code>创建元素</p><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前面有个 div 标签，类名叫 inner</span></span><br><span class="line"><span class="keyword">var</span> inner = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</span><br><span class="line">inner.innerHTML = <span class="string">'&lt;a href="#"&gt;123&lt;/a&gt;'</span>;</span><br></pre></td></tr></table></figure><ul><li>字符串不可变性，所以在大量创建的时候耗时较长 (拼接字符串时间较长)</li><li>改进方法：新建一个数组，把要添加的标签放在数组里，然后通过 join 来一起给添加 (效率极高，甚至比 createElement 还高)</li><li>改进方法示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">1000</span>;i++) &#123;</span><br><span class="line">array.push(<span class="string">'&lt;a href="#"&gt;123&lt;/a&gt;'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = array.join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">// 运行效率极高，达到几毫秒级别</span></span><br></pre></td></tr></table></figure></li><li><p><code>document.createElement(&#39;tagname&#39;)</code>创建元素</p><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前面依旧有一个 div 标签，类名叫 inner</span></span><br><span class="line"><span class="keyword">var</span> inner = <span class="built_in">document</span>.querySelector(<span class="string">'.inner'</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">inner.appendChild(a);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/105910991" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/105910991</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础语法 3</title>
      <link href="/archives/b8089044.html"/>
      <url>/archives/b8089044.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript 基础语法"><a href="#JavaScript 基础语法" class="headerlink" title="JavaScript 基础语法"></a>JavaScript 基础语法</h1><blockquote><p>这篇笔记主要讲了 JavaScript 函数，变量作用域，预解析，对象，内部对象以及两种数据类型 <br> 这篇笔记有很多 JavaScript 的特性，所以可以认真看下 <br> 这篇笔记是初学者写下的笔记，如有错误，欢迎前来指正</p></blockquote><a id="more"></a><h2 id="JavaScript 函数"><a href="#JavaScript 函数" class="headerlink" title="JavaScript 函数"></a>JavaScript 函数</h2><ul><li>函数：重复使用某些代码，实现代码复用</li><li>函数命名仍然是小驼峰命名</li><li>函数可以调用另一个函数 (可以先使用后定义)</li><li>函数里面还可以嵌套函数</li></ul><h3 id="JavaScript 函数使用"><a href="#JavaScript 函数使用" class="headerlink" title="JavaScript 函数使用"></a>JavaScript 函数使用</h3><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"> 形参<span class="number">1</span>, 形参<span class="number">2</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 参数;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> 接收变量 = 函数名(实参<span class="number">1</span>, 实参<span class="number">2</span>); <span class="comment">// 调用</span></span><br></pre></td></tr></table></figure><ul><li><p><span style="background-color :yellow"> 注意：不需要声明形参，可以直接写一个参数名</span></p></li><li><p>形参的个数和实参不匹配也可以：</p><ul><li>实参个数 &gt; 形参个数：只读取形参的个数</li><li>实参个数 &lt; 形参个数：<span style="background-color :yellow">没有值的形参默认为 undefined</span></li></ul></li><li><p>return 终止函数，语句之后的代码不会被执行</p></li><li><p>return 只能返回一个值，返回多个值以最后一个值为准</p></li><li><p>想要返回多个值，可以使用数组作为返回值</p></li><li><p>函数没有 return 的话，返回的值是 undefined</p></li></ul><h3 id="arguments 使用 -★"><a href="#arguments 使用 -★" class="headerlink" title="arguments 使用(★)"></a>arguments 使用(★)</h3><ul><li>arguments：所有函数都内置了一个 arguments 对象，存储了所有实参</li><li>可以用于所有的函数，包括对象内的函数</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 输出[1,2,3]</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>arguments 展示的是 <code> 伪数组</code>，所以可以遍历<ul><li>可以使用 length 属性</li><li>可以用下标索引</li><li>不同点：没有数组的 push 和 pop 方法</li></ul></li></ul><h4 id="arguments 使用案例"><a href="#arguments 使用案例" class="headerlink" title="arguments 使用案例"></a>arguments 使用案例</h4><ul><li>求未知个数的数组里的最大值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; <span class="built_in">arguments</span>[i]) &#123;</span><br><span class="line">            max = <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMax(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 输出 7</span></span><br></pre></td></tr></table></figure><h3 id="函数声明两种方式"><a href="# 函数声明两种方式" class="headerlink" title="函数声明两种方式"></a>函数声明两种方式</h3><ul><li>直接声明 (function 方法)：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><ul><li>函数表达式 (匿名函数)：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 调用 </span></span><br><span class="line"> 变量名();</span><br></pre></td></tr></table></figure><h2 id="变量作用域（★）"><a href="# 变量作用域（★）" class="headerlink" title="变量作用域（★）"></a>变量作用域（★）</h2><ul><li><p>es6 版本之前：全局变量，局部变量</p><ul><li>全局变量：作用于 script 标签之间或者一个 js 文件</li><li>局部变量：在函数内部声明的变量</li></ul></li><li><p><span style="background-color :yellow">注意：全局变量和局部变量名字可以相同，不会起冲突</span></p></li><li><p><span style="background-color :yellow">如果在同一个作用域下名字相同，后面的值会把前面的值覆盖</span></p></li><li><p>特例！</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line">    num2 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br><span class="line"><span class="comment">// 报错，变量未定义</span></span><br><span class="line"><span class="built_in">console</span>.log(num2);</span><br><span class="line"><span class="comment">// 可以直接输出</span></span><br></pre></td></tr></table></figure><ul><li><span style="background-color :yellow">注意：在函数内部没有声明直接赋值的变量也属于全局变量</span></li><li>函数的形参也属于 <code> 局部变量</code></li></ul><h3 id="块级作用域 - 新属性"><a href="# 块级作用域 - 新属性" class="headerlink" title="块级作用域 (新属性)"></a>块级作用域 (新属性)</h3><ul><li>现阶段没有块级作用域</li><li>在一个花括号里面的作用域</li><li>注意！和其他语言不同，JavaScript 在 if，for 里面定义的变量都是可以全局使用的，只有函数里声明的变量才是局部变量</li></ul><h3 id="作用域链"><a href="# 作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><ul><li>内部函数可以访问外部函数</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">        <span class="comment">// 问题：这时输出哪个 num 值?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 20</span></span><br></pre></td></tr></table></figure><ul><li>这时输出离变量最近的声明 (<code>就近原则</code>)</li></ul><h2 id="JavaScript 预解析 -★"><a href="#JavaScript 预解析 -★" class="headerlink" title="JavaScript 预解析(★)"></a>JavaScript 预解析(★)</h2><ul><li>情景一：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 输出结果 undefined</span></span><br></pre></td></tr></table></figure><ul><li>情景二：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fn();</span></span><br><span class="line"><span class="comment">// 无论 fn 在定义函数前面还是定义函数后面，都可以正常输出 test</span></span><br></pre></td></tr></table></figure><ul><li>情景三：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fn(); <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里只提升了 var fn;</span></span><br><span class="line"><span class="comment">// js 以为他是个变量，所以会报错</span></span><br></pre></td></tr></table></figure><ul><li><p>运行 js 代码时分为两步：1. 预解析 2. 代码执行</p><ul><li>预解析：会把所有的 var 和 function 提升到作用域的最前面</li><li>代码执行：按照代码执行的顺序执行</li></ul></li><li><p>注意！预解析只提升变量声明，不提升变量赋值</p></li><li><p>函数提升的时候把 function 声明的函数 <code> 整个 </code> 提升到最前面 (所以即使先使用后声明也可以正常运行)</p></li></ul><h3 id="预解析实例"><a href="# 预解析实例" class="headerlink" title="预解析实例"></a>预解析实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">fun();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果 undefined</span></span><br></pre></td></tr></table></figure><ul><li>解析：最外层 function 会提升到最前面，然后 <code>fun()</code> 调用这个函数的时候，函数预解析：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">    num = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>所以输出的是 undefined</p></li><li><p><span style="background-color :yellow">特例！var a = b = c = 9 相当于 var a = 9; b = 9; c = 9;</span></p></li><li><p>所以这里的 b 和 c 直接赋值，相当于全局变量</p></li></ul><h2 id="JavaScript 对象"><a href="#JavaScript 对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h2><ul><li>对象是指一个具体的东西，而不是泛指</li></ul><h3 id="创建对象的三种方式 - 自定义对象"><a href="# 创建对象的三种方式 - 自定义对象" class="headerlink" title="创建对象的三种方式 (自定义对象)"></a>创建对象的三种方式 (自定义对象)</h3><ul><li>在对象里面声明的叫属性或方法</li></ul><blockquote><p>java 里面的函数都是写在类内的，所以叫方法</p></blockquote><h4 id="直接创建对象"><a href="# 直接创建对象" class="headerlink" title="直接创建对象"></a>直接创建对象</h4><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="comment">// 这里是直接新建了一个对象叫 obj2</span></span><br><span class="line">    name : <span class="string">'菜鸟小铭'</span>, <span class="comment">// 注意！这里是逗号</span></span><br><span class="line">    age : <span class="number">18</span> ,</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用对象</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name);</span><br><span class="line"><span class="comment">// 另一种方法</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2[<span class="string">'age'</span>]);</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">obj2.hello();</span><br></pre></td></tr></table></figure><ul><li>注意！里面用的是冒号，多个属性用逗号隔开</li><li>方法后面跟的是匿名函数</li></ul><h4 id="利用 new-object 创建对象"><a href="# 利用 new-object 创建对象" class="headerlink" title="利用 new object 创建对象"></a>利用 new object 创建对象</h4><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="comment">// 然后追加属性和方法</span></span><br><span class="line">obj.name = <span class="string">'代码小铭'</span>;</span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line">obj.Hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用和上面的一样</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">'age'</span>]);</span><br><span class="line">obj.hello();</span><br></pre></td></tr></table></figure><ul><li><span style="background-color :yellow">注意！Object 必须要大写</span></li></ul><h4 id="利用构造函数创建对象 -★"><a href="# 利用构造函数创建对象 -★" class="headerlink" title="利用构造函数创建对象 (★)"></a> 利用构造函数创建对象(★)</h4><ul><li>最接近其他语言的方法 (类似于类)</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name,age,sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params">active</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(active));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建对象时需要加 new！</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">'菜鸟小铭'</span>,<span class="number">18</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="comment">// 调用对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> xiaoming);<span class="comment">// 输出 object</span></span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.name);<span class="comment">// 输出菜鸟小铭</span></span><br><span class="line"><span class="built_in">console</span>.log(xiaoming[<span class="string">'sex'</span>]);<span class="comment">// 输出男</span></span><br><span class="line">xiaoming.study(<span class="string">'study'</span>);</span><br></pre></td></tr></table></figure><ul><li>注意！构造函数首字母大写</li><li>构造函数不需要 return 就可以返回一个对象</li><li>属性和方法前面必须加 this</li></ul><h5 id="new 的作用"><a href="#new 的作用" class="headerlink" title="new 的作用"></a>new 的作用</h5><ol><li>new 之后创建了一个空的对象</li><li>里面的 this 指针指向空对象</li><li>然后执行属性和方法</li><li>然后返回这个对象</li></ol><h3 id="遍历对象属性 -for…in 循环"><a href="# 遍历对象属性 -for…in 循环" class="headerlink" title="遍历对象属性 (for…in 循环)"></a>遍历对象属性 (for…in 循环)</h3><ul><li>for in 循环可以用于数组和对象</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'代码小铭'</span>,</span><br><span class="line">    age : <span class="number">18</span>,</span><br><span class="line">    gender : man,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k); <span class="comment">// 得到的是属性名</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[k]); <span class="comment">// 得到的是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>小知识：for…in 里面的变量喜欢用 k 或者 key</li><li>也可以遍历出方法</li></ul><h3 id="JavaScript 内置对象"><a href="#JavaScript 内置对象" class="headerlink" title="JavaScript 内置对象"></a>JavaScript 内置对象</h3><ul><li><p>内置对象：js 语言自带的对象</p></li><li><p>文档网站推荐：<a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external nofollow noopener noreferrer">MDN 网站</a></p></li></ul><h4 id="Math 对象"><a href="#Math 对象" class="headerlink" title="Math 对象"></a>Math 对象</h4><ul><li>Math 对象不是构造函数，所以不需要 new，直接使用就可以</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.PI);</span><br><span class="line"><span class="comment">// 输出 3.14……</span></span><br></pre></td></tr></table></figure><ul><li>里面有 max 方法<ul><li>参数不限个数</li><li>如果有不是数据的参数，则会返回 NaN</li><li>如果没有参数返回<code>-Infinity</code></li></ul></li></ul><h5 id="绝对值和取整"><a href="# 绝对值和取整" class="headerlink" title="绝对值和取整"></a>绝对值和取整</h5><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绝对值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">-1</span>));</span><br><span class="line"><span class="comment">// 输出 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="string">'-1'</span>));</span><br><span class="line"><span class="comment">// 同样输出 1 (隐式转换)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向下取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">1.9</span>));</span><br><span class="line"><span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上取整</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.cell(<span class="number">1.1</span>));</span><br><span class="line"><span class="comment">// 输出 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 四舍五入</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">1.5</span>));</span><br><span class="line"><span class="comment">// 输出 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 四舍五入特例 (.5 的时候往大了取)</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">-1.5</span>));</span><br><span class="line"><span class="comment">// 输出 -1</span></span><br></pre></td></tr></table></figure><h5 id="随机数 -random"><a href="# 随机数 -random" class="headerlink" title="随机数 (random)"></a>随机数 (random)</h5><ul><li>random 返回 0 到 1 之间的小数 (可以取到 0，取不到 1)</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个数之间的随机整数，包括这两个数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomIntInclusive</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  min = <span class="built_in">Math</span>.ceil(min);</span><br><span class="line">  max = <span class="built_in">Math</span>.floor(max);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min; <span class="comment">// 含最大值，含最小值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Date 对象"><a href="#Date 对象" class="headerlink" title="Date 对象"></a>Date 对象</h4><ul><li>时间开始于 1970 年 1 月 1 日</li><li>Date 是构造函数，需要 new 一个日期对象</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有参数，返回当前系统时间</span></span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line"><span class="comment">// 输出 Tue Mar 10 2020 20:43:20 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字型</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">01</span>);</span><br><span class="line"><span class="built_in">console</span>.log(date1);</span><br><span class="line"><span class="comment">// 输出 2019 年 11 月 1 日 (比实际月份大 1 月)</span></span><br><span class="line"><span class="comment">// 因为月份是从 0 月开始算的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串型</span></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-10-1 20:03:20'</span>);</span><br><span class="line"><span class="comment">// 正常输出</span></span><br></pre></td></tr></table></figure><h5 id="日期格式化"><a href="# 日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h5><ul><li>推荐看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="external nofollow noopener noreferrer">MDN</a> 里的 get 开头的属性</li><li>以 dateFullYear，getMonth 为例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.getFullYear());</span><br><span class="line"><span class="comment">// 输出 2020</span></span><br><span class="line"><span class="built_in">console</span>.log(date.getMonth());</span><br><span class="line"><span class="comment">// 输出结果比实际少 1 月 (月份是从零开始算的)</span></span><br></pre></td></tr></table></figure><ul><li>注意：周日返回为 0 (可以使用数组来更改)</li><li>想要分钟等出现 02 这样，三元运算符判断，字符串连接</li></ul><h5 id="时间戳 - 距离 1970 年的毫秒数"><a href="# 时间戳 - 距离 1970 年的毫秒数" class="headerlink" title="时间戳 (距离 1970 年的毫秒数)"></a>时间戳 (距离 1970 年的毫秒数)</h5><ul><li>valueOf()，getTime()，+new Date()，Date.now()四种方法</li><li>应用：程序运行时间</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date.valueOf());</span><br><span class="line"><span class="built_in">console</span>.log(date.getTime());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单写法 (最常用)</span></span><br><span class="line"><span class="keyword">var</span> date1 = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// H5 新增方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.noe());</span><br></pre></td></tr></table></figure><h6 id="时间戳示例：倒计时"><a href="# 时间戳示例：倒计时" class="headerlink" title="时间戳示例：倒计时"></a>时间戳示例：倒计时</h6><ul><li>不能直接用时分秒直接减(会出现负数)，但是可以用时间戳可以直接减</li><li>代码实例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countDown</span>(<span class="params">times</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(time);</span><br><span class="line">    <span class="keyword">var</span> times = inputTime - nowTime;</span><br><span class="line">    times /= <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">var</span> dd = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">    <span class="keyword">var</span> hh = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">    <span class="keyword">var</span> mm = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">var</span> ss = <span class="built_in">parseInt</span>(times % <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组对象 -Array"><a href="# 数组对象 -Array" class="headerlink" title="数组对象 (Array)"></a>数组对象 (Array)</h4><ul><li>new 新建数组详解：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 里面的 2 代表数组长度为 2</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span> , <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 新建一个 [2,3] 的数组</span></span><br></pre></td></tr></table></figure><h5 id="检测是否为数组"><a href="# 检测是否为数组" class="headerlink" title="检测是否为数组"></a>检测是否为数组</h5><ul><li>用 instanceof 运算符来检测</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> srr = [];</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br><span class="line"><span class="comment">// 输出结果 true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>);</span><br><span class="line"><span class="comment">// 输出结果 true</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="external nofollow noopener noreferrer">instanceof 详解</a></li><li>感觉是判断这个对象是否是这个构造函数的对象 (因为数组的类型其实也是对象)</li></ul><hr><ul><li>用 Array.isArray(参数) 来判断 (H5 新增方法)</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr));</span><br><span class="line"><span class="comment">// 输出结果 true</span></span><br></pre></td></tr></table></figure><ul><li>和 instanceof 的区别：<ul><li>isArray 能检测到 iframes</li></ul></li></ul><h5 id="添加和删除数组元素"><a href="# 添加和删除数组元素" class="headerlink" title="添加和删除数组元素"></a>添加和删除数组元素</h5><table><thead><tr><th>方法名</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>push(参数)</td><td>在末尾添加一个或多个元素</td><td>返回新数组的长度</td></tr><tr><td>unshift(参数)</td><td>在开头加入一个或多个元素</td><td>返回新数组的长度</td></tr><tr><td>pop()</td><td>删除数组最后一个元素</td><td>返回删除元素的值</td></tr><tr><td>shift()</td><td>删除数组第一个元素</td><td>返回删除元素的值</td></tr><tr><td>.splice(index,howmany,item)</td><td>删除数组指定元素</td><td>返回删除元素的值</td></tr><tr><td>slice(begin,end)</td><td>截取从 begin 到 end</td><td>返回新数组</td></tr></tbody></table><ul><li><p>详解 .splice 使用方法：</p><ul><li><p>index：删除哪一位的元素</p></li><li><p>howmany：删除这位的元素多少个</p></li><li><p>item：替换这个元素的值</p></li><li><p>代码示例：</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">4</span>,<span class="string">'tom'</span>));</span><br><span class="line"><span class="comment">// 输出 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 输出[1,2,3,4,"tom"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">0</span>));</span><br><span class="line"><span class="comment">// 输出 4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 输出[0,1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop());</span><br><span class="line"><span class="comment">// 输出 3 (被删除的那个元素)</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 输出[1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.shift());</span><br><span class="line"><span class="comment">// 输出 1 (被删除的那个元素)</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 输出[2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.splice(<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 输出[1,2,0,0,5]</span></span><br></pre></td></tr></table></figure><h5 id="数组排序"><a href="# 数组排序" class="headerlink" title="数组排序"></a>数组排序</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>reverse()</td><td>颠倒数组中元素的顺序</td></tr><tr><td>sort()</td><td>对数组元素进行排序 (冒泡排序)</td></tr></tbody></table><ul><li>返回值是更新后的数组</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 输出[3,2,1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 输出[1,3,4,6,7,8,9]</span></span><br></pre></td></tr></table></figure><ul><li>sort 排序是有缺陷的，他会先判断十位再判断个位</li><li>就会出现以下情况：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">13</span>,<span class="number">4</span>,<span class="number">45</span>,<span class="number">7</span>,<span class="number">77</span>,<span class="number">1</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 输出 [1,13,4,45,7,77]</span></span><br></pre></td></tr></table></figure><ul><li>解决方法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">13</span>,<span class="number">4</span>,<span class="number">45</span>,<span class="number">7</span>,<span class="number">77</span>,<span class="number">1</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b; <span class="comment">// 升序排列</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 输出[1,4,7,13,45,77]</span></span><br></pre></td></tr></table></figure><ul><li>这里用 a - b 是升序排列，b - a 就是降序排列</li></ul><h5 id="数组索引"><a href="# 数组索引" class="headerlink" title="数组索引"></a>数组索引</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>indexOf()</td><td>数组查找指定元素的第一个索引</td></tr><tr><td>lastIndexOf()</td><td>数组查找指定元素最后一个索引</td></tr></tbody></table><ul><li>返回的是元素的下标</li><li>如果不存在则返回 -1</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 返回 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 返回 5</span></span><br></pre></td></tr></table></figure><h6 id="数组索引实例：数组去重"><a href="# 数组索引实例：数组去重" class="headerlink" title="数组索引实例：数组去重"></a>数组索引实例：数组去重</h6><ul><li>我的解题思路：如果前面索引和后面索引的值相等，那么直接跳过；如果前面的索引和后面的索引不等，则去除后面索引到的元素，并且 key-1 (为了防止出现多个重复)</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'a'</span>, <span class="string">'x'</span>, <span class="string">'a'</span>, <span class="string">'x'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'n'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key = <span class="number">0</span>; key &lt; arr.length; key++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.indexOf(arr[key]) == arr.lastIndexOf(arr[key])) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[key] == arr[arr.lastIndexOf(arr[key])]) &#123;</span><br><span class="line">        arr.splice(arr.lastIndexOf(arr[key]), <span class="number">1</span>);</span><br><span class="line">        key--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><ul><li>老师的解法：遍历旧数组，然后查询新数组是否有重复，如果没有重复则添加</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'c'</span>,<span class="string">'a'</span>,<span class="string">'z'</span>,<span class="string">'a'</span>,<span class="string">'x'</span>,<span class="string">'a'</span>,<span class="string">'x'</span>,<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'n'</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(arr[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">        newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure><blockquote><p>老师的方法比我的方法简单一万倍</p></blockquote><h5 id="数组转化为字符串"><a href="# 数组转化为字符串" class="headerlink" title="数组转化为字符串"></a>数组转化为字符串</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>toString()</td><td>数组转化为字符串，逗号分隔</td></tr><tr><td>join(‘分隔符’)</td><td>分隔符分割开 (什么都不写默认是逗号)</td></tr></tbody></table><ul><li>返回值是转换好的字符串</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.toString());</span><br><span class="line"><span class="comment">// 输出 1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">''</span>));</span><br><span class="line"><span class="comment">// 输出 123</span></span><br></pre></td></tr></table></figure><h4 id="字符串对象"><a href="# 字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h4><ul><li>字符串是简单数据类型，但是有属性和方法</li><li>基本包装类型：把简单数据类型包装成复杂数据类型 (String, Number, Boolean)</li><li>过程：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'菜鸟小铭'</span>;</span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'菜鸟小铭'</span>);</span><br><span class="line">str = temp;</span><br><span class="line">temp = <span class="literal">null</span>; <span class="comment">// 销毁中间变量</span></span><br></pre></td></tr></table></figure><h5 id="字符串的不可变"><a href="# 字符串的不可变" class="headerlink" title="字符串的不可变"></a>字符串的不可变</h5><ul><li><p>用户声明一个字符串并且赋初值后，再拿另一个值去覆盖这个变量，初始的赋值并没有被销毁，而只是变量名指向了另一个值 (地址改变)</p><ul><li>不可变的体现：</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">    str += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure><ul><li>根据 chrome 的任务管理器来看，循环一千万次需要内存 629.34MB 内存 (如果电脑内存不是特别大不建议尝试)</li><li>所以不要随意拼接字符串</li></ul><h5 id="在字符串里面查找字符"><a href="# 在字符串里面查找字符" class="headerlink" title="在字符串里面查找字符"></a>在字符串里面查找字符</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>indexOf(‘要查找的字符’, 开始的位置)</td><td>从前往后找，只找第一个</td></tr><tr><td>lastIndexOf(‘要查找的字符’, 开始的位置)</td><td>从后往前找，只找第一个匹配的</td></tr></tbody></table><ul><li>返回在字符串里的位置，找不到返回 -1</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'JavaScript!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'S'</span>));</span><br><span class="line"><span class="comment">// 返回 4</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'assa'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'a'</span>,<span class="number">1</span>));</span><br><span class="line"><span class="comment">// 返回 3</span></span><br><span class="line"><span class="comment">// lastIndexOf 同理</span></span><br></pre></td></tr></table></figure><h5 id="根据位置返回字符"><a href="# 根据位置返回字符" class="headerlink" title="根据位置返回字符"></a>根据位置返回字符</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>charAt(index)</td><td>返回指定位置的字符</td></tr><tr><td>charCodeAt(index)</td><td>获取指定位置字符的 ASSII 码</td></tr><tr><td>str[index]</td><td>获取指定位置字符 (H5 新增)</td></tr></tbody></table><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'JavaScript!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(charAt(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 输出 c</span></span><br><span class="line"><span class="built_in">console</span>.log(charCodeAt(<span class="number">5</span>));</span><br><span class="line"><span class="comment">// 输出 99</span></span><br><span class="line">cosnle.log(str[<span class="number">5</span>]);</span><br><span class="line"><span class="comment">// 输出 c</span></span><br></pre></td></tr></table></figure><ul><li>可以使用对象名 [‘属性’] 的方法来获取对象里面的属性及属性的值</li></ul><h5 id="字符串的操作"><a href="# 字符串的操作" class="headerlink" title="字符串的操作"></a>字符串的操作</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>concat(str1,str2)</td><td>连接 数组 / 字符串，等效于 +</td></tr><tr><td>substr(start,length)</td><td>截取字符串 从 start 处开始截取，截取 length 这么长 <strong>重要</strong></td></tr><tr><td>replace(‘被替换的字符’,‘替换为的字符’)</td><td>替换字符 (只替换第一个)</td></tr><tr><td>split(‘分隔符’)</td><td>字符转换为数组 (和 join 类似)</td></tr></tbody></table><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abca'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">'a'</span>,<span class="string">'z'</span>));</span><br><span class="line"><span class="comment">// 输出 zbca</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'a,b,c'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">','</span>))</span><br><span class="line"><span class="comment">// 输出 [a,b,c]</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript 数据类型"><a href="#JavaScript 数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型 </h2><h3 id="简单数据类型"><a href="# 简单数据类型" class="headerlink" title="简单数据类型"></a> 简单数据类型</h3><ul><li><p>包括：Number，String，Bollean，undefined，null</p></li><li><p>null 是一个对象</p><ul><li>应用：有个变量以后打算存对象，可以用 null 占位</li></ul></li><li><p>在栈中储存数据</p></li><li><p>简单数据类型传参</p><ul><li>直接把栈里面的值覆盖掉</li></ul></li></ul><h3 id="复杂数据类型"><a href="# 复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><ul><li><p>用 new 创建的类型</p></li><li><p>包括 Object，Array</p></li><li><p>在堆中储存：在栈中存放地址，地址指向堆，在堆里面存放数据</p></li><li><p>复杂数据类型传参</p><ul><li>先找到放在栈中的变量名，取出里面的地址，找到地址指向的堆，再修改里面的变量</li></ul></li></ul><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104807480" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104807480</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础语法 2</title>
      <link href="/archives/cf0fa0d2.html"/>
      <url>/archives/cf0fa0d2.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript 基础语法 2"><a href="#JavaScript 基础语法 2" class="headerlink" title="JavaScript 基础语法 2"></a>JavaScript 基础语法 2</h1><blockquote><p>这篇笔记主要讲了 JavaScript 运算符，流程控制语句 (if else switch)，循环语句和数组<br> 这篇笔记因为有很多地方都是学过的所以记得不是很详细，推荐有其他语言基础的来观看 <br> 这篇笔记是初学者写下的笔记，如有错误，欢迎前来指正</p></blockquote><a id="more"></a><h2 id="JavaScript 运算符"><a href="#JavaScript 运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h2><ul><li><p>正常的加(+) 减(-) 乘(*) 除(/) 取余(%)</p></li><li><p>浮点数计算时会出现误差！</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num == <span class="number">0.3</span>);</span><br><span class="line"><span class="comment">// 输出结果 false</span></span><br></pre></td></tr></table></figure><h3 id="自增自减运算符"><a href="# 自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><ul><li>自增运算符(x++,++x)，自减运算符(x–,–x)</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">++a;</span><br><span class="line"><span class="comment">// a = 11</span></span><br></pre></td></tr></table></figure><ul><li>注意前置和后置的区别</li></ul><h3 id="比较运算符"><a href="# 比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ul><li>包括小于号 (&lt;)，大于号 (&gt;)，大于等于 (&gt;=)，小于等于 (&lt;=)，等于 (==)，不等于 (!=)，全等, 不全等 (===,!==)</li><li><span style="background-color:yellow">注意：== 会转换数据类型(隐式转换)</span></li><li>全等 === 不全等 !== 要求值和数据类型完全相等才为 true</li><li>代码示例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> == <span class="string">'18'</span>);</span><br><span class="line"><span class="comment">// 结果为 true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">18</span> === <span class="string">'18'</span>);</span><br><span class="line"><span class="comment">// 结果为 false</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="# 逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li><p>包括与 (&amp;&amp;)，或 (||)，非 (!)</p></li><li><p>与：一假则假，全真才真</p></li><li><p>或：一真则真，全假才假</p></li></ul><h4 id="短路运算"><a href="# 短路运算" class="headerlink" title="短路运算"></a>短路运算</h4><ul><li><strong>和其他语言不一样的地方</strong> (和 python 一样)</li><li><span style="background-color:yellow">逻辑与 (&amp;&amp;) 如果表达式 1 为 true，则返回表达式 2，如果表达式 1 为假，则返回表达式 1</span></li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> &amp;&amp; <span class="number">456</span>);</span><br><span class="line"><span class="comment">// 输出 456</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="number">456</span>);</span><br><span class="line"><span class="comment">// 输出 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="number">1</span>+<span class="number">2</span> &amp;&amp; <span class="number">456</span> * <span class="number">56789</span>);</span><br><span class="line"><span class="comment">// 输出 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">""</span> &amp;&amp; <span class="number">1</span>+<span class="number">2</span> &amp;&amp; <span class="number">456</span> * <span class="number">56789</span>);</span><br><span class="line"><span class="comment">// 输出""</span></span><br><span class="line"><span class="comment">// 如果空的或者否定含义的为假 其余的为真 0 ""null undefined NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &amp;&amp; <span class="number">2</span> &amp;&amp; <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 输出 3</span></span><br></pre></td></tr></table></figure><ul><li><span style="background-color:yellow">逻辑或 (||) 如果表达式 1 为 true 返回表达式 1. 如果表达式 1 为假，返回表达式 2</span></li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> || <span class="number">456</span>);</span><br><span class="line"><span class="comment">// 输出 123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> || <span class="number">456</span>);</span><br><span class="line"><span class="comment">// 输出 456</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> || <span class="number">2</span> || <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 输出 1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">123</span> || num++);<span class="comment">// 输出结果 123，逻辑中断！</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">// 输出结果 0</span></span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="# 赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li>包括等号 (=)，加等 (+=)，减等 (-=)，乘等(*=) ，除等(/=) ， 取模等 (%=)</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="number">0</span>;</span><br><span class="line">test += <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 上下两句话相等</span></span><br><span class="line">test = test + <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="运算符优先级"><a href="# 运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><ul><li><p>运算符 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence" target="_blank" rel="external nofollow noopener noreferrer"> 优先级表</a></p></li><li><p><span style="background-color:yellow">注意：与 (&amp;&amp;) 的优先级高于或(||)</span></p></li></ul><h2 id="流程控制"><a href="# 流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ul><li>包括 if，switch，三元表达式</li></ul><h3 id="if 关键字"><a href="#if 关键字" class="headerlink" title="if 关键字"></a>if 关键字</h3><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加入 else</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行语句 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 执行语句 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加入 else if</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (a&gt;<span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行语句 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 执行语句 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 执行语句 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三元表达式"><a href="# 三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><ul><li>条件表达式 ？表达式 1 ： 表达式 2 </li><li>如果条件表达式结果为真，则返回表达式 1 的值；如果条件表达式为假，则返回表达式 2 的值</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断两个数字的大小</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> , b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a &gt; b ? a : b);</span><br><span class="line"><span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure><h3 id="switch 语句"><a href="#switch 语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        执行语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        执行语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        执行最后的语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><span style="background-color:yellow">switch 里的表达式和 case 里面的值必须是全等 (===)</span></li></ul><h4 id="switch 和 if-else-if 区别"><a href="#switch 和 if-else-if 区别" class="headerlink" title="switch 和 if else if 区别"></a>switch 和 if else if 区别</h4><ul><li>分支少时 if else 效率更高</li><li>分支多时 switch 效率更高</li></ul><h2 id="循环"><a href="# 循环" class="headerlink" title="循环"></a>循环</h2><ul><li>包括 for 循环，while 循环，do…while 循环</li><li>同样包含关键字 continue break</li></ul><h3 id="for 循环"><a href="#for 循环" class="headerlink" title="for 循环"></a>for 循环</h3><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>;i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 1 到 10</span></span><br></pre></td></tr></table></figure><h4 id="断点调试"><a href="# 断点调试" class="headerlink" title="断点调试"></a>断点调试</h4><ul><li><p>在 F12 里面的 Sourse</p></li><li><p>在行数上单击一下就会打一个断点</p></li><li><p>然后按 F5 刷新</p></li><li><p>按 F11 是下一步</p></li><li><p>就可以观察到程序运行的过程了</p></li><li><p>把鼠标放到变量上就可以实时看见变量的值 (或者使用 watch)</p></li></ul><h3 id="while 循环"><a href="#while 循环" class="headerlink" title="while 循环"></a>while 循环</h3><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do…while 循环"><a href="#do…while 循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h3><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span><br></pre></td></tr></table></figure><ul><li>注意：while 后面没有分号</li><li>do…while 必定会执行一次循环体，如果条件表达式为真则继续执行循环体，如果条件表达式为假则退出表达式</li></ul><h3 id="continue 与 break 关键字"><a href="#continue 与 break 关键字" class="headerlink" title="continue 与 break 关键字"></a>continue 与 break 关键字</h3><ul><li>continue 退出当前此循环，继续执行剩余次数循环</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求 1~100 之间，除了能被 7 整出之外的整数和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">7</span> = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我正在吃第"</span> + i + <span class="string">"个包子"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>break 立即跳出整个循环（循环结束）</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"我正在吃第"</span> + i + <span class="string">"个包子"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript 数组"><a href="#JavaScript 数组" class="headerlink" title="JavaScript 数组"></a>JavaScript 数组</h2><ul><li>在数组里面可以放任意类型的数据 (可以混合存放)</li><li>typeof 返回的数据类型是 object</li><li>两种方式: new 创建数组, 直接创建数组</li></ul><h3 id="new 创建数组"><a href="#new 创建数组" class="headerlink" title="new 创建数组"></a>new 创建数组</h3><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="直接创建数组"><a href="# 直接创建数组" class="headerlink" title="直接创建数组"></a>直接创建数组</h3><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="访问数组元素"><a href="# 访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h3><ul><li><p>可以直接用 log 输出所有元素</p></li><li><p>如果输出一个没有定义的数组元素，会输出 undefined</p></li></ul><h3 id="数组新增元素"><a href="# 数组新增元素" class="headerlink" title="数组新增元素"></a>数组新增元素</h3><ul><li>修改 length 属性实现数组扩容</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.length = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// 会输出有两个 empty</span></span><br><span class="line"><span class="comment">// 直接输出空的部分会输出 undefined</span></span><br></pre></td></tr></table></figure><ul><li>修改索引号实现数组扩容</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="comment">// 可以实现增加</span></span><br></pre></td></tr></table></figure><ul><li>不要直接给数组名赋值，否则数组中的元素全没有了</li></ul><h3 id="数组实例：冒泡排序法"><a href="# 数组实例：冒泡排序法" class="headerlink" title="数组实例：冒泡排序法"></a>数组实例：冒泡排序法</h3><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">99</span>, <span class="number">64</span>, <span class="number">54</span>, <span class="number">34</span>, <span class="number">82</span>, <span class="number">64</span>, <span class="number">24</span>, <span class="number">9</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104741229" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104741229</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础语法 1</title>
      <link href="/archives/5606f168.html"/>
      <url>/archives/5606f168.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript 基础语法 1"><a href="#JavaScript 基础语法 1" class="headerlink" title="JavaScript 基础语法 1"></a>JavaScript 基础语法 1</h1><blockquote><p>这篇主要讲了 JavaScript 的基础知识和变量和数据类型 <br> 这是初学者写下的笔记，如有错误，欢迎前来指正！</p></blockquote><a id="more"></a><ul><li>JavaScript 不再是标记语言啦，是一个编程语言！</li></ul><h2 id="JavaScript-Hello-World"><a href="#JavaScript-Hello-World" class="headerlink" title="JavaScript Hello World"></a>JavaScript Hello World</h2><ul><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  alert(<span class="string">'Hello World'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="初识 JavaScript"><a href="# 初识 JavaScript" class="headerlink" title="初识 JavaScript"></a>初识 JavaScript</h2><blockquote><p>创始人 Brendan Eich<br>和 Java 完全没有关系 (和 Java 同属于 sun 公司)</p></blockquote><ul><li><p>JavaScript 是脚本语言</p></li><li><p>JavaScript 不需要编译器编译，由浏览器直接解释</p></li><li><p>最初是判断密码强度的</p></li><li><p>JavaScript 组成</p><ul><li>ECMAScript：JavaScript 语法</li><li>DOM：文档对象模型</li><li>BOM：浏览器对象模型</li></ul></li></ul><h3 id="JavaScript 书写位置"><a href="#JavaScript 书写位置" class="headerlink" title="JavaScript 书写位置"></a>JavaScript 书写位置</h3><ul><li><p>行内式 js：在标签内加入属性</p></li><li><p>内嵌式的 js：在 script 标签里写 js 代码</p></li><li><p>外部 js：新建一个 js 文件，然后用 <code>&lt;script src=&quot;xx.js&quot;&gt;&lt;/script&gt;</code> 引入</p><ul><li><span style="background-color: yellow;"> 引入外部 JS 文件时在两个标签之间不允许写代码 </span></li></ul></li><li><p>小知识：在 js 中推荐使用单引号</p></li></ul><h3 id="JavaScript 注释"><a href="#JavaScript 注释" class="headerlink" title="JavaScript 注释"></a>JavaScript 注释</h3><ul><li>代码示例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多行</span></span><br><span class="line"><span class="comment">   注释 */</span></span><br></pre></td></tr></table></figure><ul><li>单行注释快捷键 Ctrl + /</li><li>多行注释快捷键 Shift + alt + a</li></ul><h3 id="JavaScript 输入输出语句"><a href="#JavaScript 输入输出语句" class="headerlink" title="JavaScript 输入输出语句"></a>JavaScript 输入输出语句</h3><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>alert(‘msg’)</td><td>浏览器弹出警示框</td></tr><tr><td>console.log(‘msg’)</td><td>浏览器控制台打印输出消息</td></tr><tr><td>prompt(‘info’)</td><td>浏览器弹出输入框，用户可以输入</td></tr></tbody></table><ul><li>代码示例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 输入框</span></span></span><br><span class="line"><span class="actionscript">  prompt(<span class="string">'请输入'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 警示框</span></span></span><br><span class="line"><span class="actionscript">  alert(<span class="string">'输出为'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 控制台输出</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'程序猿才能看到'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>console.log 在 F12 里的 Console 可以看到</li></ul><h2 id="JavaScript 变量"><a href="#JavaScript 变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h2><ul><li>变量：存储数据的容器</li></ul><h3 id="变量的使用"><a href="# 变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><ul><li>声明变量和赋值：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个 age 变量</span></span><br><span class="line"><span class="keyword">var</span> age;</span><br><span class="line">age = <span class="number">18</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'菜鸟小铭'</span>;</span><br><span class="line"><span class="comment">// 声明多个变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'菜鸟小铭'</span> , age = <span class="string">'18'</span>;</span><br></pre></td></tr></table></figure><ul><li>var 关键字 (variable 变量) ，用来声明变量</li><li>声明多个变量时用逗号隔开</li><li>未赋值的变量默认值是 undefined<ul><li>未赋值直接使用会报错” xx is not defined “</li></ul></li><li>变量不声明可以直接使用 (前提条件必须要赋值) 不推荐</li></ul><h4 id="变量实例"><a href="# 变量实例" class="headerlink" title="变量实例"></a>变量实例</h4><ul><li>让用户输入并且在页面上输出</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myname;</span><br><span class="line">myname=prompt(<span class="string">'请输入名字'</span>);</span><br><span class="line">alert(<span class="string">'欢迎您'</span>+name);</span><br><span class="line"><span class="comment">// 可以使用 + 作为字符串连接</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript 变量命名规范"><a href="#JavaScript 变量命名规范" class="headerlink" title="JavaScript 变量命名规范"></a>JavaScript 变量命名规范</h3><ul><li><p>字母数字 _ 和 $ 符号 (和 Java 命名一样)</p></li><li><p>大小写敏感</p></li><li><p>小驼峰式命名</p></li><li><p><span style="background: yellow;">不要用 name 做变量名 (因为 name 在浏览器里面有含义)</span></p></li><li><p>name 在浏览器中本身就已经被定义了</p></li></ul><h2 id="JavaScript 数据类型"><a href="#JavaScript 数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><ul><li><span style="background: yellow;">JavaScript 是弱类型语言，类型在运行时会被自动确定</span></li><li>变量的数据类型可以变化 (例如声明一个变量等于 1，后面可以将一个字符串付给这个变量)</li></ul><h3 id="简单数据类型"><a href="# 简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>Number(数字)</td><td>0</td></tr><tr><td>Boolean(布尔型)</td><td>false</td></tr><tr><td>String(字符串)</td><td>“”</td></tr><tr><td>Undefined(未定义的变量)</td><td>undefined</td></tr><tr><td>Null(空)</td><td>null</td></tr></tbody></table><h4 id="数字 -Number"><a href="# 数字 -Number" class="headerlink" title="数字 (Number)"></a> 数字(Number)</h4><ul><li><p>包括整数和小数</p></li><li><p>八进制：var num = 010; (十进制的 8) <span style="background: yellow;">程序里面数字前面加 0 表示八进制</span></p></li><li><p>十六进制：var num = 0xa; (十进制的 10) <span style="background: yellow;">程序里面数字前面加 0x 表示八进制</span></p><ul><li>.MAX_VALUE 最大值, MIN_VALUE 最小值</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Number</span>.MAX_VALUE);<span class="comment">//1.7976931348623157e+308</span></span><br><span class="line">alert(<span class="built_in">Number</span>.MIN_VALUE);<span class="comment">//5e-324</span></span><br></pre></td></tr></table></figure><ul><li><p>infinity: 无穷大 (超过 Number 的范围)</p></li><li><p>-infinity：无穷小</p></li><li><p>NaN(Not a number)：非数值 (例如一个字符串减去一个数字)</p></li><li><p>isNAN() 判断是否为非数字，是数字返回 false，非数字返回 true</p></li></ul><h4 id="字符串 -String"><a href="# 字符串 -String" class="headerlink" title="字符串 (String)"></a> 字符串(String)</h4><ul><li>单引号双引号皆可，推荐单引号</li><li>字符串的嵌套：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'菜鸟" 小铭 "学习 JavaScript'</span>;</span><br></pre></td></tr></table></figure><ul><li>转义符号 “\”, 转义字符要写在引号里面</li></ul><h5 id="字符串属性"><a href="# 字符串属性" class="headerlink" title="字符串属性"></a>字符串属性</h5><ul><li>检测字符串长度：length 属性</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'noobxiaoming'</span>;</span><br><span class="line">colsole.log(str.length);</span><br></pre></td></tr></table></figure><ul><li>字符串拼接：+</li><li>+ 会将所有的其他类型转换成字符串类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'xiaoming'</span> , num = <span class="number">2333</span>;</span><br><span class="line">conlsole.log(str+num);</span><br><span class="line"><span class="comment">// 输出结果 xiaoming2333 (字符串型)</span></span><br></pre></td></tr></table></figure><h4 id="其他数据类型"><a href="# 其他数据类型" class="headerlink" title="其他数据类型"></a>其他数据类型</h4><ul><li><p>布尔型(Boolean)</p><ul><li>true 在参与计算时当作 1 (false 当 0)</li></ul></li><li><p>未定义的(undefined)</p><ul><li>没有赋初值的类型</li><li>undefined + 数字 = NaN</li><li>undefined + 字符串 = undefined 字符串</li></ul></li><li><p>空值(null)</p><ul><li>null + 1 = 1</li></ul></li></ul><h3 id="获取数据类型"><a href="# 获取数据类型" class="headerlink" title="获取数据类型"></a>获取数据类型</h3><ul><li>关键字：typeof</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);</span><br></pre></td></tr></table></figure><ul><li><p><span style="background: yellow;">在数据类型为 null 时，typeof 检测的数据为 object (对象)</span></p><ul><li>数据类型特例：</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = prompt(<span class="string">'请输入年龄'</span>);</span><br><span class="line"><span class="comment">// 这里输入 18</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> age);</span><br><span class="line"><span class="comment">// 这里输出 String 类型</span></span><br></pre></td></tr></table></figure><ul><li><span style="background: yellow;">prompt 取得的值是字符型的</span></li></ul><h4 id="通过控制台获取数据类型"><a href="# 通过控制台获取数据类型" class="headerlink" title="通过控制台获取数据类型"></a>通过控制台获取数据类型</h4><ul><li>数字型：蓝色</li><li>字符型：黑色</li><li>布尔型：深蓝色</li><li>bool 和 null：浅灰色</li></ul><h3 id="数据类型转换"><a href="# 数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换 </h3><h4 id="转换成字符串型"><a href="# 转换成字符串型" class="headerlink" title="转换成字符串型"></a> 转换成字符串型</h4><table><thead><tr><th>方式</th><th>默认值</th></tr></thead><tbody><tr><td>.toString()</td><td>转换成字符串</td></tr><tr><td>String()</td><td>强制转换成字符串</td></tr><tr><td>+</td><td><strong>拼接结果为字符串(隐式转换)</strong></td></tr></tbody></table><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>(num));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">''</span> + num);</span><br></pre></td></tr></table></figure><h4 id="转换成数字型"><a href="# 转换成数字型" class="headerlink" title="转换成数字型"></a>转换成数字型</h4><table><thead><tr><th>方式</th><th>默认值</th></tr></thead><tbody><tr><td>parseInt(string)</td><td>string 转换成 int</td></tr><tr><td>parseFloat(string)</td><td>string 转换成 float</td></tr><tr><td>Number()</td><td>强制转换成数值型</td></tr><tr><td>- * /</td><td>计算结果为数字（隐式转换）</td></tr></tbody></table><ul><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'2020'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str));</span><br><span class="line"><span class="comment">// 减号方法</span></span><br><span class="line"><span class="built_in">console</span>.log(str - <span class="number">0</span>);<span class="comment">// 字符型隐式转换为数字型</span></span><br><span class="line"><span class="built_in">console</span>.log(str * <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str / <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str - <span class="string">'20'</span>);<span class="comment">// 结果为 2000</span></span><br></pre></td></tr></table></figure><ul><li>如果字符串里后面有单位(首个必须是数字，后面可以是字母)，parseInt 和 parseFloat 会自动把单位去掉</li><li>如果前后都有字母，parseInt 和 parseFloat 会返回 NaN</li><li>例如：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unit = <span class="string">'120px'</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc123abc'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(unit));</span><br><span class="line"><span class="comment">// 输出 120</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str));</span><br><span class="line"><span class="comment">// 输出 NaN</span></span><br></pre></td></tr></table></figure><h4 id="布尔型转换"><a href="# 布尔型转换" class="headerlink" title="布尔型转换"></a>布尔型转换</h4><ul><li>Boolean() 函数</li><li>把 ‘’，0，NaN，null，undefined 为 false</li><li>代码示例：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">''</span>));</span><br><span class="line"><span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104685255" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104685255</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《Head First HTML 与 CSS》3</title>
      <link href="/archives/c10fa92e.html"/>
      <url>/archives/c10fa92e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇笔记主要介绍《Head First HTML 与 CSS》有关 CSS 入门、增加字体和盒模型的部分</p></blockquote><a id="more"></a><h1 id="CSS 入门"><a href="#CSS 入门" class="headerlink" title="CSS 入门"></a>CSS 入门 </h1><h2 id="把 CSS 放入 HTML"><a href="# 把 CSS 放入 HTML" class="headerlink" title="把 CSS 放入 HTML"></a> 把 CSS 放入 HTML</h2><ul><li>示例代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 在此处添加 css */</span></span></span><br><span class="line">        p&#123;</span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>CSS 书写格式</p><ul><li>在属性和相应值之间有一个冒号</li><li>最后要加一个分号</li><li>可去除换行写在一行</li><li>整个称为一个规则</li></ul></li><li><p>改变文本颜色是 color 属性，而没有 texcolor 属性</p></li><li><p>要为多个元素编写一个规则，只要在选择器之间加上逗号</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">    <span class="comment">/* 在标题下增加下划线 */</span></span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>若用 underline 样式增加下划线，下划线只会出现在文本下边。而使用 border-buttom 的方式，下划线会延伸到页面边缘</li></ul><h2 id="通过图解研究选择器"><a href="# 通过图解研究选择器" class="headerlink" title="通过图解研究选择器"></a>通过图解研究选择器</h2><img data-src="/archives/c10fa92e/image-20200719153934588.png" class><h2 id="链接到外部样式表"><a href="# 链接到外部样式表" class="headerlink" title="链接到外部样式表"></a>链接到外部样式表</h2><ul><li>示例代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../xxx.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>rel 属性指定了 HTML 文件与所链接的文件之间的关系。要链接到一个样式表，所以使用值 stylesheet</li><li><code>&lt;link&gt;</code>是一个 void 元素，没有结束标记</li></ul><h2 id="来谈谈继承"><a href="# 来谈谈继承" class="headerlink" title="来谈谈继承"></a>来谈谈继承</h2><ul><li>元素可以从它的父元素继承样式，<label style="color:red">不是所有元素都能继承</label>，只有一部分能继承，如 font-family</li><li>继承工作原理</li></ul><img data-src="/archives/c10fa92e/image-20200719162130277.png" class><ul><li><p>若把 font-family 属性上移到<code>&lt;body&gt;</code>，那它的所有子元素都会继承这个属性</p></li><li><p>可是，如果不希望每个 <code>&lt;body&gt;</code> 的子元素都继承同样的字体属性呢？可以用一个特定的规则来 <label style="color:red"> 覆盖继承</label></p><img data-src="/archives/c10fa92e/image-20200719162905214.png" class></li><li><p>对于 css，总会使用 <code> 最特定 </code> 的那个规则，后面讨论哪个规则最特定</p></li><li><p>一般来讲，如果样式会影响你的文本外观，这样的样式都能继承，如颜色、字体。其他属性不能继承，如边框</p></li></ul><h2 id="创建一个类选择器"><a href="# 创建一个类选择器" class="headerlink" title="创建一个类选择器"></a>创建一个类选择器</h2><ul><li><p>把元素加到一个类，例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"greentea"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个类选择器，例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.greentea</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><img data-src="/archives/c10fa92e/image-20200719164321079.png" class><ul><li>如果仍然没有一个明确的赢家，要使用 CSS 文件中最后列出的规则（最靠后）</li></ul><img data-src="/archives/c10fa92e/image-20200719164740026.png" class><h1 id="增加字体和颜色模式"><a href="# 增加字体和颜色模式" class="headerlink" title="增加字体和颜色模式"></a>增加字体和颜色模式</h1><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">font-family</td><td align="center">字体系列</td></tr><tr><td align="center">font-size</td><td align="center">字体大小</td></tr><tr><td align="center">color</td><td align="center">文本颜色</td></tr><tr><td align="center">font-weight</td><td align="center">字体粗细</td></tr><tr><td align="center">text-decoration</td><td align="center">文本风格</td></tr></tbody></table><h2 id="字体系列"><a href="# 字体系列" class="headerlink" title="字体系列"></a>字体系列</h2><ul><li>每个 font-family 包含一组有共同特征的字体。共有 5 个字体系列：sans-serif，serif，monospace，cursive 和 fantasy。每个字体系列都包括大量字体，在页面上看到的只是每个字体系列中很少的几个字体例子。</li></ul><h3 id="使用 CSS 指定字体系列"><a href="# 使用 CSS 指定字体系列" class="headerlink" title="使用 CSS 指定字体系列"></a>使用 CSS 指定字体系列</h3><img data-src="/archives/c10fa92e/image-20200729185643450.png" class><ul><li>利用 font-family 属性，可以创建一个首选字体列表。我们希望大多数浏览器都能有你的第一个选择，不过，如果没有，至少可以确保浏览器能提供同一个字体系列中的一个通用字体。</li><li>若字体名字有空格，则需加上双引号。</li><li>sans-serif 和 serif 字体最全面通用。</li></ul><h3 id="引入 web 字体"><a href="# 引入 web 字体" class="headerlink" title="引入 web 字体"></a>引入 web 字体</h3><ul><li><p>web 字体如何工作</p><ol><li>要利用 web 字体，浏览器首先获取一个引用这些字体的 html 页面。</li><li>浏览器在获取这个页面所需的 web 文件。</li><li>现在，获取了字体后，浏览器显示页面时就会使用这个字体。</li></ol></li><li><p>如果你只是要测试字体，实际上可以把这些字体作为本地文件，存储在你自己的文件系统中并引用（就像存储和引用本地图像一样）。不过，如果你想为 Web 上的用户提供字体，就必须把这些文件放在一个服务器上，或者利用一个托管服务，如 Google 的字体托管跟务，这是免费的。</p></li><li><p>如何为页面增加 web 字体</p><ol><li>找的一个字体</li><li>确保有所需字体的所有格式</li><li>把你的字体文件放在 web 上</li><li>在 CSS 中添加 @font-face 属性</li></ol><img data-src="/archives/c10fa92e/image-20200729191748646.png" class><p>   5. 在 CSS 中使用 font-family 名</p><p>   6. 加载页面</p></li><li><p><code>@font-face</code>是一个内置 CSS 规则，而不是一个选择器规则。其他两个常用的内置规则：<code>@import</code>允许导入其他 CSS 文件（而不是 HTML 中通过一个 <code>&lt;link&gt;</code> 链入），另外 <code>@media</code> 允许创建特定于某些“媒体”类型的 CSS 规则，如印刷页、来面屏幕或手机。</p></li><li><p>托管字体服务 <a href="http://www.fontsquirrel.com/" target="_blank" rel="external nofollow noopener noreferrer">FonsSqpird</a>   <a href="http://www.google.com/webfonts" target="_blank" rel="external nofollow noopener noreferrer">Google Web 字体服务</a></p></li></ul><h2 id="调整字体大小"><a href="# 调整字体大小" class="headerlink" title="调整字体大小"></a>调整字体大小</h2><ul><li>px 按像素明确指定字体具体大小</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>% 用百分号指定字体大小时，会相对于父元素字体大小指定这个字体有多大</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="comment">/* 相对于父元素的 150%，h1 字体大小为 21px*/</span></span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">150%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>em 用 em 指定字体大小与百分数类似，会相对于父元素字体大小指定这个字体大小</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="comment">/* 相对于父元素的 1.2 倍，h2 字体大小为 17px*/</span></span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">1.2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关键字 可以把一个字体大小指定为 xx-small,x-small,small,medium,large,x-large 或 xx-large, 浏览器会把这些关键字转换为像素值，它会使用浏览器中定义的默认值来完成这个转换。</li></ul><blockquote><p>那么，我到底该如何指定字体大小呢？<br>1. 选择一个关键字（推荐 small 或 medium），指定它作为 body 规则中的字体大小。这相当于页面的默认字体大小。<br>2. 使用 em 或百分数，相对于 body 字体大小指定其他元素的字体大小（选择 em 还是百分数由你决定，因为实际上这两种方法作用是一样的）。</p></blockquote><ul><li>如果没有指定自已大小，大多数情况下，浏览器默认字体大小为 16px。默认地，<code>&lt;h4&gt;</code>标题与 body 字体大小相同。</li></ul><h2 id="改变字体粗细"><a href="# 改变字体粗细" class="headerlink" title="改变字体粗细"></a>改变字体粗细</h2><ul><li><code>font-weight</code>控制文本粗细</li><li><code>font-weight:bold;</code>设置粗体</li><li><code>font-weight:normal;</code>去掉粗体样式</li><li>另外两个属性 <code>bolder</code> 和<code>lighter</code>会相对于所继承的值使文本样式稍粗一些或者稍细一些。这很少使用，因为没有多少字体支持粗细程度的细微差异，所以这两个值通常没有效果。</li><li>还可以把 font-weight 属性设置为 100 到 900 之间的一个数（100 的倍数），不过同样的，这个特性也未得到字体和浏览器的广泛支持，所以通常并不使用。</li></ul><h2 id="为字体增加风格"><a href="# 为字体增加风格" class="headerlink" title="为字体增加风格"></a>为字体增加风格</h2><ul><li>斜体风格 <code>font-style:italic;</code>或者<code>font-style:oblique;</code>。这两种风格看起来一样，除非确实非得区分斜体和倾斜文本，这对你非常重要，否则完全可以任选一种使用。</li></ul><h2 id="为字体增加颜色"><a href="# 为字体增加颜色" class="headerlink" title="为字体增加颜色"></a>为字体增加颜色</h2><ul><li><p><code>color</code>属性可以改变字体颜色。 </p></li><li><p>红绿蓝按不同比例组合成各种颜色。</p></li><li><p><strong>按颜色名指定颜色</strong>  CSS 大约定义了 150 个颜色名，如”red”、”green”、”blue”等。颜色名不区分大小写。</p></li><li><p><strong>用红绿蓝值指定颜色</strong>  </p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">80%</span>,<span class="number">40%</span>,<span class="number">0%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgb</span>(<span class="number">204</span>,<span class="number">102</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>使用十六进制码指定颜色</strong>  每组 2 位数字分别代表红绿蓝分量，如果每一组分量中两位数字都相同，可以简写。例加，#ccbb00 可以缩写为 #cb0，或者#11eeaa 可以缩写为#1ea。不过，加果十六进制码是#ccbb10，则不能使用缩写。</li></ul><h2 id="增加文本装饰"><a href="# 增加文本装饰" class="headerlink" title="增加文本装饰"></a>增加文本装饰</h2><ul><li><code>text-decoration</code>属性可以增加文本装饰。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="comment">/* 为 &lt;em&gt; 元素添加删除线 */</span></span><br><span class="line">    <span class="attribute">text-decoration</span>:line-through;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="comment">/* 一次可以设置多个装饰，为 &lt;em&gt; 元素添加下划线和上划线 */</span></span><br><span class="line">    <span class="attribute">text-decoration</span>:underline overline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="comment">/* 如果文本继承了不想要的装饰，可以使用”none“来删去装饰 */</span></span><br><span class="line">    <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果 <code>&lt;em&gt;</code> 有两个不同规则，一个指定上划线，一个指定下划线，它们不会累加。只有在同一个 <code>text-decoration</code> 声明中同时指定，才会得到两个装饰。</p></li><li><p>HTML 的 <code>&lt;del&gt;</code> 标签表示一些被从文档中删除的文字内容。比如可以在需要显示修改记录或者源代码差异的情况使用这个标签。这个标签通常（但不一定要）在文字上显示删除线。</p></li><li><p><code>&lt;ins&gt;</code>标签表示文档中添加的内容。这个标签通常（但不一定要）在文字上显示下划线。</p></li></ul><img data-src="/archives/c10fa92e/image-20200801110239295.png" class>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
            <tag> 《Head First HTML与CSS》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 与 CSS 学习 4</title>
      <link href="/archives/f89a1bea.html"/>
      <url>/archives/f89a1bea.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML 与 CSS 学习 4"><a href="#HTML 与 CSS 学习 4" class="headerlink" title="HTML 与 CSS 学习 4"></a>HTML 与 CSS 学习 4</h1><blockquote><p>这篇笔记主要讲了 CSS 快捷键的使用方法，复合选择器，块元素，行内元素，CSS 背景，CSS 层叠性、继承性和优先级 <br> 这篇笔记是初学者写下的笔记，如有错误，欢迎前来指正。</p></blockquote><a id="more"></a><h2 id="Emmet 语法 - 快捷键"><a href="#Emmet 语法 - 快捷键" class="headerlink" title="Emmet 语法 (快捷键)"></a>Emmet 语法(快捷键)</h2><h3 id="快速生成 HTML 结构语法"><a href="# 快速生成 HTML 结构语法" class="headerlink" title="快速生成 HTML 结构语法"></a> 快速生成 HTML 结构语法</h3><ul><li><p>生成多个相同标签，标签名 *3 (注，中间不要有空格)</p></li><li><p>父子级标签 例：ul 和 li 可以写 ul&gt;li</p><ul><li>兄弟关系用 +</li></ul></li><li><p>可以直接 .nav ，生成<code>&lt;div class=&quot;nav&quot;&gt;&lt;/div&gt;</code></p><ul><li>. 可以换# 生成 id 标签</li><li>可以更换其他标签，例：p.one 生成<code>&lt;p class=&quot;one&quot;&gt;&lt;/p&gt;</code></li></ul></li><li><p>生成类名有顺序 .demo$*5</p><ul><li>注：$ 从 1 开始排序</li></ul></li><li><p>生成标签内容带默认文字 例：div{默认文字}</p></li></ul><blockquote><p>示例：5 个 div 标签，里面从 1 到 5，属性 class 从 demo1 到 demo5</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.demo$&#123;$&#125;*5</span><br></pre></td></tr></table></figure><h3 id="快速生成 CSS 样式语法"><a href="# 快速生成 CSS 样式语法" class="headerlink" title="快速生成 CSS 样式语法"></a>快速生成 CSS 样式语法</h3><ul><li>tac 可以快速生成<code>test-align: center;</code></li><li>基本上都是首字母 + 参数</li></ul><h3 id="快速格式化代码"><a href="# 快速格式化代码" class="headerlink" title="快速格式化代码"></a>快速格式化代码</h3><ul><li><p>快捷键 Shift+Alt+f</p></li><li><p>为了方便操作，在保存时自动格式化代码 (VScode)</p><ol><li>文件 -&gt; 首选项 -&gt; 设置</li><li>搜索 emmet.include</li><li>在 setting.json 的用户下添加下列语句</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">"editor.formatOnType":true,</span><br><span class="line">"editor.formatOnSave":true</span><br></pre></td></tr></table></figure></li></ul><h2 id="CSS 复合选择器"><a href="#CSS 复合选择器" class="headerlink" title="CSS 复合选择器"></a>CSS 复合选择器</h2><ul><li>复合选择器就是基础选择器结合而成的</li><li>包括：后代选择器，子选择器，并集选择器，伪类选择器</li></ul><h3 id="后代选择器 -※"><a href="# 后代选择器 -※" class="headerlink" title="后代选择器 ※"></a>后代选择器 ※</h3><ul><li>又称包含选择器，可以选择父元素里的子元素</li><li>例，选择所有 ol 标签里的 li 都更改属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="comment">/* 选择 ol 里的所有 li 元素 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>中间用空格隔开</p></li><li><p>更改的是后代的 (只要是后代都可以被选中，无论几代) 样式</p></li><li><p>对同名标签的区分</p><ul><li>对一个标签添加 class 属性</li><li>.class 属性 + 后代名</li><li>注：中间的过程标签可以省略</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">      color: pink;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>pink<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="子选择器"><a href="# 子选择器" class="headerlink" title="子选择器"></a>子选择器</h3><ul><li>选择离得最近的子元素</li><li>元素 1&gt; 元素 2 {样式声明}</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  ul&gt;li &#123;</span><br><span class="line">      color: pink;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>会变粉 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 不会变粉<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>元素 1 是父元素，元素 2 是子元素</li><li>只能选择离得最近的子元素(不包括几代之后的元素)</li></ul><h3 id="并集选择器 -※"><a href="# 并集选择器 -※" class="headerlink" title="并集选择器 ※"></a>并集选择器 ※</h3><ul><li>可以选择多组标签，样式相同，来集体声明</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  div,</span><br><span class="line">  p &#123;</span><br><span class="line">      color: pink;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>会变粉 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 会变粉<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>用逗号隔开，逗号可以理解为和的意思</p></li><li><p>任何样式选择器都可以作为并集选择器的一部分</p></li><li><p>语法规范：并集选择器的标签要竖着写</p></li></ul><h3 id="伪类选择器"><a href="# 伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><ul><li>给选择器添加特殊效果</li><li>语法 : + 元素</li></ul><h4 id="链接伪类选择器"><a href="# 链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h4><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>a:link</td><td>选择所有未被访问的链接</td></tr><tr><td>a:visited</td><td>选择所有已被访问的链接</td></tr><tr><td>a:hover</td><td>选择鼠标指针位于其上链接</td></tr><tr><td>a:active</td><td>选择活动链接 (鼠标按下未抬起的链接)</td></tr></tbody></table><blockquote><p>小知识：未选择链接经常使用的颜色 #333</p></blockquote><h4 id="链接伪类的注意事项"><a href="# 链接伪类的注意事项" class="headerlink" title="链接伪类的注意事项"></a>链接伪类的注意事项</h4><ul><li><p>为了确保生效，要按照 link-&gt;visited-&gt;hover-&gt;active 的顺序声明</p></li><li><p>链接和标题标签一样，都要单独指定样式</p></li><li><p>开发中经常的写法：</p><ul><li>先给 a 写一个样式</li><li>然后在给 hover(经过的时候)写一个样式(蓝色 + 下划线)</li></ul></li></ul><h4 id="focus 伪类选择器"><a href="#focus 伪类选择器" class="headerlink" title=":focus 伪类选择器"></a>:focus 伪类选择器</h4><ul><li>选取获得焦点 (光标) 的表单元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">      background-color: pink;</span><br><span class="line"><span class="css">      <span class="comment">/* 谁获得了光标，就改变谁的背景色 */</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS 元素显示模式"><a href="#CSS 元素显示模式" class="headerlink" title="CSS 元素显示模式"></a>CSS 元素显示模式 </h2><h3 id="元素的显示模式"><a href="# 元素的显示模式" class="headerlink" title="元素的显示模式"></a> 元素的显示模式</h3><ul><li>元素 (标签) 以什么方式显示，例如 <code>&lt;div&gt;</code> 独自占一行</li><li>分类：块元素，行内元素</li></ul><h4 id="块元素"><a href="# 块元素" class="headerlink" title="块元素"></a>块元素</h4><ul><li><p>包括：<code>&lt;h1&gt;,&lt;p&gt;,&lt;div&gt;,&lt;ul&gt;,&lt;ol&gt;,&lt;li&gt;</code>, 其中 <code>&lt;div&gt;</code> 是最典型的块元素</p></li><li><p>特点：</p><ol><li>自己独占一行</li><li>可以设置高度宽度及内外边距</li><li>宽度默认和容器 (父级宽度) 一样宽</li><li>是一个容器及盒子，里面可以放其他元素</li></ol></li><li><p>注意：文字类的块元素不允许放其他元素, 例如 <code>&lt;p&gt;</code> 和<code>&lt;h1&gt;</code></p></li></ul><h4 id="行内元素 - 内联元素"><a href="# 行内元素 - 内联元素" class="headerlink" title="行内元素 (内联元素)"></a> 行内元素(内联元素)</h4><ul><li><p>包括：<code>&lt;a&gt;,&lt;strong&gt;,&lt;body&gt;,&lt;em&gt;,&lt;span&gt;...</code></p></li><li><p>特点：</p><ol><li>一行可以显示多个行内元素</li><li>直接设置宽度高度设置无效</li><li>默认宽度为内容的宽度</li><li>行内元素，只能容纳文本或行内元素</li></ol></li><li><p>注意：</p><ol><li>链接里面不能再放链接元素</li><li>特殊链接 <code>&lt;a&gt;</code> 里面可以放块级元素，但是要给 <code>&lt;a&gt;</code> 转化一下块级模式 (下面元素模式转换有写)</li></ol></li></ul><h4 id="行内块元素"><a href="# 行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><ul><li><p>特殊元素：<code>&lt;img /&gt;,&lt;input /&gt;,&lt;td&gt;</code>同时具有块元素和行内元素的特点，称为行内块元素</p></li><li><p>特点：</p><ol><li>一行可以有多个行内块元素，但中间有空白缝隙</li><li>默认宽度是内容的宽度</li><li>高度，行高，外边距以及内边距都可以控制</li></ol></li></ul><h4 id="元素总结"><a href="# 元素总结" class="headerlink" title="元素总结"></a>元素总结</h4><table><thead><tr><th>元素名</th><th>特点</th></tr></thead><tbody><tr><td>块元素</td><td>可以指定大小，独占一行</td></tr><tr><td>行内元素</td><td>不能指定大小，一行可以放多个</td></tr><tr><td>行内块元素</td><td>可以指定大小，一行可以放多个，大小由内容来决定</td></tr></tbody></table><h4 id="元素显示模式的转换"><a href="# 元素显示模式的转换" class="headerlink" title="元素显示模式的转换"></a>元素显示模式的转换</h4><ul><li><p>一种元素需要另外一种元素的特性</p></li><li><p>例如增加 a 的触发范围 (使一个行内元素有块元素的性质)</p><ul><li>在 CSS 里面添加 <code>display: bolck</code> 转化块元素：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  a &#123;</span><br><span class="line">      width: 150px;</span><br><span class="line">      height: 50px;</span><br><span class="line">      display: block;</span><br><span class="line"><span class="css">      <span class="comment">/* 这句话把 a 标签转化为块元素 */</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#"</span>&gt;</span>我是块元素<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 CSS 里面添加 <code>display: inline</code> 转化为行内元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  div &#123;</span><br><span class="line">      display: inline;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是行内元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 CSS 里添加 <code>display: inline-block</code> 转化为行内块元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  span &#123;</span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 30px;</span><br><span class="line">      display: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我既可以指定大小，又可以一行放多个<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="snipaste 工具的使用"><a href="#snipaste 工具的使用" class="headerlink" title="snipaste 工具的使用"></a>snipaste 工具的使用</h3><ul><li>一个截图工具，兼具取色的功能</li><li>F1 截图，F3 置顶，Alt 取色</li></ul><h3 id="课堂案例"><a href="# 课堂案例" class="headerlink" title="课堂案例"></a>课堂案例</h3><ul><li><p>侧边栏的效果：<br>[外链图片转存失败, 源站可能有防盗链机制, 建议将图片保存下来直接上传(img-HczfYLVF-1581249072737)(image/xiaomi_drawer.png)]</p></li><li><p>代码实现在 &lt;demo5.html&gt; 中</p></li></ul><blockquote><p>小知识：在 li 中垂直居中 <br> 只要行高和盒子高相等，然后就垂直居中了 <br> 代码 <code>line-height: 40px</code><br>行高小于盒子高度，文字会偏上 <br> 行高大于盒子高度，文字则偏下</p></blockquote><h2 id="CSS 的背景"><a href="#CSS 的背景" class="headerlink" title="CSS 的背景"></a>CSS 的背景</h2><ul><li>背景颜色，背景图片，背景平铺，背景图片位置，背景图像固定</li></ul><h3 id="背景颜色"><a href="# 背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><ul><li>定义背景颜色：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color: transparent | color;</span><br></pre></td></tr></table></figure><ul><li>transparent：背景色透明 (默认值)</li><li>color：颜色</li></ul><h3 id="背景图片"><a href="# 背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><ul><li>定义背景图片场景：logo，装饰性小图片，超大图片</li><li>优点：便于控制位置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">background-image: none | url();</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>();</span><br><span class="line"><span class="comment">/* 不要忘记 url() */</span></span><br></pre></td></tr></table></figure><ul><li>none：无背景图 (默认值)</li><li>url()：使用绝对地址或相对地址指定图片</li></ul><h3 id="背景平铺"><a href="# 背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h3><ul><li>定义背景平铺：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-repeat: repeat | no-repeat | repeat-x | repeat-y;</span><br></pre></td></tr></table></figure><ul><li>repeat-x：沿 x 轴平铺(横向)</li><li>背景图片在背景颜色之上</li></ul><h3 id="背景图片位置 - 重要"><a href="# 背景图片位置 - 重要" class="headerlink" title="背景图片位置 重要"></a>背景图片位置 <strong>重要</strong></h3><ul><li>背景图片位置属性：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">x</span> <span class="selector-tag">y</span>;</span><br><span class="line"><span class="comment">/* 一共两个参数 x 和 y */</span></span><br></pre></td></tr></table></figure><p>参数表：</p><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length(精确位置)</td><td>百分数 | 由浮点数值和单位标识符 (px) 组成的长度值</td></tr><tr><td>position(方位名词)</td><td>top</td></tr></tbody></table><ul><li><p>方位名词：</p><ol><li>第一个参数是 x 轴方向，第二个参数是 y 轴方向</li><li>参数没有顺序</li><li>只声明一个参数，默认另一个为 center</li></ol></li><li><p>背景图片适合超大图片，背景图片适合水平居中</p></li></ul><h4 id="背景图片精确位置"><a href="# 背景图片精确位置" class="headerlink" title="背景图片精确位置"></a>背景图片精确位置</h4><ul><li>第一个参数为 x 坐标，第二个为 y 坐标</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-position</span>: 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><ul><li>只指定一个值，另一个值默认垂直居中</li><li>精确单位 (数值) 和文字单位可以混合使用，但一定要注意参数顺序</li></ul><h3 id="背景图像固定"><a href="# 背景图像固定" class="headerlink" title="背景图像固定"></a>背景图像固定</h3><ul><li>把图片固定在网页上，用来做视差滚动</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-attachment: scroll | fixed;</span><br></pre></td></tr></table></figure><ul><li>scroll：背景图像滚动 (默认值)</li><li>fixed：背景图像固定</li></ul><h3 id="背景图片复合写法"><a href="# 背景图片复合写法" class="headerlink" title="背景图片复合写法"></a>背景图片复合写法</h3><ul><li>和字体一样有复合写法，但是背景图片参数没有顺序</li><li>下面是推荐书写的顺序：</li><li>注意: 背景图片地址为：url()</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: 背景颜色 | 背景图片地址 | 背景平铺 | 背景图片滚动 | 背景图片位置 ;</span><br></pre></td></tr></table></figure><h3 id="背景色半透明"><a href="# 背景色半透明" class="headerlink" title="背景色半透明"></a>背景色半透明</h3><ul><li>代码示例</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.3</span>);</span><br></pre></td></tr></table></figure><ul><li>a 为透明度，取值范围[0,1]</li><li>可以省略透明度前面的 0，例 0.3 -&gt; .3</li></ul><h2 id="CSS 三大特性"><a href="#CSS 三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性 </h2><h3 id="层叠性"><a href="# 层叠性" class="headerlink" title="层叠性"></a> 层叠性</h3><ul><li>对同一个选择器选择相同样式不同的参数：</li><li>遵循就近原则，谁离标签近就执行哪个样式 (后来者居上)，但是不冲突的部分不会被覆盖</li></ul><h3 id="继承性"><a href="# 继承性" class="headerlink" title="继承性"></a>继承性</h3><ul><li>子标签会继承父标签的某些样式(可以继承的样式 text- ,font- ,line- ,color-)</li><li>在 F12 中可以看到 inherited from xxx</li></ul><h4 id="行高的继承"><a href="# 行高的继承" class="headerlink" title="行高的继承"></a>行高的继承</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> <span class="string">"Microsoft YaHei"</span>;</span><br><span class="line">  <span class="comment">/* 字体大小 / 行高 字体 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行高可以没有单位</li><li>没有单位的意思是当前元素文字大小的 1.5 倍</li></ul><h3 id="优先级"><a href="# 优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>给同一个元素指定了多个选择器，就会有优先级产生</li><li>选择器相同，根据层叠性排序</li><li>权重排序：继承或 * -&gt; 元素选择器 -&gt; 类选择器，伪类选择器 -&gt; ID 选择器 -&gt; 行内样式 style=”” -&gt; !important 重要的</li></ul><table><thead><tr><th>参数值</th><th>权重</th></tr></thead><tbody><tr><td>继承或 *</td><td>0,0,0,0</td></tr><tr><td>元素选择器</td><td>0,0,0,1</td></tr><tr><td>类选择器，伪类选择器，子选择器</td><td>0,0,1,0</td></tr><tr><td>ID 选择器</td><td>0,1,0,0</td></tr><tr><td>行内样式 style=””</td><td>1,0,0,0</td></tr><tr><td>!important 重要的</td><td>无穷大</td></tr></tbody></table><ul><li>!important 使用方法 (优先级无穷大)：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>a 链接浏览器默认指定了一个样式，所以优先级和元素选择器一样(0,0,0,1)</li></ul><h4 id="权重叠加"><a href="# 权重叠加" class="headerlink" title="权重叠加"></a>权重叠加</h4><ul><li>复合选择器会出现权重叠加的问题</li><li>例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/* ul 和 li 的权重  0,0,0,1 + 0,0,0,1 = 0,0,0,2 */</span></span></span><br><span class="line">  ul li &#123;</span><br><span class="line">    color: green;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="comment">/* li 的权重  0,0,0,1 */</span></span></span><br><span class="line">  li &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="comment">/* .nav 和 li 的权重  0,0,1,0 + 0,0,0,1 = 0,0,1,1 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">    color: pink;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是绿色<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注：权重不会出现进位</li></ul><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104239642" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104239642</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 与 CSS 学习 9</title>
      <link href="/archives/862b6757.html"/>
      <url>/archives/862b6757.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML 与 CSS 学习 9"><a href="#HTML 与 CSS 学习 9" class="headerlink" title="HTML 与 CSS 学习 9"></a>HTML 与 CSS 学习 9</h1><blockquote><p>这篇文章主要讲了 CSS2D 和 3D 转换 动画 和浏览器私有前缀 <br> 这是初学者看这个视频写下的笔记，如有错误，欢迎指正</p></blockquote><a id="more"></a><h2 id="CSS-2D 转换 -transform"><a href="#CSS-2D 转换 -transform" class="headerlink" title="CSS 2D 转换 (transform)"></a>CSS 2D 转换 (transform)</h2><ul><li><p>CSS3 新特性</p></li><li><p>实现元素位移，旋转，缩放</p></li><li><p>网页的坐标系和数学里面的不太一样 Y 轴是向下的</p></li></ul><h3 id="移动 -translate"><a href="# 移动 -translate" class="headerlink" title="移动 (translate)"></a>移动 (translate)</h3><ul><li><p>和定位有点像</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(x,y);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(n);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>2d 转换的优点： 不会影响其他元素的位置</p></li><li><p>实例：图片向上浮动的效果</p></li><li><p>translate 移动百分比是相对于自身元素的大小 (结合定位方法的垂直居中使用 translate(-50%,-50%))</p></li><li><p>对行内标签没有效果</p></li></ul><h3 id="旋转 -rotate"><a href="# 旋转 -rotate" class="headerlink" title="旋转 (rotate)"></a>旋转 (rotate)</h3><ul><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">tranform</span>: <span class="built_in">rotate</span>(<span class="number">10deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意：rotate 里面是度数 单位是 deg</p></li><li><p>顺时针 正，逆时针 负</p></li><li><p>默认旋转中心是元素中心点</p></li></ul><h4 id="修改旋转中心点 -transform-origin"><a href="# 修改旋转中心点 -transform-origin" class="headerlink" title="修改旋转中心点 (transform-origin)"></a>修改旋转中心点 (transform-origin)</h4><ul><li><p>代码示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">transform-origin</span>: x y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意：参数 x 和 y 用空格隔开</p></li><li><p>默认旋转中心为中心点 (50%,50%)</p></li><li><p>可以使用方位名词</p></li></ul><h4 id="旋转练习"><a href="# 旋转练习" class="headerlink" title="旋转练习"></a>旋转练习</h4><ul><li>下拉三角的制作</li><li>代码样例:</li></ul><blockquote><p>感觉实际应用不会用这个，这个可以当作个练习</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  div &#123;</span><br><span class="line">      content: relative;</span><br><span class="line">      width: 150px;</span><br><span class="line">      height: 35px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">soild</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">      content: absolute;</span><br><span class="line">      width: 10px;</span><br><span class="line">      height: 10px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border-right</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">      transform: rotate(45deg);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>旋转更换文字的背景颜色显示效果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  div &#123;</span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 200px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">      overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">      content: '';</span><br><span class="line"><span class="css">      <span class="comment">/* 一定注意伪元素是行内块元素 */</span></span></span><br><span class="line">      display: block;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      background-color: skyblue;</span><br><span class="line">      transform-origin: left bottom;</span><br><span class="line">      transform: rotate(180deg);</span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">      transform: rotate(0deg);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="缩放 -scale"><a href="# 缩放 -scale" class="headerlink" title="缩放 (scale)"></a>缩放 (scale)</h3><ul><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(x,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意：其中的 x 和 y 用逗号分割</p></li><li><p>x 和 y 用数字，1 代表一倍，2 代表两倍</p></li><li><p>x 和 y 不加单位</p></li><li><p>如果只给一个参数，则宽度高度一起变</p></li><li><p>scale 的优势：</p><ul><li>正常修改宽高的话，高度会以顶边为基准</li><li>scale 不会影响其他盒子，且可以设置缩放的中心点</li></ul></li><li><p>修改缩放中心点和旋转的一样 (transform-origin)</p></li></ul><h4 id="缩放实例"><a href="# 缩放实例" class="headerlink" title="缩放实例"></a>缩放实例</h4><ul><li><p>鼠标经过一个盒子，会出现图片被放大的情况</p></li><li><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  div &#123;</span><br><span class="line">      float: left;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  div img &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.4</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">div</span> <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1<span class="selector-class">.1</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>分页按钮案例：每一个按钮鼠标经过时会放大</p></li><li><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  li &#123;</span><br><span class="line">      width: 30px;</span><br><span class="line">      height: 30px;</span><br><span class="line">      margin: 10px;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#999</span>;</span></span><br><span class="line">      text-align: center;</span><br><span class="line">      line-height: 30px;</span><br><span class="line">      list-style: none;</span><br><span class="line">      border-radius: 50%;</span><br><span class="line">      cursor: pointer;</span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.2s</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1<span class="selector-class">.2</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2D 效果综合写法"><a href="#2D 效果综合写法" class="headerlink" title="2D 效果综合写法"></a>2D 效果综合写法</h3><ul><li><p>代码示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>() <span class="built_in">rotate</span>() <span class="built_in">scale</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>属性中间用空格隔开</p></li><li><p>顺序会影响转换的效果</p></li><li><p>同时有位移或着其他效果时，位移要放到前面</p></li><li><p>两个属性是同时进行的 (属性开始有先后顺序)</p></li></ul><h2 id="CSS- 动画 -animation"><a href="#CSS- 动画 -animation" class="headerlink" title="CSS 动画 (animation)"></a>CSS 动画 (animation)</h2><ul><li>制作动画流程：<ol><li>先定义动画</li><li>在使用 (调用) 动画</li></ol></li></ul><h3 id="利用 keyframes 定义动画"><a href="# 利用 keyframes 定义动画" class="headerlink" title="利用 keyframes 定义动画"></a>利用 keyframes 定义动画</h3><ul><li><p>类似于定义类选择器</p></li><li><p>代码示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">    <span class="comment">/* 开始状态 */</span></span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 结束状态 */</span></span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>动画序列:</p><ul><li>0%：动画开始 (from)</li><li>100%：动画完成 (to)</li></ul></li><li><p>0% 和 100% 之间可以分成很多个部分</p></li><li><p>百分比是时间的划分</p></li></ul><h3 id="元素使用动画"><a href="# 元素使用动画" class="headerlink" title="元素使用动画"></a>元素使用动画</h3><ul><li><p>代码示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 调用动画 */</span></span><br><span class="line">    <span class="attribute">animation-name</span>: 动画名称;</span><br><span class="line">    <span class="comment">/* 持续时间 */</span></span><br><span class="line">    <span class="attribute">animation-duration</span>: 持续时间;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>注意：持续时间单位为秒</li></ul><h3 id="动画属性"><a href="# 动画属性" class="headerlink" title="动画属性"></a>动画属性</h3><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">animation-name</td><td align="center">动画名称 <strong>必须</strong></td></tr><tr><td align="center">animation-duration</td><td align="center">完成一个周期花费的时间 <strong>必须</strong></td></tr><tr><td align="center">animation-timing-function</td><td align="center">动画速度曲线，默认为 ease</td></tr><tr><td align="center">animation-delay</td><td align="center">动画延迟开始，默认为 0</td></tr><tr><td align="center">animation-iteration-count</td><td align="center">动画播放次数，无限循环 infinite</td></tr><tr><td align="center">animation-direction</td><td align="center">动画在下一周期是否逆向播放，默认 normal 逆向播放 alternate</td></tr><tr><td align="center">animation-play-state</td><td align="center">动画暂停，默认 running 暂停 paused</td></tr><tr><td align="center">animation-fill-mode</td><td align="center">动画结束后的状态，保持 forwards 回到起始 backwards</td></tr></tbody></table><h4 id="速度曲线细节"><a href="# 速度曲线细节" class="headerlink" title="速度曲线细节"></a>速度曲线细节</h4><table><thead><tr><th align="center">参数值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">linear</td><td align="center">匀速</td></tr><tr><td align="center">ease</td><td align="center">先快后慢</td></tr><tr><td align="center">ease-in</td><td align="center">以低速开始</td></tr><tr><td align="center">ease-out</td><td align="center">以低速结束</td></tr><tr><td align="center">ease-in-out</td><td align="center">以低速开始和结束</td></tr><tr><td align="center">steps()</td><td align="center">步长 <strong>重要！</strong></td></tr></tbody></table><ul><li>步长详解：<ul><li>动画从头走到尾需要多少步</li><li>效果就变得一帧一帧的了 (可以制作打字机效果)</li></ul></li></ul><h3 id="动画简写"><a href="# 动画简写" class="headerlink" title="动画简写"></a>动画简写</h3><ul><li><p>代码示范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反向 是否返回起始点;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>除了动画名称和持续时间剩下的都可以省略</p></li><li><p>注意：简写里面不包括 animation-play-state (暂停属性)</p></li></ul><h3 id="动画案例"><a href="# 动画案例" class="headerlink" title="动画案例"></a>动画案例</h3><ul><li><p>实现波纹的效果，可以用圆圈阴影从小变大实现</p></li><li><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.point</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 100px;</span><br><span class="line">        right: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.dotted</span> &#123;</span></span><br><span class="line">        width: 8px;</span><br><span class="line">        height: 8px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#09f</span>;</span></span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.point</span> <span class="selector-tag">div</span><span class="selector-attr">[class^=<span class="string">"wave"</span>]</span> &#123;</span></span><br><span class="line">        position: absolute;</span><br><span class="line"><span class="css">        <span class="comment">/* 让阴影盒子和圆点在同一位置 */</span></span></span><br><span class="line">        top: 50%;</span><br><span class="line">        left: 50%;</span><br><span class="line">        transform: translate(-50%);</span><br><span class="line">        width: 8px;</span><br><span class="line">        height: 8px;</span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 0 12<span class="selector-tag">px</span> <span class="selector-id">#009dfd</span>;</span></span><br><span class="line">        border-radius: 50%;</span><br><span class="line"><span class="css">        <span class="selector-tag">animation</span>: <span class="selector-tag">pulse</span> 1<span class="selector-class">.2s</span> <span class="selector-tag">linear</span> <span class="selector-tag">infinite</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.point</span> <span class="selector-tag">div</span><span class="selector-class">.wave1</span> &#123;</span></span><br><span class="line">        animation-delay: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.point</span> <span class="selector-tag">div</span><span class="selector-class">.wave2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">animation-delay</span>: <span class="selector-class">.4s</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.point</span> <span class="selector-tag">div</span><span class="selector-class">.wave3</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">animation-delay</span>: <span class="selector-class">.8s</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> pulse&#123;</span></span><br><span class="line">        0% &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        70% &#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="comment">/* 透明度 */</span></span></span><br><span class="line">            opacity: 1;</span><br><span class="line">        &#125;</span><br><span class="line">        100% &#123;</span><br><span class="line">            width: 70px;</span><br><span class="line">            height: 70px;</span><br><span class="line">            opacity: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"point"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dotted"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wave1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wave2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wave3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>波纹没有使用 scale 缩放属性：缩放会连带着阴影大小一块缩放，很不美观</p></li><li><p>百度浏览器熊跑步的效果</p></li><li><p>百度的熊是一张长图片上有好几张运动状态的熊，用 step 来弄，每一帧放一个熊上去</p></li><li><p>注意，图片往左走的时候是负值</p></li><li><p>元素可以添加多个动画，用逗号隔开 (在第一个动画后面加逗号)</p></li></ul><h2 id="CSS-3D 转换 -transform"><a href="#CSS-3D 转换 -transform" class="headerlink" title="CSS 3D 转换 (transform)"></a>CSS 3D 转换 (transform)</h2><ul><li>z 轴往外为正，往里为负</li></ul><h3 id="3D 位移 -translate3d"><a href="#3D 位移 -translate3d" class="headerlink" title="3D 位移 (translate3d)"></a>3D 位移 (translate3d)</h3><ul><li><p>可以沿着 z 轴方向移动</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 分别沿 xyz 轴移动 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="comment">/* 混合写法 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(x,y,z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>要是单个写的话注意后面的样式会覆盖前面的样式</p></li><li><p>但是可以这么写:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>), <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="comment">/* 推荐使用混合写法 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>混合写法时 xyz 不能省略，没有要写 0</p></li><li><p>只移动 z 轴看不到效果，得结合透视一起才有效果</p></li></ul><h3 id="透视 -perspective"><a href="# 透视 -perspective" class="headerlink" title="透视 (perspective)"></a>透视 (perspective)</h3><ul><li><p>想让网页中产生 3D 效果，需要透视</p></li><li><p>透视 == 视距，人眼到屏幕的距离 (近大远小)</p></li><li><p>透视要写在被观察元素的父盒子里</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 透视写在父盒子里 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3D 旋转 -rotate3d"><a href="#3D 旋转 -rotate3d" class="headerlink" title="3D 旋转 (rotate3d)"></a>3D 旋转 (rotate3d)</h3><ul><li><p>除了坐标轴外，还可以沿着自定义轴旋转</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="comment">/* 自定义轴 */</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(x,y,z,deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>rotate 是沿着图片中心旋转的</p></li><li><p>旋转方向判断: 左手准则</p><ul><li>左手沿着坐标轴正方向, 四指弯曲的方向就是旋转正方向</li></ul></li><li><p>使用的时候需要加透视才能看出 3d 效果</p></li><li><p>自定义轴: x,y,z 可以取 0 到 1, 表示是否希望沿这个轴旋转</p><ul><li>例如 x=1, y=1 就是沿着对角线旋转</li></ul></li></ul><h3 id="3D 呈现 -transform-style"><a href="#3D 呈现 -transform-style" class="headerlink" title="3D 呈现 (transform-style)"></a>3D 呈现 (transform-style)</h3><ul><li><p>控制子元素是否开启 3D 空间</p></li><li><p>代码示例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">transform-style</span>: flat | preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>flat: 默认值, 不开启 3D 空间</p></li><li><p>preserve-3d: 子元素开启 3D 空间</p></li><li><p>代码写在父盒子里</p></li></ul><h4 id="案例 1- 两面反转的盒子"><a href="# 案例 1- 两面反转的盒子" class="headerlink" title="案例 1: 两面反转的盒子"></a>案例 1: 两面反转的盒子</h4><ul><li><p>需求, 旋转之后颜色改变, 文字也改变</p></li><li><p>代码示例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line">      margin: 0 auto;</span><br><span class="line">      position: relative;</span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span>;</span></span><br><span class="line">      transform-style: preserve-3d;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.front</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.back</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      border-radius: 50%;</span><br><span class="line">      font-size: 30px;</span><br><span class="line">      text-align: center;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">      line-height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.front</span> &#123;</span></span><br><span class="line">      background-color: pink;</span><br><span class="line">      z-index: 1;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.back</span> &#123;</span></span><br><span class="line">      background-color: purple;</span><br><span class="line">      transform: rotateY(180deg);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      transform: rotateY(180deg);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"front"</span>&gt;</span>天王盖地虎 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back"</span>&gt;</span> 宝塔镇河妖<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>注意添加视距和 3D 呈现</li></ul><h4 id="案例 2-3D 导航栏"><a href="# 案例 2-3D 导航栏" class="headerlink" title="案例 2: 3D 导航栏"></a>案例 2: 3D 导航栏</h4><ul><li><p>代码示例:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  body &#123;</span><br><span class="line"><span class="css">      <span class="comment">/* 旋转需要旋转 box, 所以要给他的上一级写透视 */</span></span></span><br><span class="line">      perspective: 500px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">      position: relative;</span><br><span class="line">      width: 120px;</span><br><span class="line">      height: 35px;</span><br><span class="line">      transform-style: preserve-3d;</span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.front</span>,</span></span><br><span class="line"><span class="css">  <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      left: 0;</span><br><span class="line">      top: 0;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.front</span> &#123;</span></span><br><span class="line">      background-color: pink;</span><br><span class="line">      z-index: 1;</span><br><span class="line"><span class="css">      <span class="comment">/* 需要把这个盒子往前移, 这样才能保证沿 x 轴旋转的时候不变型 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">transform</span>: <span class="selector-tag">translateZ</span>(17<span class="selector-class">.5px</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line">      background-color: purple;</span><br><span class="line"><span class="css">      <span class="comment">/* 这里注意: 旋转一定是负值 */</span></span></span><br><span class="line"><span class="css">      <span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(17<span class="selector-class">.5px</span>) <span class="selector-tag">rotateX</span>(<span class="selector-tag">-90deg</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">      transform: rotateX(90deg);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"front"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>旋转时一定要注意, 盒子是区分前后的, 所以一定注意正负</li></ul><h3 id="案例：照片旋转木马"><a href="# 案例：照片旋转木马" class="headerlink" title="案例：照片旋转木马"></a>案例：照片旋转木马</h3><ul><li><p>展示实例(以后一定用到网页上)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        perspective: 1000px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    section &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin: 100px auto;</span><br><span class="line">        transform-style: preserve-3d;</span><br><span class="line">        animation: rotate 10s linear infinite;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    section div &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        background: url(image/background.jpg) no-repeat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span></span><br><span class="line">        transform: translateZ(300px);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span></span><br><span class="line">        transform: rotateY(60deg) translateZ(300px);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span></span><br><span class="line">        transform: rotateY(120deg) translateZ(300px);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span></span><br><span class="line">        transform: rotateY(180deg) translateZ(300px);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</span></span><br><span class="line">        transform: rotateY(240deg) translateZ(300px);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(6)</span> &#123;</span></span><br><span class="line">        transform: rotateY(300deg) translateZ(300px);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="keyword">@keyframes</span> rotate &#123;</span></span><br><span class="line">        0% &#123;</span><br><span class="line">            transform: rotateY(0);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        100% &#123;</span><br><span class="line">            transform: rotateY(360deg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-tag">section</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">        animation-play-state: paused;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>注意，这里要先旋转再移动，否则就会变成交叉再一块旋转</li></ul><h2 id="浏览器私有前缀"><a href="# 浏览器私有前缀" class="headerlink" title="浏览器私有前缀"></a>浏览器私有前缀</h2><ul><li>私有前缀为了兼容老版本的写法，新版无需添加</li><li>私有前缀：</li></ul><table><thead><tr><th align="center">参数值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">-moz-</td><td align="center">火狐(firebox)</td></tr><tr><td align="center">-ms-</td><td align="center">IE</td></tr><tr><td align="center">-webit-</td><td align="center">safari 或 chrome 属性</td></tr><tr><td align="center">-o-</td><td align="center">Opera 属性</td></tr></tbody></table><ul><li><p>圆角是有兼容问题</p></li><li><p>解决方法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">-moz-border-raidus</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-webkit-border-raidus</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-o-border-raidus</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104601947" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104601947</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 与 CSS 学习 8</title>
      <link href="/archives/f12c57c1.html"/>
      <url>/archives/f12c57c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML 与 CSS 学习 8"><a href="#HTML 与 CSS 学习 8" class="headerlink" title="HTML 与 CSS 学习 8"></a>HTML 与 CSS 学习 8</h1><blockquote><p>这篇笔记主要讲了 HTML5 和 CSS3 的新特性 <br>HTML5 新增了语义化标签，多媒体标签，input 表单<br>CSS3 新增了属性选择器，结构伪类选择器(child 类型，of-type 选择器)，伪元素选择器，不受 padding 和 margin 影响的盒子模型，类似动画的过渡属性，模糊属性，和执行计算函数<br> 这篇笔记是初学者写下的笔记，如有错误，欢迎前来指正</p></blockquote><a id="more"></a><h2 id="HTML5 新特性"><a href="#HTML5 新特性" class="headerlink" title="HTML5 新特性"></a>HTML5 新特性</h2><ul><li>有兼容性的问题，基本上在 IE9 以上才能使用</li></ul><h3 id="HTML5 新增语义化标签"><a href="#HTML5 新增语义化标签" class="headerlink" title="HTML5 新增语义化标签"></a>HTML5 新增语义化标签</h3><ul><li>终结了所有盒子都叫 div</li><li>新增标签：</li></ul><table><thead><tr><th align="center">标签</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><header></header></td><td align="center">头部标签</td></tr><tr><td align="center"><nav></nav></td><td align="center">导航标签</td></tr><tr><td align="center"><article></article></td><td align="center">内容标签</td></tr><tr><td align="center"><section></section></td><td align="center">定义文档某个区域</td></tr><tr><td align="center"><aside></aside></td><td align="center">侧边栏标签</td></tr><tr><td align="center"><footer></footer></td><td align="center">尾部标签</td></tr></tbody></table><ul><li>在 IE9 使用需要转化成块级元素</li></ul><h3 id="HTML5 新增的多媒体标签"><a href="#HTML5 新增的多媒体标签" class="headerlink" title="HTML5 新增的多媒体标签"></a>HTML5 新增的多媒体标签</h3><ul><li>音频：<audio></audio></li><li>视频：<video></video></li></ul><h4 id="视频标签 -video"><a href="# 视频标签 -video" class="headerlink" title="视频标签 (video)"></a>视频标签 (video)</h4><ul><li><p>只支持 mp4(<strong>支持的最多</strong>)，webm，ogg</p></li><li><p>语法规范：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"文件地址"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>属性值：</p></li></ul><table><thead><tr><th align="center">标签</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">autoplay</td><td align="center">autoplay</td><td align="center">视频自动播放 (google 浏览器禁用了这个属性)</td></tr><tr><td align="center">controls</td><td align="center">controls</td><td align="center">向用户展示播放控件</td></tr><tr><td align="center">width</td><td align="center">px(像素)</td><td align="center">设置播放器宽度</td></tr><tr><td align="center">height</td><td align="center">px(像素)</td><td align="center">设置播放器高度</td></tr><tr><td align="center">loop</td><td align="center">loop</td><td align="center">播放完成后是否循环播放</td></tr><tr><td align="center">preload</td><td align="center">auto(预加载视频) none(不预加载视频)</td><td align="center">是否预加载视频</td></tr><tr><td align="center">src</td><td align="center">url 地址</td><td align="center">视频 url 地址</td></tr><tr><td align="center">poster</td><td align="center">image(图片)</td><td align="center">加载等待画面图片</td></tr><tr><td align="center">muted</td><td align="center">muted</td><td align="center">静音播放</td></tr></tbody></table><ul><li>解决 Google 浏览器不能自动播放的问题，在 autoplay 的基础上添加 muted 属性 (muted=“muted”)</li><li>controls 一般用 js 解决</li></ul><h4 id="音频标签 -audio"><a href="# 音频标签 -audio" class="headerlink" title="音频标签 (audio)"></a>音频标签 (audio)</h4><ul><li><p>支持音频格式：mp3(<strong>支持的最多</strong>) ，wav，ogg</p></li><li><p>语法规范：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"文件地址"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="center">标签</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">autoplay</td><td align="center">autoplay</td><td align="center">音频自动播放 (google 浏览器也禁用了这个属性)</td></tr><tr><td align="center">controls</td><td align="center">controls</td><td align="center">向用户展示播放控件</td></tr><tr><td align="center">loop</td><td align="center">loop</td><td align="center">循环播放</td></tr><tr><td align="center">src</td><td align="center">url</td><td align="center">播放音频的位置</td></tr></tbody></table><ul><li>google 禁用音频只能通过 js 来解决</li></ul><h3 id="HTML5 新增 input 表单"><a href="#HTML5 新增 input 表单" class="headerlink" title="HTML5 新增 input 表单"></a>HTML5 新增 input 表单</h3><ul><li>input 新增的 type 属性值：</li></ul><table><thead><tr><th align="center">type 属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">email</td><td align="center">输入为 email 类型</td></tr><tr><td align="center">url</td><td align="center">url 类型</td></tr><tr><td align="center">date</td><td align="center">日期</td></tr><tr><td align="center">time</td><td align="center">时间</td></tr><tr><td align="center">month</td><td align="center">月</td></tr><tr><td align="center">week</td><td align="center">周</td></tr><tr><td align="center">number</td><td align="center">数字</td></tr><tr><td align="center">tel</td><td align="center">手机号码</td></tr><tr><td align="center">search</td><td align="center">搜索框</td></tr><tr><td align="center">color</td><td align="center">颜色选择表单</td></tr></tbody></table><ul><li><p>代码案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用时如果内容错误，点击提交的时候会报错</p></li></ul><h4 id="HTML5 新增表单属性"><a href="#HTML5 新增表单属性" class="headerlink" title="HTML5 新增表单属性"></a>HTML5 新增表单属性</h4><ul><li><p>语法规范：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">required</span>=<span class="string">"required"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="center">属性</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">required</td><td align="center">required</td><td align="center">表单拥有属性后不能为空，必填</td></tr><tr><td align="center">placeholder</td><td align="center">提示文本</td><td align="center">表单提示信息，存在默认值将不显示</td></tr><tr><td align="center">autofocus</td><td align="center">autofocus</td><td align="center">自动聚焦属性，页面加载完成后自动聚焦到指定表单</td></tr><tr><td align="center">autocomplete</td><td align="center">off / on</td><td align="center">在当用户成功提交过，下次搜索就可以自动填充，默认为 on，开发时改为 off</td></tr><tr><td align="center">multiple</td><td align="center">multiple</td><td align="center">可以多选文件提交(经常和 type=”file”使用)</td></tr></tbody></table><ul><li><p>required 同样在提交时报错</p></li><li><p>更改 placeholder 里文字的颜色：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<br>​    </p><h2 id="CSS3 新特性"><a href="#CSS3 新特性" class="headerlink" title="CSS3 新特性"></a>CSS3 新特性</h2><ul><li>兼容性：IE9 以上支持</li></ul><h3 id="CSS3 新增选择器"><a href="#CSS3 新增选择器" class="headerlink" title="CSS3 新增选择器"></a>CSS3 新增选择器</h3><ol><li>属性选择器</li><li>结构伪类选择器</li><li>伪类选择器</li></ol><h4 id="属性选择器"><a href="# 属性选择器" class="headerlink" title="属性选择器 []"></a>属性选择器 []</h4><ul><li><p>选择元素有某个属性的标签</p></li><li><p>注意：属性选择器权重为 10 (方括号内的才算属性选择器)</p></li><li><p>代码案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 选择 input 标签里有 value 属性的标签 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">input</span><span class="selector-attr">[value]</span> &#123;</span></span><br><span class="line">      color: skyblue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="comment">/* 选择 input 标签 value 属性为 select 的标签 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">input</span><span class="selector-attr">[value=<span class="string">"select"</span>]</span> &#123;</span></span><br><span class="line">      color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"select"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以选择属性值开头的某些元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选择那些 div 盒子里有 class 属性，且属性值以 icon 开头的元素 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=icon]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择某些属性值结尾的某些元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class$=icon]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择值里面有这个文字的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 只要是 class 属性里有 icon 值的都选出来 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class*=icon]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="结构伪类选择器"><a href="# 结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h4><ul><li>权重为 10</li></ul><h5 id="child 类型"><a href="#child 类型" class="headerlink" title="child 类型"></a>child 类型</h5><ul><li><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 选择 ul 下面第一个叫 li 元素 */</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* 相同的类型还有 last-child，nth-child(n)；第 n 个元素，n 可以是数字，关键字和公式 */</span></span></span><br><span class="line">    background-color: skyblue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实例：隔行变色</p></li><li><p>用到 nth-child 里的关键字 even- 偶数 odd- 奇数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(odd)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>nth-child 里面的公式 如果 n 是公式，则会从 0 开始计算，每次加一，但是第 0 个元素和超出的元素个数会被忽略</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(n)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意：只能用 n 这个字母，但是可以使用加减乘除常数</p></li><li><p>例如 2n 就选择偶数，n+5 就是从第五个开始选择到最后</p></li></ul><h5 id="of-type 类"><a href="#of-type 类" class="headerlink" title="of-type 类"></a>of-type 类</h5><ul><li><p>语法规范</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-of-type</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-of-type</span> &#123;&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type(n)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>child 类：</p><ul><li>nth-child 会把所有盒子排序</li><li>然后先看 nth-child(1)找到那个元素，然后再看前面它指定的标签，如果这两个不匹配，那么这个样式就不显现出来</li></ul></li><li><p>of-type 类：</p><ul><li>nth-of-type(1)会把指定元素排序</li><li>然后再把第一个元素指定样式</li></ul></li></ul><h4 id="伪元素选择器"><a href="# 伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><ul><li>CSS 创建标签，不需要 HTML 标签</li><li>权重为 1</li></ul><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">::before</td><td align="center">在父元素内容的前面插入内容</td></tr><tr><td align="center">::after</td><td align="center">在元素内容的后面插入内容</td></tr></tbody></table><ul><li><p>before 和 after 创建一个行内元素</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: skyblue;</span><br><span class="line">  <span class="comment">/* 必须书写的属性 */</span></span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意：before 和 after 必须有 content 属性 (类似于内容)</p></li><li><p>before 和 after 需要放到父元素的前面或后面</p></li><li><p>元素和:: 不能有空隙</p></li></ul><h5 id="伪元素实例"><a href="# 伪元素实例" class="headerlink" title="伪元素实例"></a>伪元素实例</h5><ul><li><p>搜索框后面的小箭头</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.fake</span> &#123;</span></span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 35px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.fake</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line">    content: "^";</span><br><span class="line"><span class="css">    <span class="comment">/* 用定位来做，防止影响其他元素 */</span></span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 10px;</span><br><span class="line">    right: 0px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fake"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>半遮罩层效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">    content: '';</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.3</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="comment">/* 中间不能有空格 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>伪元素清除浮动 (在 demo7 里面)</li></ul><h3 id="CSS3 盒子模型 -box-sizing"><a href="#CSS3 盒子模型 -box-sizing" class="headerlink" title="CSS3 盒子模型 (box-sizing)"></a>CSS3 盒子模型 (box-sizing)</h3><ul><li><p>原来的盒子增加 border，padding 会撑大盒子</p></li><li><p>CSS3 解决了这个问题！</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box | border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>content-box <strong>默认值</strong> 盒子大小为 width+padding+border</p></li><li><p>border-box 盒子最终大小为 width (padding 和 margin 不要大于 width 宽度)</p></li><li><p>可以在 CSS 初始化时加上这个属性</p></li></ul><h3 id="CSS3 图片变模糊 -filter"><a href="#CSS3 图片变模糊 -filter" class="headerlink" title="CSS3 图片变模糊 (filter)"></a>CSS3 图片变模糊 (filter)</h3><ul><li><p>CSS3 新增的滤镜属性</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: 函数();</span><br><span class="line">  <span class="comment">/* 例：filter: blur(5px); blur 模糊处理 ，数值越大越模糊 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>函数可以通过 <a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external nofollow noopener noreferrer">MDN</a> 查询</li></ul><h3 id="CSS3 执行计算函数 -calc"><a href="#CSS3 执行计算函数 -calc" class="headerlink" title="CSS3 执行计算函数 (calc)"></a>CSS3 执行计算函数 (calc)</h3><ul><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span>-<span class="number">80px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>使用场景，子盒子永远比父盒子小 80px (用于经常改变宽度的父盒子)</li></ul><h3 id="CSS3 过渡属性 -transition"><a href="#CSS3 过渡属性 -transition" class="headerlink" title="CSS3 过渡属性 (transition)"></a>CSS3 过渡属性 (transition)</h3><ul><li><p>经常和 :hover 一起使用</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: 要过渡的属性 花费时间 运动曲线 何时开始;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">要过渡的属性</td><td align="center">想要变化的 CSS 属性，高度宽度内外边距颜色都可以，所有属性都过渡写 all</td></tr><tr><td align="center">花费时间</td><td align="center">单位秒(必须写单位)</td></tr><tr><td align="center">运动曲线</td><td align="center">默认 ease (逐渐慢下来)</td></tr><tr><td align="center">何时开始</td><td align="center">单位秒，设置延迟触发时间(必须有单位) 默认 0s</td></tr></tbody></table></li><li><p>注意：transition 属性一定要写到开始变化的元素上</p></li><li><p>后面两个属性可以省略</p></li><li><p>同时修改两个属性 (修改效果不同) 时：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: width .<span class="number">5s</span> ease <span class="number">1s</span>, height .<span class="number">5s</span> ease <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<br>​    </p><ul><li>修改效果相同时 选择属性写 all</li></ul><h4 id="过渡属性实例：进度条"><a href="# 过渡属性实例：进度条" class="headerlink" title="过渡属性实例：进度条"></a>过渡属性实例：进度条</h4><ul><li><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.bar</span> &#123;</span></span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 15px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    border-radius: 7px;</span><br><span class="line">    padding: 1px 0;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.bar_in</span> &#123;</span></span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 15px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    border-radius: 7px;</span><br><span class="line"><span class="css">    <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 1<span class="selector-class">.5s</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.bar</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.bar_in</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar_in"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="过渡属性实例 - 小米 logo 切换"><a href="# 过渡属性实例 - 小米 logo 切换" class="headerlink" title="过渡属性实例 小米 logo 切换"></a>过渡属性实例 小米 logo 切换</h4><ul><li><p>代码案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.mi_box</span> &#123;</span></span><br><span class="line">      width: 50px;</span><br><span class="line">      height: 50px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ff6700</span>;</span></span><br><span class="line">      margin: 100px auto;</span><br><span class="line">      position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.mi_logo</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0;</span><br><span class="line">      right: 0;</span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.mi_home</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0;</span><br><span class="line">      right: -50px;</span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.mi_box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.mi_logo</span> &#123;</span></span><br><span class="line">      right: 50px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.mi_box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.mi_home</span> &#123;</span></span><br><span class="line">      right: 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mi_box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mi_logo"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/mi-logo.png"</span> <span class="attr">alt</span>=<span class="string">"mi-logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mi_home"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image/mi-home.png"</span> <span class="attr">alt</span>=<span class="string">"mi-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104457515" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104457515</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 与 CSS 学习 7</title>
      <link href="/archives/61934a50.html"/>
      <url>/archives/61934a50.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML 与 CSS 学习 7"><a href="#HTML 与 CSS 学习 7" class="headerlink" title="HTML 与 CSS 学习 7"></a>HTML 与 CSS 学习 7</h1><blockquote><p>这篇文章主要讲了定位，隐藏，精灵图，字体图标，CSS 三角，鼠标样式，表单样式，vertical-align 属性，溢出部分省略号显示和一些布局技巧 <br> 这篇笔记东西比较多也比较杂，希望以后能认真看完 <br> 这篇笔记是初学者写下的笔记，如有错误，欢迎前来指正</p></blockquote><a id="more"></a><h2 id="CSS 定位"><a href="#CSS 定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h2><ul><li><p>实例：例如固定在屏幕两边的模块，或者是在盒子上显示的小模块</p></li><li><p>定位，把盒子定在某个位置</p></li><li><p>定位 = 定位模式 + 边偏移</p></li></ul><h3 id="定位模式"><a href="# 定位模式" class="headerlink" title="定位模式"></a>定位模式</h3><ul><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: static | relative | absolute | fixed ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">static</td><td align="center">静态定位 <strong>默认值</strong></td></tr><tr><td align="center">relative</td><td align="center">相对定位</td></tr><tr><td align="center">absolute</td><td align="center">绝对定位</td></tr><tr><td align="center">fixed</td><td align="center">固定定位</td></tr></tbody></table></li></ul><h4 id="静态定位 -static"><a href="# 静态定位 -static" class="headerlink" title="静态定位 (static)"></a>静态定位 (static)</h4><ul><li>默认值，无定位 (标准流)</li></ul><h4 id="相对定位 -relative"><a href="# 相对定位 -relative" class="headerlink" title="相对定位 (relative)"></a>相对定位 (relative)</h4><ul><li>移动位置时，是根据它原来的位置来移动的</li><li>和浮动不一样，原来的位置仍然占有，后面的盒子依然以标准流的方式对待它 (保留原来位置，标准流)</li><li>经常和绝对定位一起使用</li></ul><h4 id="绝对定位 -absolute"><a href="# 绝对定位 -absolute" class="headerlink" title="绝对定位 (absolute)"></a>绝对定位 (absolute)</h4><ul><li>移动位置时，根据他的父元素的位置来移动</li><li>没有父元素或父元素没有定位，以浏览器为准</li><li>如果父级元素有定位(除了静态定位)，则会以最近一级带有定位的父级元素为准</li><li>例如：父元素没有定位，但爷爷元素有定位，那么定位会以爷爷元素为准</li><li>绝对定位不再占用原来的位置</li></ul><h4 id="子绝父相"><a href="# 子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h4><ul><li>子绝父相：子元素用绝对定位，父盒子用相对定位来约束子元素定位(并且保留原来位置，不会影响布局)</li></ul><h4 id="固定定位 -fixed"><a href="# 固定定位 -fixed" class="headerlink" title="固定定位 (fixed)"></a>固定定位 (fixed)</h4><ul><li><p>不论页面如何滚动，这个元素一直在这</p></li><li><p>以浏览器的可视窗口作为坐标轴</p></li><li><p>固定定位不占用原来的位置</p></li><li><p>固定定位可以以版心对齐 (适用返回顶部的小模块)</p><ul><li>先左对齐，然后 left: 50%;</li><li>然后在用 margin 走版心宽度的一半</li></ul></li></ul><h4 id="粘性定位 -sticky"><a href="# 粘性定位 -sticky" class="headerlink" title="粘性定位 (sticky)"></a>粘性定位 (sticky)</h4><ul><li><p>使用场景：在某一位置开始变成固定定位</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>以可视窗口作为坐标轴</p></li><li><p>占有原来的位置</p></li><li><p>必须添加 top、left、right、bottom 其中一个</p><ul><li>例：top: 0; 距离上沿 0 的时候开始变成固定定位</li></ul></li></ul><h3 id="边偏移"><a href="# 边偏移" class="headerlink" title="边偏移"></a>边偏移</h3><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">top</td><td align="center">到父元素上边线的距离</td></tr><tr><td align="center">bottom</td><td align="center">到父元素下边线的距离</td></tr><tr><td align="center">left</td><td align="center">到父元素左边线的距离</td></tr><tr><td align="center">right</td><td align="center">到父元素右边线的距离</td></tr></tbody></table><ul><li>一个盒子既有 left 属性又有 right 属性 默认执行 left 属性(top 和 bottom 默认执行 top)</li></ul><h3 id="定位叠放次序 -z-index"><a href="# 定位叠放次序 -z-index" class="headerlink" title="定位叠放次序 (z-index)"></a>定位叠放次序 (z-index)</h3><ul><li><p>使用定位时，出现盒子层叠的情况，用 z-index 来控制摆放次序</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: auto (默认值) | 正整数 | <span class="number">0</span> | 负整数;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>数值越大，盒子越靠上</p></li><li><p>auto 或者数值相同，后来者居上</p></li></ul><h3 id="定位的拓展"><a href="# 定位的拓展" class="headerlink" title="定位的拓展"></a>定位的拓展 </h3><h4 id="绝对定位水平居中"><a href="# 绝对定位水平居中" class="headerlink" title="绝对定位水平居中"></a> 绝对定位水平居中</h4><ul><li>绝对定位的盒子居中不能用 margin: 0 auto; 水平居中</li><li>解决办法：left: 50%; margin-left: 定位盒子宽度的一半;</li></ul><h4 id="定位特殊特性"><a href="# 定位特殊特性" class="headerlink" title="定位特殊特性"></a>定位特殊特性</h4><ul><li>绝对定位和固定定位和浮动类似<ol><li>可以设置高度和宽度</li><li>块元素加定位，不给大小的话默认是内容的大小</li><li>脱离标准流的盒子不会触发外边距合并的问题(塌陷)</li></ol></li></ul><h4 id="定位会完全压住盒子里面的内容"><a href="# 定位会完全压住盒子里面的内容" class="headerlink" title="定位会完全压住盒子里面的内容"></a>定位会完全压住盒子里面的内容</h4><ul><li><p>浮动只会压住下面标准流的盒子，但不会压住标准流里面的文字 / 图片</p><ul><li>浮动最早是做文字环绕效果的，所以文字不会挡住文字</li></ul></li><li><p>绝对定位 (固定定位) 会完全压住盒子里面的内容</p></li></ul><h2 id="元素的显示与隐藏"><a href="# 元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2><ul><li>让一个元素显示或隐藏</li></ul><h3 id="display- 隐藏"><a href="#display- 隐藏" class="headerlink" title="display 隐藏"></a>display 隐藏</h3><ul><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none | block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>none 隐藏元素</p></li><li><p>block 除了可以转换成块元素还可以显示元素</p></li><li><p>注意：隐藏后的元素不占用原来的位置</p></li></ul><h3 id="visibility- 可见性"><a href="#visibility- 可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h3><ul><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: visible | hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>visible 可视，hidden 隐藏</p></li><li><p>不同点：隐藏，但保留位置</p></li></ul><h3 id="overflow- 溢出部分隐藏"><a href="#overflow- 溢出部分隐藏" class="headerlink" title="overflow 溢出部分隐藏"></a>overflow 溢出部分隐藏</h3><ul><li><p>对溢出部分进行管理</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: visible | auto | hidden | scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>visible <strong>默认值</strong> 超出的部分显示出来</p></li><li><p>auto 在需要的时候添加滚动条</p></li><li><p>hidden 把多出来的部分隐藏</p></li><li><p>scroll 一直显示滚动条</p></li><li><p>如果有用定位的盒子，慎用 overflow: hidden，因为会隐藏超出的部分</p></li></ul><h2 id="精灵图"><a href="# 精灵图" class="headerlink" title="精灵图"></a>精灵图</h2><ul><li>很多小图片会增多服务器请求次数，为了减少请求次数 –&gt; css 精灵技术</li></ul><h3 id="精灵技术使用 -sprite"><a href="# 精灵技术使用 -sprite" class="headerlink" title="精灵技术使用 (sprite)"></a>精灵技术使用 (sprite)</h3><ul><li>针对背景图片使用</li><li>使用的属性：背景图片的位置 (background-position)</li><li>网页中的坐标和数学里的不一样，所以一般情况下都是网上往左移动，所以数值都是负值</li></ul><h2 id="字体图标 -iconfont"><a href="# 字体图标 -iconfont" class="headerlink" title="字体图标 (iconfont)"></a>字体图标 (iconfont)</h2><ul><li><p>展示的是图标，但本质是一种字体</p></li><li><p>优点：比精灵图要小，可以灵活改变颜色，兼容性强</p></li><li><p>字体图标库下载 <a href="http://icomoon.io" target="_blank" rel="external nofollow noopener noreferrer">icomoon</a> <a href="http://www.iconfont.cn/" target="_blank" rel="external nofollow noopener noreferrer"> 阿里 iconfont</a></p></li><li><p>把 fonts 文件夹复制到网页根目录下</p></li><li><p>使用：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在下载的压缩包里的 style.css 文件里复制 @font-face 声明 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="keyword">@font-face</span> &#123;</span></span><br><span class="line">  font-family: 'icomoon';</span><br><span class="line">  src:  url('fonts/icomoon.eot?dka4r');</span><br><span class="line">  src:  url('fonts/icomoon.eot?dka4r#iefix') format('embedded-opentype'),</span><br><span class="line">    url('fonts/icomoon.ttf?dka4r') format('truetype'),</span><br><span class="line">    url('fonts/icomoon.woff?dka4r') format('woff'),</span><br><span class="line">    url('fonts/icomoon.svg?dka4r#icomoon') format('svg');</span><br><span class="line">  font-weight: normal;</span><br><span class="line">  font-style: normal;</span><br><span class="line">  font-display: block;</span><br><span class="line">&#125;</span><br><span class="line">span &#123;l</span><br><span class="line"><span class="css">  <span class="comment">/* 指定字体为 @font-face 里的 font-family */</span></span></span><br><span class="line">  font-family: 'iconmoon';</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在 demo.html 里找到图标下面的小方框 '' 这就是要用的图标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="字体图标追加"><a href="# 字体图标追加" class="headerlink" title="字体图标追加"></a>字体图标追加</h3><ul><li>把 selection.json 文件重新上传，选中自己想要更新的图标，下载压缩包，替换原来的文件即可</li></ul><h2 id="CSS 三角"><a href="#CSS 三角" class="headerlink" title="CSS 三角"></a>CSS 三角</h2><ul><li><p>代码样例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 向右的箭头 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  div &#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    height: 0px;</span><br><span class="line">    border: 10px solid transparent;</span><br><span class="line">    border-left: 10px solid blue;</span><br><span class="line"><span class="css">    <span class="comment">/* 下面两行为了照顾兼容性 */</span></span></span><br><span class="line">    line-height: 0;</span><br><span class="line">    font-size: 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>一个盒子没有大小，但是有边框，四个边框以对角线划分整个盒子</p></li><li><p>所以就可以只指定一个方向有颜色，另外三个都没有颜色</p></li><li><p>开发时用定位来做盒子上面的小箭头</p></li><li><p>注意箭头方向移动的值为 border 宽度的二倍 (因为有一半是透明的)</p></li></ul><h2 id="CSS 用户界面样式"><a href="#CSS 用户界面样式" class="headerlink" title="CSS 用户界面样式"></a>CSS 用户界面样式</h2><ul><li>可以更改用户鼠标样式，表单轮廓，防止表单域拖拽</li></ul><h3 id="更改鼠标样式 -cursor"><a href="# 更改鼠标样式 -cursor" class="headerlink" title="更改鼠标样式 (cursor)"></a>更改鼠标样式 (cursor)</h3><ul><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: default | pointer | move | text | not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">default</td><td align="center">默认值</td></tr><tr><td align="center">pointer</td><td align="center">小手</td></tr><tr><td align="center">move</td><td align="center">移动</td></tr><tr><td align="center">text</td><td align="center">文本</td></tr><tr><td align="center">not-allowed</td><td align="center">禁止</td></tr></tbody></table></li></ul><h3 id="表单轮廓线 -outline"><a href="# 表单轮廓线 -outline" class="headerlink" title="表单轮廓线 (outline)"></a>表单轮廓线 (outline)</h3><ul><li><p>去除文本框在被选中时出现的边框</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="防止拖拽文本域 -resize"><a href="# 防止拖拽文本域 -resize" class="headerlink" title="防止拖拽文本域 (resize)"></a>防止拖拽文本域 (resize)</h3><ul><li><p>防止用户在使用的时候改变文本域的大小</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>文本域标签最好写在一行上，因为如果换行的话在文本域中的文本默认是在第二行开始的</li></ul><h2 id="vertical-align 属性"><a href="#vertical-align 属性" class="headerlink" title="vertical-align 属性"></a>vertical-align 属性</h2><ul><li><p>目的：设置图片或者表单元素和文字垂直对齐</p></li><li><p>针对行内元素和行内块元素有效</p></li><li><p>属性要写在图片 (表单元素) 上</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline | top | middle | bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">baseline</td><td align="center"><strong>默认值</strong> 快到最底下的一条线</td></tr><tr><td align="center">top</td><td align="center">最顶端</td></tr><tr><td align="center">middle</td><td align="center">中间(图片和文字垂直居中)</td></tr><tr><td align="center">bottom</td><td align="center">最底端</td></tr></tbody></table></li></ul><h3 id="解决图片下面有空白缝隙"><a href="# 解决图片下面有空白缝隙" class="headerlink" title="解决图片下面有空白缝隙"></a>解决图片下面有空白缝隙</h3><ul><li><p>空白缝隙是行内块元素和文字基线对齐产生的(例如 f 或 p)</p></li><li><p>解决方法：</p><ul><li>给图片添加 certical-align 中除了 baseline 属性 (推荐)</li><li>把图片转化为块级元素</li></ul></li></ul><h2 id="溢出文字省略号显示"><a href="# 溢出文字省略号显示" class="headerlink" title="溢出文字省略号显示"></a>溢出文字省略号显示</h2><ul><li><p>属性 white-space</p><ul><li>normal：如果文字显示不开自动换行</li><li>nowrap：不允许自动换行</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: normal | nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">*   属性 text-overflow</span><br><span class="line">    *   ellipsis 文字溢出的时候用省略号显示</span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;css</span><br><span class="line">    div &#123;</span><br><span class="line">      text-overflow: ellipsis;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>​    </p><h3 id="单行文本溢出"><a href="# 单行文本溢出" class="headerlink" title="单行文本溢出"></a>单行文本溢出</h3><ul><li>需要满足三个条件<ol><li>强制一行显示文本 (white-space)</li><li>超出部分隐藏 (overflow)</li><li>文字用省略号代替超出部分 (text-overflow)</li></ol></li></ul><h3 id="多行文本溢出"><a href="# 多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h3><ul><li><p>兼容性问题，适用于 webkit 浏览器，对 IE 没有作用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="comment">/* 弹性伸缩盒子模型显示 */</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="comment">/* 显示文本的行数 */</span></span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="comment">/* 排列方式为垂直居中 */</span></span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: verical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用时要严格控制盒子大小</p></li><li><p>开发时经常后台来控制字数</p></li></ul><h2 id="布局技巧"><a href="# 布局技巧" class="headerlink" title="布局技巧"></a>布局技巧</h2><h3 id="margin 负值应用"><a href="#margin 负值应用" class="headerlink" title="margin 负值应用"></a>margin 负值应用</h3><ul><li><p>有边框的盒子排列时会出现两个盒子之间的边框加粗的情况</p></li><li><p>给右面的盒子添加 <code>margin-left: -1px;</code> 右面的边框压住左面的边框，从而解决这个问题</p></li><li><p>把鼠标放在其中一个盒子上，盒子边框改变颜色</p></li><li><p>要是按照上面的方法改完的盒子会出现被压住的一边没有办法改变颜色的情况</p></li><li><p>解决方法：</p><ul><li>给要变色的盒子添加相对定位，然后盒子就会压住其他盒子</li><li>如果盒子已经有定位则用 z-index 提高层级</li></ul></li></ul><h3 id="文字围绕浮动元素"><a href="# 文字围绕浮动元素" class="headerlink" title="文字围绕浮动元素"></a>文字围绕浮动元素</h3><ul><li><p>根据浮动不会压住文字的特性，既有图片又有文字只需要在左侧图片添加浮动，在大盒子里面写上文字就可以</p></li><li><p>代码实例：<br><img data-src="https://img-blog.csdnimg.cn/20200219215559343.png" alt="新闻示例"></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.pic</span> &#123;</span></span><br><span class="line">    float: left;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pic"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="行内块元素布局"><a href="# 行内块元素布局" class="headerlink" title="行内块元素布局"></a>行内块元素布局</h3><ul><li><p>使用场景：网页下面的页码栏</p></li><li><p>行内块元素每个元素之间有个小缝隙</p></li><li><p>代码示例：(页码栏)<br><img data-src="https://img-blog.csdnimg.cn/202002192156491.png" alt="页码栏"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    display: inline-block;</span><br><span class="line">    width: 36px;</span><br><span class="line">    height: 36px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f7f7f7</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 36px;</span><br><span class="line">    text-decoration: none;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> <span class="selector-class">.button</span> &#123;</span></span><br><span class="line">    width: 85px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> <span class="selector-tag">input</span>&#123;</span></span><br><span class="line">    height: 36px;</span><br><span class="line">    width: 45px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    outline: none;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> <span class="selector-tag">button</span> &#123;</span></span><br><span class="line">    width: 60px;</span><br><span class="line">    height: 36px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f7f7f7</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    到第 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    页</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span> 确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS 三角强化"><a href="#CSS 三角强化" class="headerlink" title="CSS 三角强化"></a>CSS 三角强化</h3><ul><li>实现效果：</li></ul><p><img data-src="https://img-blog.csdnimg.cn/20200219215836511.png" alt="price 盒子"></p><ul><li><p>代码示范：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 这一部分是生成三角形 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.trangle</span> &#123;</span></span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 100px solid transparent;</span><br><span class="line">    border-right: 50px solid skyblue;</span><br><span class="line">    border-bottom: 0;</span><br><span class="line">    border-left: 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="comment">/* 这一部分是生成京东价格标签案例 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.price</span> &#123;</span></span><br><span class="line">    width: 160px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    line-height: 24px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.now-price</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line"><span class="css">    <span class="selector-tag">right</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    top: 0;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 90px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background-color: red;</span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    font-weight: 700;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="comment">/* 下面制作三角方法更简单 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.now-price</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-color: transparent red transparent transparent;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-width: 24px 10px 0 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"now-orice"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"old-price"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>把上面宽度调大</p></li><li><p>左面和下面的宽度调为零</p></li></ul><h3 id="CSS 初始化"><a href="#CSS 初始化" class="headerlink" title="CSS 初始化"></a>CSS 初始化</h3><ul><li><p>为了消除不同浏览器对 html 的影响</p></li><li><p>京东初始化代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">em</span>,</span><br><span class="line">  <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="comment">/* 清除斜体 */</span></span><br><span class="line">      <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">img</span> &#123;</span><br><span class="line">      <span class="comment">/* 为了兼容低版本浏览器，否则在图片上有链接的话会出现边框(和图片周围文字一个原理) */</span></span><br><span class="line">      <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">      <span class="comment">/* 否则 button 上不会出现小手 */</span></span><br><span class="line">      <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">      <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#c81623</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">button</span>,</span><br><span class="line">  <span class="selector-tag">input</span> &#123;</span><br><span class="line">      <span class="attribute">font-family</span>: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">"\5B8B\4F53"</span>, sans-serif;</span><br><span class="line">      <span class="comment">/* \5B8B\4F53 的意思是宋体，写汉字的话容易出现乱码 */</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">      <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">"\5B8B\4F53"</span>, sans-serif;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.hide</span>,</span><br><span class="line">  <span class="selector-class">.none</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">      <span class="comment">/* 隐藏 */</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 清除浮动 */</span></span><br><span class="line">  <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">visibility</span>: hidden;</span><br><span class="line">      <span class="attribute">clear</span>: both;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">      *zoom: 1;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104401572" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104401572</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 与 CSS 学习 6</title>
      <link href="/archives/16947ac6.html"/>
      <url>/archives/16947ac6.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML 与 CSS 学习 6"><a href="#HTML 与 CSS 学习 6" class="headerlink" title="HTML 与 CSS 学习 6"></a>HTML 与 CSS 学习 6</h1><blockquote><p>这篇文章主要讲了 CSS 的浮动部分，主要是有一个学成在线的案例学习到很多开发时的知识 <br> 案例请移步 <a href="https://blog.csdn.net/weixin_46170034/article/details/104357836" target="_blank" rel="external nofollow noopener noreferrer"> 学成在线案例 </a><br> 这篇笔记是初学者写下的笔记，如有错误，欢迎指正。</p></blockquote><a id="more"></a><h2 id="传统网页布局的三种方式"><a href="# 传统网页布局的三种方式" class="headerlink" title="传统网页布局的三种方式"></a>传统网页布局的三种方式</h2><ul><li>标准流(普通流 / 文档流)：按照默认的方式排列</li><li>浮动流</li><li>定位流</li></ul><h2 id="CSS 浮动"><a href="#CSS 浮动" class="headerlink" title="CSS 浮动"></a>CSS 浮动</h2><ul><li><p>浮动可以改变元素标签的默认排列方式</p></li><li><p>网页布局第一准则：多个块级元素横向排列标准流，多个块级元素纵向排列浮动流</p></li></ul><h3 id="浮动详解"><a href="# 浮动详解" class="headerlink" title="浮动详解"></a>浮动详解</h3><ul><li><p>float 属性创建浮动框，使其移动到一边，直到左边缘或右边缘碰到另一个浮动框的边缘或父元素边缘</p></li><li><p>代码示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float: none | left | right;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">none</td><td align="center">元素不浮动(默认值)ss</td></tr><tr><td align="center">left</td><td align="center">元素向左浮动</td></tr><tr><td align="center">right</td><td align="center">元素向右浮动</td></tr></tbody></table></li></ul><h3 id="浮动特性"><a href="# 浮动特性" class="headerlink" title="浮动特性"></a>浮动特性</h3><ol><li><p>浮动的元素会脱离标准流</p><ul><li>脱离标准流的控制，移动到指定位置 (俗称脱标)</li><li>浮动盒子不会保留原先的位置</li></ul><blockquote><p>浮动是有浮动属性盒子会飘起来，后面没有浮动属性的盒子补上前面飘起来盒子位置</p></blockquote></li><li><p>浮动的元素会一行显示并且元素顶端对齐</p><ul><li>浮动元素会紧紧贴在一起 (不会有空隙)</li><li>如果父元素宽度装不下这些盒子，多出的盒子会另起一行对齐</li></ul><blockquote><p>可以这么理解：浮动的高度都是一样的，所以会并排显示</p></blockquote></li><li><p>浮动元素会具有行内块元素特性</p><ul><li>行内元素添加 float 属性可以设置宽高</li><li>块元素添加 float 属性可以在一行显示</li><li>添加浮动的行内元素和块元素，他的宽度根据内容宽度来确定</li></ul></li></ol><h3 id="约束浮动元素策略"><a href="# 约束浮动元素策略" class="headerlink" title="约束浮动元素策略"></a>约束浮动元素策略</h3><ul><li><p>先用标准流父元素排列上下位置，之后内部子元素浮动来排列左右位置 (网页布局第一准则)</p></li><li><p>网页布局第二准则：先设置盒子大小，在设置盒子位置</p></li></ul><h3 id="浮动布局的注意点"><a href="# 浮动布局的注意点" class="headerlink" title="浮动布局的注意点"></a>浮动布局的注意点</h3><ul><li><p>和浏览器一样宽的盒子不需要指定宽度</p></li><li><p>元素浮动后只会影响后面的标准流，不影响之前的标准流</p></li><li><p>一个元素浮动了，其他的兄弟元素都应该浮动</p></li></ul><h3 id="清除浮动"><a href="# 清除浮动" class="headerlink" title="清除浮动"></a>清除浮动 </h3><h4 id="清除浮动的原因"><a href="# 清除浮动的原因" class="headerlink" title="清除浮动的原因"></a> 清除浮动的原因</h4><ul><li>有些父级盒子不方便给高度(如比较高的盒子，或者盒子高度要随时改变)，但是又不能不给高度(下面的标准流盒子又会占用父级盒子的位置)</li></ul><h4 id="清除浮动的本质"><a href="# 清除浮动的本质" class="headerlink" title="清除浮动的本质"></a>清除浮动的本质</h4><ul><li><p>清除浮动的本质是清除浮动元素对父级元素的影响</p></li><li><p>父盒子有高度，则不需要清除浮动</p></li><li><p>清除浮动以后，父级元素会自动检测盒子的高度，不会影响下面的标准流元素</p></li><li><p>语法规范：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: left | right | both;</span><br><span class="line">    <span class="comment">/* 清除左浮动，清除右浮动，同时清除 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<br>​    </p><ul><li>在开发时几乎只用<code>clear: both;</code></li></ul><h4 id="清除浮动的方法"><a href="# 清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h4><ol><li>额外标签法(隔墙法，但平时不常用) <strong>W3C 推荐</strong></li><li>父级添加 overflow 属性</li><li>父级添加 after 伪元素</li><li>给父级添加双伪元素</li></ol><h5 id="额外标签法"><a href="# 额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h5><ul><li><p>在父级盒子后面新建一个盒子(必须是块级元素)</p></li><li><p>在新建盒子里写上属性<code>clear: both;</code></p></li><li><p>发现父元素能自动检测高度，不会影响后面的标准流元素</p></li><li><p>这种写法父盒子本身高度没有增加，而只是在浮动元素后增加一个盒子拦住下面标准流的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.clear</span> &#123;</span></span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>优点：通俗易懂，书写方便</p></li><li><p>缺点：添加许多无意义的标签，结构性较差</p></li></ul><h5 id="给父级添加 overflow"><a href="# 给父级添加 overflow" class="headerlink" title="给父级添加 overflow"></a>给父级添加 overflow</h5><ul><li><p>给父元素添加 overflow 属性</p></li><li><p>这种方法父元素的高度会变得和子元素一样高，但是一旦有超出父元素边界的部分就会被隐藏</p></li><li><p>语法样例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        overflow: hidden;</span><br><span class="line"><span class="css">        <span class="comment">/* 清除浮动 */</span></span></span><br><span class="line">        width: 800px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 400px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>优点：代码简洁</p></li><li><p>缺点：无法显示溢出的部分 (例如 margin 取负值)</p></li></ul><h5 id="after 伪元素法"><a href="#after 伪元素法" class="headerlink" title="after 伪元素法"></a>after 伪元素法</h5><ul><li><p>相当于额外标签法的升级版</p></li><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="comment">/* I6,I7 专有 */</span></span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用：在父元素上添加这个属性</p></li><li><p>例<code>&lt;div class=&quot;nav clearfix&quot;&gt;...&lt;/div&gt;</code></p></li></ul><h5 id="双伪元素清除浮动 - 最常使用"><a href="# 双伪元素清除浮动 - 最常使用" class="headerlink" title="双伪元素清除浮动 (最常使用)"></a>双伪元素清除浮动 (最常使用)</h5><ul><li><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>:table;</span><br><span class="line">  <span class="comment">/* 如果写 display:block 的话两个块元素就会分行显示，影响父盒子大小 */</span></span><br><span class="line">  <span class="comment">/* table 是表格，转化成块级元素并同行显示 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"> <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用方法和伪元素法一样，在父元素上加上这个属性</p></li></ul><h2 id="PS 切图模式"><a href="#PS 切图模式" class="headerlink" title="PS 切图模式"></a>PS 切图模式</h2><ul><li><p>jpg 像素较高，常用于产品图片</p></li><li><p>图层切图：单击图层，选择快速导出为 PNG</p></li><li><p>如果有多个元素想要导出为图片，合并两个图层(Ctrl+E)，然后导出</p></li><li><p>切片工具切图：</p><ol><li>选中要切的部分</li><li>导出：文件 -&gt; 导出 -&gt; 储存为 Web 所用的格式，储存(储存时要选择选中的切片)</li><li>要导出背景透明的部分，关闭背景的眼睛，储存时选择 png 格式</li></ol></li><li><p>PS 插件切图</p><ul><li>插件名：Cutterman</li><li>导出选中的图层</li></ul></li></ul><h2 id="学成在线案例"><a href="# 学成在线案例" class="headerlink" title="学成在线案例"></a>学成在线案例</h2><blockquote><p>首页文件为 index.html<br>外链样式表 style.css</p></blockquote><h3 id="CSS- 属性书写顺序"><a href="#CSS- 属性书写顺序" class="headerlink" title="CSS 属性书写顺序"></a>CSS 属性书写顺序</h3><ul><li>建议顺序：<ol><li>布局定位样式：display <strong>默认第一个写，关系到元素样式</strong> / position / float / clear / vidibilty</li><li>自身属性：width / height / margin / padding / border / background</li><li>文本属性：color / font / text-decoration / text-align / vertical-align / white-space / break-word</li><li>其他属性(CSS3)：content / cursor / border-radius / box-shadow / texte-shadow /…背景颜色 rgba 要放在这里(rgba 为 css3 的属性)</li></ol></li></ul><h3 id="页面布局思路"><a href="# 页面布局思路" class="headerlink" title="页面布局思路"></a>页面布局思路</h3><ul><li>确定页面的可视区</li><li>分析页面的行模块，在数行模块里的列模块</li><li>每个行模块里面的列元素要用浮动布局，先确定大小再确定位置</li><li>制作 HTML 结构，遵循先有结构，后有样式的原则</li></ul><h4 id="导航栏的实际操作方法"><a href="# 导航栏的实际操作方法" class="headerlink" title="导航栏的实际操作方法"></a>导航栏的实际操作方法</h4><ul><li><p>实际开发中不会直接用 a 标签，而是用 li 里面包含链接的方法</p><ul><li>原因：li 语法更清晰</li><li>如果直接使用 a，搜索引擎会识别为有堆砌关键字的嫌疑，影响网站排名</li></ul></li><li><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        margin-left: 60px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">        display: block;</span><br><span class="line">        padding: 0 10px;</span><br><span class="line">        height: 42px;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">        line-height: 42px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 课程 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 职业规划<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意事项，导航栏外面的盒子不要给宽度，里面内容是多宽外面的盒子就是多宽，方便以后添加文字</p></li><li><p>通常使用 padding 来指定每一个链接模块的宽度，看起来十分整洁</p></li><li><p>button 按钮默认有一个边框，需要手动去除</p></li><li><p>行内块元素中间默认有空隙</p></li><li><p>完整的代码案例在 <a href="https://blog.csdn.net/weixin_46170034/article/details/104357836" target="_blank" rel="external nofollow noopener noreferrer">demo7.html</a> 中</p></li></ul><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104357814" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104357814</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 与 CSS 学习 5</title>
      <link href="/archives/8f9d2b7c.html"/>
      <url>/archives/8f9d2b7c.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML 与 CSS 学习 5"><a href="#HTML 与 CSS 学习 5" class="headerlink" title="HTML 与 CSS 学习 5"></a>HTML 与 CSS 学习 5</h1><blockquote><p>这篇笔记主要讲了 CSS 盒子模型 (border，padding，margin)，圆角边框，盒子阴影，文字阴影<br> 这篇笔记是初学者写下的笔记，如有错误，欢迎前来指正</p></blockquote><a id="more"></a><h2 id="CSS 盒子模型"><a href="#CSS 盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h2><ul><li>border 边框</li><li>content 内容</li><li>padding 内边距：边框和内容的距离</li><li>margin 外边距：盒子与盒子之间的距离</li><li>在审查元素里的 CSS 部分里的 Computed 里面可以看见这四个属性</li></ul><h3 id="边框 -border"><a href="# 边框 -border" class="headerlink" title="边框 (border)"></a>边框 (border)</h3><ul><li><p>边框复合语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">border: border-width | border-style | border-color;</span><br><span class="line"><span class="comment">/* 没有先后顺序，上面是推荐顺序 */</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">border-width</td><td align="center">边框粗细，单位 px</td></tr><tr><td align="center">border-style</td><td align="center">边框的样式</td></tr><tr><td align="center">border-color</td><td align="center">边框颜色</td></tr></tbody></table></li><li><p>border-style：solid (实线边框) dashed (虚线边框) dotted (点线边框)</p></li><li><p>分别设置四周边框：</p></li></ul><blockquote><p>border-top:<br>border-bottom:</p></blockquote><h4 id="表格细线边框"><a href="# 表格细线边框" class="headerlink" title="表格细线边框"></a>表格细线边框</h4><ul><li><p>table ， td 和 th 都要在 CSS 属性里，所有的部分才都有边框</p></li><li><p>两个单元格都有边框，导致边框变粗</p></li><li><p>解决方法：合并相邻单元格边框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-collapse</span>: <span class="selector-tag">collapse</span>;</span><br><span class="line"><span class="comment">/* 表示相邻的边框合并在一起 */</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意：边框会影响盒子实际大小</p></li><li><p>实际大小 = 内容宽度 + border 宽度 *2</p></li></ul><h3 id="内边距 -padding"><a href="# 内边距 -padding" class="headerlink" title="内边距 (padding)"></a>内边距 (padding)</h3><ul><li><p>内容跟边框的距离</p></li><li><p>可以通过方位名词来分别设置到四边的距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding-left</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">padding-top</span>: 20<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="padding 复合属性"><a href="#padding 复合属性" class="headerlink" title="padding 复合属性"></a>padding 复合属性</h4><table><thead><tr><th align="center">值的个数</th><th align="center">属性</th></tr></thead><tbody><tr><td align="center">padding: 5px;</td><td align="center">上下左右都是 5px 的内边距</td></tr><tr><td align="center">padding:5px 10px;</td><td align="center">上下为 5px，左右为 10px</td></tr><tr><td align="center">padding: 5px 10px 20px;</td><td align="center">上内边距是 5px，左右内边距是 10px，下内边距是 20px</td></tr><tr><td align="center">padding: 5px 10px 20px 30px;</td><td align="center">上为 5px，右为 10px，下为 20px，左为 30px <strong>按顺时针顺序</strong></td></tr></tbody></table><ul><li><p>padding 也会影响盒子实际大小</p></li><li><p>注意：子类盒子在没有指定宽度的情况下不会撑大父类盒子</p></li></ul><h3 id="外边距 -magin"><a href="# 外边距 -magin" class="headerlink" title="外边距 (magin)"></a>外边距 (magin)</h3><ul><li><p>盒子和盒子之间的距离</p></li><li><p>同样可以用方位名词来分别声明上下左右的外边距</p></li><li><p><strong>margin 外边距复合属性写法和 padding 一致</strong></p></li></ul><h4 id="margin 应用：块元素水平居中"><a href="#margin 应用：块元素水平居中" class="headerlink" title="margin 应用：块元素水平居中"></a>margin 应用：块元素水平居中</h4><ul><li><p>满足条件：</p><ol><li>盒子必须指定了宽度</li><li>盒子左右外边距都设置为 auto <code>margin: 0 auto;</code></li></ol></li><li><p>注意：无法给行内块元素和行内元素居中对齐</p><ul><li>解决方法，给父元素加属性<code>text-align: center;</code></li></ul></li></ul><h4 id="嵌套块元素塌陷"><a href="# 嵌套块元素塌陷" class="headerlink" title="嵌套块元素塌陷"></a>嵌套块元素塌陷</h4><ul><li><p>两个嵌套关系 (父子关系) 的块元素，父元素有上外边距，子元素也有上外边距，此时父元素会向下较大的外边距值</p></li><li><p>解决方案：</p><ul><li>给父元素一个上边框 (边框颜色透明参数 transparent)</li><li>给父元素定义上内边距</li><li>给父元素添加 <code>overflow: hidden</code> <strong> 常用</strong></li></ul></li><li><p>注意：浮动的盒子不会有外边距塌陷的问题</p></li></ul><h3 id="清除内外边距"><a href="# 清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h3><ul><li><p>网页内容默认携带内外边距</p></li><li><p>代码样例：</p></li></ul><pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  *&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 所有的标签都选出来，清楚所有的内外边距 */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li>注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不设置上下内外边距。转换为块元素和行内块元素就可以随意设置</li></ul><h2 id="PS 的基本操作"><a href="#PS 的基本操作" class="headerlink" title="PS 的基本操作"></a>PS 的基本操作</h2><ul><li>Ctrl+R 快速调出标尺 (单位像素)</li><li>按住空格，抓手工具</li><li>Ctrl+D 取消选区</li></ul><h3 id="示例总结"><a href="# 示例总结" class="headerlink" title="示例总结"></a>示例总结</h3><ul><li><p>遇到不知道什么时候用什么的标签</p></li><li><p>遇到产品标题用 h 大量段落用 p</p></li><li><p>盒子和盒子之间用 margin</p></li><li><p>盒子和内容之间用 padding</p></li><li><p>去掉 li 里的圆点<code>list-style: none;</code></p></li></ul><h2 id="圆角边框"><a href="# 圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h2><ul><li><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">border-radius</span>: <span class="selector-tag">length</span>;</span><br><span class="line"><span class="comment">/* length 是圆的半径，和矩形的两个边相切 */</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>常用写法：</p></li><li><p>圆形：</p><ul><li>圆角边框设置为正方形边长的一半(可以用百分比表示)</li></ul></li><li><p>圆角矩形：</p><ul><li>圆角边框设置为高度的一半</li></ul></li><li><p>复合属性</p><ul><li>一个参数时四个角都设置相同弧度</li><li>两个参数左上和右下是第一个参数，右上和左下是另一个参数</li><li>有四个参数时按顺时针顺序设置弧度</li></ul></li><li><p>分别设置：</p><ul><li><code>border-top-left-radius</code>左上角</li><li>先上下，后左右</li></ul></li></ul><h2 id="盒子阴影"><a href="# 盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><ul><li><p>代码样例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow: h-shadow | v-shadow | blur | spread | color | inset;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">h-shadow</td><td align="center"><strong>必需</strong>，水平阴影的位置，允许负值</td></tr><tr><td align="center">v-shadow</td><td align="center"><strong>必需</strong>，垂直阴影的位置，允许负值</td></tr><tr><td align="center">blur</td><td align="center">模糊距离</td></tr><tr><td align="center">spread</td><td align="center">阴影的尺寸</td></tr><tr><td align="center">color</td><td align="center">阴影的颜色(rgba)</td></tr><tr><td align="center">inset</td><td align="center">将外部阴影 (outset) 改为内部阴影</td></tr></tbody></table></li><li><p>注意：虽然 outside 为外阴影(默认值)，但写的时候不能把 outside 写在阴影属性里面，否则会导致阴影失效</p></li><li><p>阴影不占用空间，不会影响其他盒子</p></li><li><p>任何盒子都可以添加:hover 属性</p></li><li><p>常用阴影：</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.2</span>);</span><br></pre></td></tr></table></figure><p>​<br>​    </p><h2 id="文字阴影"><a href="# 文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h2><ul><li><p>代码样例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-shadow: h-shadow | v-shadow | blur | color;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">h-shadow</td><td align="center"><strong>必需</strong>，水平阴影的位置，允许负值</td></tr><tr><td align="center">v-shadow</td><td align="center"><strong>必需</strong>，垂直阴影的位置，允许负值</td></tr><tr><td align="center">bulr</td><td align="center">模糊的距离</td></tr><tr><td align="center">color</td><td align="center">阴影颜色(rgba)</td></tr></tbody></table></li></ul><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104283778" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104283778</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 与 CSS 学习 3</title>
      <link href="/archives/66fe8e49.html"/>
      <url>/archives/66fe8e49.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML 与 CSS 学习 3"><a href="#HTML 与 CSS 学习 3" class="headerlink" title="HTML 与 CSS 学习 3"></a>HTML 与 CSS 学习 3</h1><blockquote><p>这篇笔记主要记了 CSS 的基础语法，选择器，字体属性，文本属性，CSS 三种引入方式 <br> 初学者写下的笔记，如有错误，欢迎大家前来指正。</p></blockquote><a id="more"></a><h2 id="CSS 基础"><a href="#CSS 基础" class="headerlink" title="CSS 基础"></a>CSS 基础</h2><ul><li>CSS 主要来美化网页</li><li>CSS 层叠样式表的简称(标记语言)</li></ul><h3 id="CSS 语法规范"><a href="#CSS 语法规范" class="headerlink" title="CSS 语法规范"></a>CSS 语法规范</h3><ul><li><p>选择器 +{多条声明}</p></li><li><p>注释为<code>/* */</code></p></li><li><p>CSS 要写在 <code>&lt;head&gt;</code> 里的 <code>&lt;style&gt;</code> 标签之中</p></li><li><p>代码示例(以 p 标签为例)：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    p &#123;</span><br><span class="line">        color: red;</span><br><span class="line">        font-size: 12px;</span><br><span class="line"><span class="css">        <span class="comment">/* 修改文字大小 */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h3 id="CSS 代码风格"><a href="#CSS 代码风格" class="headerlink" title="CSS 代码风格"></a>CSS 代码风格</h3><ul><li><p>样式格式</p><ul><li>紧凑格式: 都写在一行上</li><li>展开格式: 展开书写(主流写法)</li></ul></li><li><p>样式大小写: 默认小写</p></li><li><p>空格规范</p><ul><li>在冒号后面添加一个空格</li><li>选择器和大括号之间保留一个空格</li></ul></li></ul><h3 id="CSS 选择器"><a href="#CSS 选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h3><ul><li>分类：<ul><li>基础选择器<ul><li>标签选择器</li><li>类选择器</li><li>id 选择器</li><li>通配符选择器</li></ul></li><li>复合选择器(在 demo5 里)</li></ul></li></ul><h4 id="标签选择器"><a href="# 标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><ul><li>标签名作为选择器</li><li>优点:<ul><li>可以一次修改所有某一类的标签的样式</li></ul></li><li>缺点:<ul><li>没法区分同名标签内的元素</li></ul></li></ul><h4 id="类选择器"><a href="# 类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul><li><p>单独选择一个或几个标签</p></li><li><p>语法样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. 类名 (class 属性) &#123;</span><br><span class="line">    属性 1: 属性值 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>标签中加 class 属性</p></li><li><p>无视标签，所有有相同 class 属性的都会改变样式</p></li><li><p>不能用标签名做 class 属性</p></li><li><p>有 <a href="https://www.jianshu.com/p/6417143c4b18" target="_blank" rel="external nofollow noopener noreferrer"> 前端命名规范</a></p></li><li><p>css 里的背景颜色<code>background-color</code></p></li></ul><h5 id="类选择器里的多类名"><a href="# 类选择器里的多类名" class="headerlink" title="类选择器里的多类名"></a>类选择器里的多类名</h5><ul><li><p>给一个标签指定多个类名(class)</p></li><li><p>代码示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;red font35&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>多个类名中间用空格分开</p></li><li><p>能做到代码复用</p></li></ul><h4 id="id 选择器"><a href="#id 选择器" class="headerlink" title="id 选择器"></a>id 选择器</h4><ul><li><p>语法规范：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#id 名 &#123;</span><br><span class="line">    属性 1: 属性值 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>和类选择器很像，只不过是把 class 改成 id，. 改成 #</p></li><li><p>和类选择器的区别：</p><ul><li>id 只能调用一次，下面的在调用这个 id 就无法使用了</li></ul></li></ul><h4 id="通配符选择器"><a href="# 通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><ul><li><p>选取页面中所有的元素(标签)</p></li><li><p>代码示例:</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    * &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line"><span class="comment">/* 把所有的标签都改为红色(包括 html 等标签) */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    </p></li></ul><h3 id="CSS 字体属性"><a href="#CSS 字体属性" class="headerlink" title="CSS 字体属性"></a>CSS 字体属性 </h3><h4 id="字体"><a href="# 字体" class="headerlink" title="字体"></a> 字体</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>,Arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以选择多个字体，多个字体用逗号分割</li><li>一个字体有多个单词时尽量用引号</li><li>多个字体的目的，优先使用第一个字体，如果用户电脑上没有这个字体将使用下一个字体</li><li>如果这些字体都没有，使用浏览器自带字体</li><li>chrome 默认字体，微软雅黑</li></ul><h4 id="字体大小"><a href="# 字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>后面别忘了加 px(像素)</li><li>chrome 浏览器文字默认大小 16px</li><li>如果给 body 指明了文字大小，整个页面的文字的默认大小就改变了(标题大小不会改变，想要改变的话需要单独指明)</li></ul><h4 id="字体粗细"><a href="# 字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal | bold | bolder | lighter | number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>normal：正常字体，默认值</p></li><li><p>blod：粗体</p></li><li><p>bolder：特粗体</p></li><li><p>lighter：细体</p></li><li><p>number：数字 (后面不要加单位) <strong>开发时常用</strong></p><ul><li>700 加粗(bold)，400 变细(nomal)</li></ul></li><li><p>示例，标题在使用的时候经常去掉加粗</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h2 &#123;</span><br><span class="line">    font-weight: 400;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<br>​    </p><h4 id="文字样式"><a href="# 文字样式" class="headerlink" title="文字样式"></a>文字样式</h4><ul><li><p>主要是斜体</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal | italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>normal：普通样式，italic：斜体样式</li></ul><h4 id="字体复合属性"><a href="# 字体复合属性" class="headerlink" title="字体复合属性"></a>字体复合属性</h4><ul><li><p>示例：文字变倾斜，加粗，字号 16，字体微软雅黑</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    font: italic(font-style) 700(font-weight) 16px(font-size/line-hight) 'Microsoft yahei'(fonnt-family);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>注意! 顺序不能更换，里面各属性空格隔开</p></li><li><p>括号内是这个填写的属性</p></li><li><p>不需要的属性可以省略，但必须保留 <code>font-size</code> 和<code>font-family</code>属性，否则 font(整个 css 属性) 都不起作用</p></li></ul><h3 id="CSS 文本属性"><a href="#CSS 文本属性" class="headerlink" title="CSS 文本属性"></a>CSS 文本属性</h3><ul><li>文本外观，颜色，对齐，缩进，行间距</li></ul><h4 id="文本颜色"><a href="# 文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>预定义的值：各种英文单词</li><li>十六进制的值：#ff0000(red) <strong>开发最常用</strong></li><li>RGB 写法：rgb(200,0,0)</li></ul><h4 id="对齐文本"><a href="# 对齐文本" class="headerlink" title="对齐文本"></a>对齐文本</h4><ul><li><p>注：只能设置水平对齐格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    text-align: center | left | right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>left：左对齐 (默认值)</p></li><li><p>right：右对齐</p></li><li><p>center：居中对齐</p></li></ul><h4 id="装饰文本"><a href="# 装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none | underline | overline | line-through;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>none：默认值，没有装饰</li><li>underline：下划线</li><li>overline：上划线</li><li>line-through：删除线</li></ul><blockquote><p>实例：去除链接的下划线</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文本缩进"><a href="# 文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><ul><li><p>文本首行缩进</p></li><li><p>可以取负值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    text-indent: 20px | 2em;</span><br><span class="line">    &#x2F;* 首行缩进 20px *&#x2F;</span><br><span class="line">    &#x2F;* 2em 是当前 2 个文字大小 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>单位 em，em 是一个相对单位，相当于当前一个元素的大小 <strong>开发常用</strong></li></ul><h4 id="行间距"><a href="# 行间距" class="headerlink" title="行间距"></a>行间距</h4><ul><li><p>控制行与行之间的距离</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="CSS 的引入方式"><a href="#CSS 的引入方式" class="headerlink" title="CSS 的引入方式"></a>CSS 的引入方式</h3><ul><li>css 有三种样式表<ul><li>行内样式表(行内式)</li><li>内部样式表(嵌入式)</li><li>外部样式表(连接式)</li></ul></li></ul><h4 id="内部样式表"><a href="# 内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><ul><li>CSS 代码抽取出来，放到 style 标签中</li><li>理论上 style 可以放到任何地方，但默认放在 head 里</li></ul><h4 id="行内样式表"><a href="# 行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h4><ul><li><p>直接在标签里面加上属性 style 就可以了</p></li><li><p>代码样例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style="color: pink;"&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>style 是标签属性，只能控制当前标签</p></li></ul><h4 id="外部样式表"><a href="# 外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><ul><li><p>使用较多的方法</p></li><li><p>在外部单独写一个 css 页面</p></li><li><p>操作步骤</p><ol><li><p>新建一个.css 文件</p></li><li><p>把之前在 style 标签里写的写在 css 文件里</p></li><li><p>在 HTML 页面中在 head 里写 <code>&lt;link&gt;</code> 标签来引入这个页面</p><link rel="stylesheet" herf="css 路径"></li></ol></li></ul><blockquote><p>小知识：<code>&lt;hr&gt;</code>标签，水平线标签 <br>button 标签，生成一个按钮<br> 颜色 #ff00ff，有两两相同的，可以省略为#f0f<br>不能直接给图片居中对齐，要对图片的父标签做居中对齐才有效</p></blockquote><h3 id="chrome 调试工具"><a href="#chrome 调试工具" class="headerlink" title="chrome 调试工具"></a>chrome 调试工具</h3><ul><li>左侧 HTML，右侧 CSS</li><li>CSS 里有黄色感叹号，有可能是属性写错了</li></ul><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104187730" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104187730</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《Head First HTML 与 CSS》上</title>
      <link href="/archives/bf6c3536.html"/>
      <url>/archives/bf6c3536.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇笔记主要介绍《Head First HTML 与 CSS》有关 HTML 的部分</p></blockquote><a id="more"></a><h1 id="给网页添加图像"><a href="# 给网页添加图像" class="headerlink" title="给网页添加图像"></a>给网页添加图像 </h1><h2 id="浏览器如何处理图像"><a href="# 浏览器如何处理图像" class="headerlink" title="浏览器如何处理图像"></a> 浏览器如何处理图像</h2><ul><li>浏览器对 <code>&lt;img&gt;</code>元素的处理与其他元素稍有不同。浏览器在页面中显示图像之前，必须先获取这个图像。</li><li>浏览器读取一个 html 文件并显示这个文件，发现其中包含 4 个图像元素需要获取，那么浏览器需要从 web 服务器 <code> 逐个 </code> 得到这些图像，向服务器请求 4 次。</li></ul><img data-src="/archives/bf6c3536/image-20200717175551860.png" class><img data-src="/archives/bf6c3536/image-20200717181835915.png" class><img data-src="/archives/bf6c3536/image-20200717182534223.png" class><img data-src="/archives/bf6c3536/image-20200717182628632.png" class><h2 id="图象是如何工作的"><a href="# 图象是如何工作的" class="headerlink" title="图象是如何工作的"></a>图象是如何工作的</h2><ul><li><code>JPEG</code> 包含多达 1600 万种不同颜色，有损压缩，不支持透明度，文件比较小，不支持动画。</li><li><code>PNG</code>可以表示上百万种不同颜色，分为 PNG-8、PNG-24、PNG-32，无损压缩，允许透明。</li><li><code>GIF</code>最多表示 256 种颜色，无损压缩，支持透明度，不过只允许一种颜色设置为透明，支持动画。</li></ul><h2 id="介绍 -lt-img-gt- 元素"><a href="# 介绍 -lt-img-gt- 元素" class="headerlink" title="介绍 &lt;img&gt; 元素"></a>介绍 <code>&lt;img&gt;</code> 元素</h2><ul><li><p><code>img</code>是内联元素，是一个 void 元素，src 属性制定了在 web 页面上图像文件的位置。</p></li><li><p>src 属性不知用于相对链接，还可以放入 URL。</p></li><li><p>一定要提供 alt 属性，当图像未能显示时，为访问者提供一些指示。</p></li><li><p>width 和 height 属性用来调整图像大小。一般图像宽度小于 800 像素。</p><ul><li><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/drink.gif"</span> <span class="attr">width</span>=<span class="string">"48"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>这两个属性只是为了在浏览器显示图像之前，告诉浏览器图像的大小，以便浏览器更好的布局，若希望改变图像大小的表现，通常用 CSS 实现。</li></ul></li><li><p>可以把 <code>&lt;img&gt;</code> 元素放到 <code>&lt;a&gt;</code> 元素中，把图像当作一个可点击的链接。</p></li></ul><img data-src="/archives/bf6c3536/image-20200719165623919.png" class><h1 id="严格的 HTML"><a href="# 严格的 HTML" class="headerlink" title="严格的 HTML"></a>严格的 HTML</h1><h2 id="HTML 简史"><a href="#HTML 简史" class="headerlink" title="HTML 简史"></a>HTML 简史</h2><img data-src="/archives/bf6c3536/image-20200718152325495.png" class><img data-src="/archives/bf6c3536/image-20200718152513996.png" class><h2 id="HTML- 新的“活标准”"><a href="#HTML- 新的“活标准”" class="headerlink" title="HTML, 新的“活标准”"></a>HTML, 新的“活标准”</h2><ul><li><p>万维网协会 W3C 定义了 HTML 的标准。</p></li><li><p>文档定义类型（doctype）用来告诉浏览器你使用的 HTML 版本</p></li><li><p>HTML5 的 doctype:<code>&lt;!doctype html&gt;</code></p></li><li><p>HTML 不会再有版本 6、7、8，它具有 <code> 向后兼容性</code>，即继续向 HTML 增加新的内容，浏览器会支持这个内容，同时也会继续支持原来的内容。</p></li></ul><h2 id="增加一个 -lt-meta-gt- 指定字符编码"><a href="# 增加一个 -lt-meta-gt- 指定字符编码" class="headerlink" title="增加一个 &lt;meta&gt; 指定字符编码"></a>增加一个 <code>&lt;meta&gt;</code> 指定字符编码</h2><img data-src="/archives/bf6c3536/image-20200718153520917.png" class><ul><li>只能在 <code>&lt;head&gt;</code> 元素中放置 <code>&lt;title&gt;</code> <code>&lt;meta&gt;</code> 和<code>&lt;style&gt;</code>元素</li></ul><img data-src="/archives/bf6c3536/image-20200719165411273.png" class>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
            <tag> 《Head First HTML与CSS》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 与 CSS 学习 2</title>
      <link href="/archives/11f9bedf.html"/>
      <url>/archives/11f9bedf.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML 与 CSS 学习 2"><a href="#HTML 与 CSS 学习 2" class="headerlink" title="HTML 与 CSS 学习 2"></a>HTML 与 CSS 学习 2</h1><blockquote><p>这篇笔记主要记了 HTML 里的表格标签，列表标签和表单标签</p></blockquote><a id="more"></a><h2 id="表格标签"><a href="# 表格标签" class="headerlink" title="表格标签"></a>表格标签 </h2><p> 基本语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格中的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表头单元格标签</strong></p><ul><li>语法：&lt; th&gt;&lt; /th&gt;</li><li>表格会加粗，内容会居中显示</li><li>表格属性(不常用，经常通过 css 设置)<br><img data-src="https://img-blog.csdnimg.cn/20200628085500984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI2NTUyMg==,size_16,color_FFFFFF,t_70" alt></li><li>表格属性要写到 table 里</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>表格结构标签</strong></p><ul><li>thead 表示表头区域 tbody 表示主体部分</li><li>使用方法，用 thead 把头部区域包起来</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span>表格头部区域 <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span> 表格主体部分<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>合并单元格</strong></p><ul><li><strong>跨行合并</strong><ul><li>最上侧单元格为目标单元格，写合并代码</li><li>rowspan=“要合并的单元格的个数”</li></ul></li><li><strong>跨列合并</strong><ul><li>最左侧单元格为目标单元格，写合并代码</li><li>colspan=“要合并的单元格的个数”</li></ul></li></ul><blockquote><p>例 <code>&lt; td colspan= &quot;2&quot;&gt;&lt; /td&gt;</code></p></blockquote><h2 id="列表标签"><a href="# 列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><ul><li>列表是用来布局页面的</li><li>分类：<ul><li>无序列表</li><li>有序列表</li><li>自定义列表</li></ul></li></ul><p><strong>无序列表 </strong><br> 代码格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>&lt; ul&gt; 里只能放 &lt; li&gt; 标签，不允许放其他文字或标签，但 &lt; li&gt; 里可以放任何标签</p></blockquote><p><strong>有序列表 </strong><br> 代码格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意事项和无序列表一致，&lt; ol&gt; 里只允许 &lt; li&gt; 标签</li></ul><p><strong>自定义标签</strong></p><ul><li>说明，围绕着表头来解释说明</li><li>代码说明 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span> 名词 1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词 1 解释 1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词 1 解释 2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>dl 里只能有 &lt; dt&gt; 和 &lt; dd&gt; 一个自定义列表里可以有多个 &lt; dt&gt;</p></blockquote><h2 id="表单标签"><a href="# 表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><ul><li>表单，收集用户信息</li><li>组成：<ul><li>表单域</li><li>表单控件(也叫表单元素)</li><li>提示信息</li></ul></li></ul><h3 id="表单域"><a href="# 表单域" class="headerlink" title="表单域"></a><strong>表单域</strong></h3><ul><li>&lt; form&gt; 会把它范围内的元素提交给服务器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url 地址"</span> <span class="attr">method</span>=<span class="string">"提交方式"</span> <span class="attr">name</span>=<span class="string">"表单域名称"</span>&gt;</span> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20200628091708893.png" alt></p><h3 id="表单元素"><a href="# 表单元素" class="headerlink" title="表单元素"></a><strong>表单元素 </strong></h3><p> 元素种类</p><ul><li>input 输入表单元素</li><li>select 下拉表单元素</li><li>textarea 文本域元素</li></ul><p><strong>input 输入元素</strong></p><ul><li>语法规范<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"属性值"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>&lt; input type=&quot; 属性值 &quot;/ &gt;</code> 标签为单标签<br><img data-src="https://img-blog.csdnimg.cn/20200628092324419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI2NTUyMg==,size_16,color_FFFFFF,t_70" alt></li><li>input 的其他属性<br><strong>name 属性:</strong> 单选按钮和复选按钮必须在同一 name 下<br><strong>value 属性:</strong> 在输入框内的默认文字; 往后台发送值; 可以更改按钮里的文字<br><strong>checked 属性:</strong> 针对单选按钮和复选按钮; 当页面打开的时候，默认选中这个按钮; <code>checked=&quot;checked&quot;</code><br><strong>maxlength 属性:</strong> 用户最大填入字符的长度; <code>maxlength=&quot; 长度 &quot;</code></li></ul><p><strong>&lt; label&gt; 标签</strong></p><ul><li>扩大表单元素的点击面积</li><li>双标签, 特征值 (id) 必须和 for 相同</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"man"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"man"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>select 下拉表单元素</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>男 <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span> 女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>机器人<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>select 至少包含一对 option<br>option 里属性 selected=”selected”当前项为默认项</p></blockquote><p><strong>textarea 文本域元素</strong></p><ul><li>写很多很多文字的时候用这个</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">  默认显示的内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104149656" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104149656</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 与 CSS 学习 1</title>
      <link href="/archives/88f0ef65.html"/>
      <url>/archives/88f0ef65.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML 与 CSS 学习 1"><a href="#HTML 与 CSS 学习 1" class="headerlink" title="HTML 与 CSS 学习 1"></a>HTML 与 CSS 学习 1</h1><blockquote><p>学习路径：</p><ul><li>HTML 20%</li><li>CSS3 50%</li><li>H5C3 10% 包括新增的标签</li></ul></blockquote><a id="more"></a><h2 id="各种网页编程语言的功能"><a href="# 各种网页编程语言的功能" class="headerlink" title="各种网页编程语言的功能"></a>各种网页编程语言的功能</h2><ul><li>结构   网页元素整理分类 HTML</li><li>表现   版式，颜色 大小 CSS</li><li>行为   网页交互的编写后端 JS</li></ul><h2 id="HTML 标签"><a href="#HTML 标签" class="headerlink" title="HTML 标签"></a><strong>HTML 标签 </strong></h2><p> 各种标签的讲解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> <span class="meta">&lt;!DOCTYPE&gt;</span>告诉浏览器使用的 HTML5 版本</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span> lang="当前文档的显示的语言" 中文 "zh-CN"，英语 "en"</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span> charset 规定文档的字符编码</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span> 移动端开发的代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>HTML 常用的标签 </strong><br><br><strong> 换行标签 </strong> <code> 单标签</code> &lt; br /&gt; 强制换行(也可以这么写 &lt; br &gt;)</p><blockquote><p>小知识：html 里多个空格只会显示一个空格(回车算一个空格) 段落和换行的区别，段落两行之间会有空隙，换行不会有空隙</p></blockquote><p><strong>文本格式化标签</strong></p><ul><li>加粗   <code>&lt;strong&gt; 加粗标签 &lt;/strong&gt;</code>       <code>&lt;b&gt; 加粗标签 *2&lt;/b &gt;</code>  优先考虑 strong</li><li>斜体 <code>&lt;em&gt; 倾斜标签 &lt;/em&gt;</code>  <code>&lt;i&gt; 倾斜标签 *2&lt;/i&gt;</code> 优先考虑 em</li><li>斜体 <code>&lt;em&gt; 倾斜标签 &lt;/em&gt;</code> <code>&lt;i&gt; 倾斜标签 *2&lt;/i&gt;</code> 优先考虑 em</li><li>下划线 <code>&lt;ins&gt; 下划线标签 &lt;/ins&gt;</code> <code>&lt;u&gt; 下划线标签 *2&lt;/u&gt;</code> 优先使用 ins</li></ul><p><strong>特殊的标签 div 和 span</strong></p><ul><li>div  用来布局的 但是他是单独占一整行</li><li>span  在一行上显示多个 span</li></ul><p><strong>图像标签和路径</strong></p><ul><li><p>图像标签 <code>&lt; img src=&quot; 图像 URL&quot; /&gt;</code>　<code>单标签</code>　同一目录下可以直接用图片名做 url</p></li><li><p>图像标签的参数 (参数之间用空格分开)</p><ul><li>alt 如果图片不能显示用来替换的文字</li><li>height 图片高度</li><li>width 图片宽度</li><li>title 鼠标放到图片上显示的文字</li><li>border 边框宽度 css 设定的情况比较多</li></ul></li></ul><p><strong>路径</strong></p><ul><li><code>相对路径</code> 相对于 html 文件的路径<ul><li>同一级的相对路径 直接写文件名就可</li><li>下一级路径 下一级文件夹名 / 文件名</li><li>上一级路径 …/ 文件名</li></ul></li><li><code>绝对路径</code> 从盘符开始的路径<ul><li>如果找不到的话需要 file 协议(file: 文件路径)</li><li>使用时经常用图片网址作为绝对路<blockquote><p>小知识 相对路径使用的是 /  绝对路径使用的是 \</p></blockquote></li></ul></li></ul><p><strong>超链接标签 a</strong></p><p>超链接语法格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">""</span> <span class="attr">target</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>herf 用于链接目标的地址(必须</li><li>外部链接 两个标签中间作为超链接开关</li><li>内部链接 herf 直接写文件名称就可以(盲猜也是使用相对路径)</li><li>空链接 herf 可以用空链接 用 #代替</li><li>下载链接 如果 herf 里是一个 zip 或文件则默认下载</li><li>各种元素都可以做为超链接</li><li>锚点链接 跳到本页中的某处的链接<ul><li>herf 属性里为’# 名字’的形式</li><li>然后在目标标签里</li></ul></li><li>target 链接页面的打开方式 _self 为默认值在当前页打开 _blank 为在新窗口打开</li></ul><p><strong>注释标签和特殊字符</strong></p><ul><li>注释标签 &lt;!–这就是注释–&gt;</li><li>快捷键 ctrl+/</li><li>常用特殊字符</li></ul><table><thead><tr><th>符号名</th><th>字符代码</th></tr></thead><tbody><tr><td>大于号</td><td>&amp;gt</td></tr><tr><td>小于号</td><td>&amp;lt</td></tr><tr><td>空格</td><td>&amp;nbsp</td></tr></tbody></table><blockquote><p>本文转载自<a href="https://blog.csdn.net/weixin_46170034/article/details/104685465" target="_blank" rel="external nofollow noopener noreferrer">https://blog.csdn.net/weixin_46170034/article/details/104685465</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML与CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
